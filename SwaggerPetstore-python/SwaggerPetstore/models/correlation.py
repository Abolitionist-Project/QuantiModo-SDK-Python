#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 Reverb Technologies, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

class Correlation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name and the value is attribute type.
        :param dict attributeMap: The key is attribute name and the value is json key in definition.
        """
        self.swagger_types = {
            'correlation_coefficient': 'Number',
            'cause': 'str',
            'effect': 'str',
            'onset_delay': 'float',
            'duration_of_action': 'Number',
            'number_of_pairs': 'Number',
            'effect_size': 'str',
            'statistical_significance': 'str',
            'timestamp': 'Number',
            'reverse_correlation': 'Number',
            'causality_factor': 'Number',
            'cause_category': 'str',
            'effect_category': 'str'
        }

        self.attribute_map = {
            'correlation_coefficient': 'correlationCoefficient',
            'cause': 'cause',
            'effect': 'effect',
            'onset_delay': 'onsetDelay',
            'duration_of_action': 'durationOfAction',
            'number_of_pairs': 'numberOfPairs',
            'effect_size': 'effectSize',
            'statistical_significance': 'statisticalSignificance',
            'timestamp': 'timestamp',
            'reverse_correlation': 'reverseCorrelation',
            'causality_factor': 'causalityFactor',
            'cause_category': 'causeCategory',
            'effect_category': 'effectCategory'
        }
        
        # Pearson correlation coefficient between cause and effect measurements
        self.correlation_coefficient = None  # Number
        
        # ORIGINAL variable name of the cause variable for which the user desires correlations.
        self.cause = None  # str
        
        # ORIGINAL variable name of the effect variable for which the user desires correlations.
        self.effect = None  # str
        
        # User estimated or default time after cause measurement before a perceivable effect is observed
        self.onset_delay = None  # float
        
        # Time over which the cause is expected to produce a perceivable effect following the onset delay
        self.duration_of_action = None  # Number
        
        # Number of points that went into the correlation calculation
        self.number_of_pairs = None  # Number
        
        # Magnitude of the effects of a cause indicating whether it&#39;s practically meaningful.
        self.effect_size = None  # str
        
        # A function of the effect size and sample size
        self.statistical_significance = None  # str
        
        # Time at which correlation was calculated
        self.timestamp = None  # Number
        
        # Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.
        self.reverse_correlation = None  # Number
        
        # 
        self.causality_factor = None  # Number
        
        # Variable category of the cause variable.
        self.cause_category = None  # str
        
        # Variable category of the effect variable.
        self.effect_category = None  # str
        

    def __repr__(self):
        properties = []
        for p in self.__dict__:
            if p != 'swaggerTypes' and p != 'attributeMap':
                properties.append('{prop}={val!r}'.format(prop=p, val=self.__dict__[p]))

        return '<{name} {props}>'.format(name=__name__, props=' '.join(properties))


