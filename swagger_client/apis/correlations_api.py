# coding: utf-8

"""
CorrelationsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CorrelationsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def v1_correlations_get(self, **kwargs):
        """
        Get correlations
        Get correlations.<br>Supported filter parameters:<br><ul><li><b>correlationCoefficient</b> - Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action</li><li><b>onsetDelay</b> - The number of seconds which pass following a cause measurement before an effect would likely be observed.</li><li><b>durationOfAction</b> - The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.</li><li><b>lastUpdated</b> - The time that this measurement was last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul><br>

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_correlations_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str effect: ORIGINAL variable name of the effect variable for which the user desires correlations
        :param str cause: ORIGINAL variable name of the cause variable for which the user desires correlations
        :param str correlation_coefficient: Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
        :param str onset_delay: The number of seconds which pass following a cause measurement before an effect would likely be observed.
        :param str duration_of_action: The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.
        :param str last_updated: The time that this measurement was last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"
        :param int limit: The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
        :param int offset: Now suppose you wanted to show results 11-20. You'd set the offset to 10 and the limit to 10.
        :param int sort: Sort by given field. If the field is prefixed with `-, it will sort in descending order.
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['effect', 'cause', 'correlation_coefficient', 'onset_delay', 'duration_of_action', 'last_updated', 'limit', 'offset', 'sort']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_correlations_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/correlations'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'effect' in params:
            query_params['effect'] = params['effect']
        if 'cause' in params:
            query_params['cause'] = params['cause']
        if 'correlation_coefficient' in params:
            query_params['correlationCoefficient'] = params['correlation_coefficient']
        if 'onset_delay' in params:
            query_params['onsetDelay'] = params['onset_delay']
        if 'duration_of_action' in params:
            query_params['durationOfAction'] = params['duration_of_action']
        if 'last_updated' in params:
            query_params['lastUpdated'] = params['last_updated']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_correlations_post(self, body, **kwargs):
        """
        Store or Update a Correlation
        Add correlation

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_correlations_post(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PostCorrelation body: Provides correlation data (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `v1_correlations_post`")

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_correlations_post" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/correlations'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get(self, organization_id, user_id, variable_name, organization_token, **kwargs):
        """
        Search user correlations for a given cause
        Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \"include_public\" is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get(organization_id, user_id, variable_name, organization_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int organization_id: Organization ID (required)
        :param int user_id: User id (required)
        :param str variable_name: Effect variable name (required)
        :param str organization_token: Organization access token (required)
        :param str include_public: Include bublic correlations, Can be \"1\" or empty.
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'organization_id' is set
        if organization_id is None:
            raise ValueError("Missing the required parameter `organization_id` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get`")
        # verify the required parameter 'user_id' is set
        if user_id is None:
            raise ValueError("Missing the required parameter `user_id` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get`")
        # verify the required parameter 'variable_name' is set
        if variable_name is None:
            raise ValueError("Missing the required parameter `variable_name` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get`")
        # verify the required parameter 'organization_token' is set
        if organization_token is None:
            raise ValueError("Missing the required parameter `organization_token` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get`")

        all_params = ['organization_id', 'user_id', 'variable_name', 'organization_token', 'include_public']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_organizations_organization_id_users_user_id_variables_variable_name_causes_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'organization_id' in params:
            path_params['organizationId'] = params['organization_id']
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'variable_name' in params:
            path_params['variableName'] = params['variable_name']

        query_params = {}
        if 'organization_token' in params:
            query_params['organization_token'] = params['organization_token']
        if 'include_public' in params:
            query_params['include_public'] = params['include_public']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get(self, organization_id, user_id, variable_name, organization_token, **kwargs):
        """
        Search user correlations for a given cause
        Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \"include_public\" is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get(organization_id, user_id, variable_name, organization_token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int organization_id: Organization ID (required)
        :param int user_id: User id (required)
        :param str variable_name: Cause variable name (required)
        :param str organization_token: Organization access token (required)
        :param str include_public: Include bublic correlations, Can be \"1\" or empty.
        :return: list[CommonResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'organization_id' is set
        if organization_id is None:
            raise ValueError("Missing the required parameter `organization_id` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get`")
        # verify the required parameter 'user_id' is set
        if user_id is None:
            raise ValueError("Missing the required parameter `user_id` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get`")
        # verify the required parameter 'variable_name' is set
        if variable_name is None:
            raise ValueError("Missing the required parameter `variable_name` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get`")
        # verify the required parameter 'organization_token' is set
        if organization_token is None:
            raise ValueError("Missing the required parameter `organization_token` when calling `v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get`")

        all_params = ['organization_id', 'user_id', 'variable_name', 'organization_token', 'include_public']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_organizations_organization_id_users_user_id_variables_variable_name_effects_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'organization_id' in params:
            path_params['organizationId'] = params['organization_id']
        if 'user_id' in params:
            path_params['userId'] = params['user_id']
        if 'variable_name' in params:
            path_params['variableName'] = params['variable_name']

        query_params = {}
        if 'organization_token' in params:
            query_params['organization_token'] = params['organization_token']
        if 'include_public' in params:
            query_params['include_public'] = params['include_public']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[CommonResponse]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_public_correlations_search_search_get(self, search, effect_or_cause, **kwargs):
        """
        Get average correlations for variables containing search term
        Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_public_correlations_search_search_get(search, effect_or_cause, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search: Name of the variable that you want to know the causes or effects of. (required)
        :param str effect_or_cause: Specifies whether to return the effects or causes of the searched variable. (required)
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'search' is set
        if search is None:
            raise ValueError("Missing the required parameter `search` when calling `v1_public_correlations_search_search_get`")
        # verify the required parameter 'effect_or_cause' is set
        if effect_or_cause is None:
            raise ValueError("Missing the required parameter `effect_or_cause` when calling `v1_public_correlations_search_search_get`")

        all_params = ['search', 'effect_or_cause']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_public_correlations_search_search_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/public/correlations/search/{search}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'search' in params:
            path_params['search'] = params['search']

        query_params = {}
        if 'effect_or_cause' in params:
            query_params['effectOrCause'] = params['effect_or_cause']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_variables_variable_name_causes_get(self, variable_name, **kwargs):
        """
        Search user correlations for a given effect
        Returns average of all correlations and votes for all user cause variables for a given effect

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_variables_variable_name_causes_get(variable_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str variable_name: Effect variable name (required)
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'variable_name' is set
        if variable_name is None:
            raise ValueError("Missing the required parameter `variable_name` when calling `v1_variables_variable_name_causes_get`")

        all_params = ['variable_name']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_variables_variable_name_causes_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/variables/{variableName}/causes'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'variable_name' in params:
            path_params['variableName'] = params['variable_name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_variables_variable_name_effects_get(self, variable_name, **kwargs):
        """
        Search user correlations for a given cause
        Returns average of all correlations and votes for all user effect variables for a given cause

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_variables_variable_name_effects_get(variable_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str variable_name: Cause variable name (required)
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'variable_name' is set
        if variable_name is None:
            raise ValueError("Missing the required parameter `variable_name` when calling `v1_variables_variable_name_effects_get`")

        all_params = ['variable_name']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_variables_variable_name_effects_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/variables/{variableName}/effects'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'variable_name' in params:
            path_params['variableName'] = params['variable_name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_variables_variable_name_public_causes_get(self, variable_name, **kwargs):
        """
        Search public correlations for a given effect
        Returns average of all correlations and votes for all public cause variables for a given effect

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_variables_variable_name_public_causes_get(variable_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str variable_name: Effect variable name (required)
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'variable_name' is set
        if variable_name is None:
            raise ValueError("Missing the required parameter `variable_name` when calling `v1_variables_variable_name_public_causes_get`")

        all_params = ['variable_name']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_variables_variable_name_public_causes_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/variables/{variableName}/public/causes'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'variable_name' in params:
            path_params['variableName'] = params['variable_name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_variables_variable_name_public_effects_get(self, variable_name, **kwargs):
        """
        Search public correlations for a given cause
        Returns average of all correlations and votes for all public cause variables for a given cause

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_variables_variable_name_public_effects_get(variable_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str variable_name: Cause variable name (required)
        :return: list[Correlation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'variable_name' is set
        if variable_name is None:
            raise ValueError("Missing the required parameter `variable_name` when calling `v1_variables_variable_name_public_effects_get`")

        all_params = ['variable_name']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_variables_variable_name_public_effects_get" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/variables/{variableName}/public/effects'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'variable_name' in params:
            path_params['variableName'] = params['variable_name']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='list[Correlation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_votes_post(self, cause, effect, correlation, **kwargs):
        """
        Post or update vote
        This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_votes_post(cause, effect, correlation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cause: Cause variable name (required)
        :param str effect: Effect variable name (required)
        :param float correlation: Correlation value (required)
        :param bool vote: Vote: 0 (for implausible) or 1 (for plausible)
        :return: CommonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'cause' is set
        if cause is None:
            raise ValueError("Missing the required parameter `cause` when calling `v1_votes_post`")
        # verify the required parameter 'effect' is set
        if effect is None:
            raise ValueError("Missing the required parameter `effect` when calling `v1_votes_post`")
        # verify the required parameter 'correlation' is set
        if correlation is None:
            raise ValueError("Missing the required parameter `correlation` when calling `v1_votes_post`")

        all_params = ['cause', 'effect', 'correlation', 'vote']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_votes_post" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/votes'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}
        if 'cause' in params:
            query_params['cause'] = params['cause']
        if 'effect' in params:
            query_params['effect'] = params['effect']
        if 'correlation' in params:
            query_params['correlation'] = params['correlation']
        if 'vote' in params:
            query_params['vote'] = params['vote']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CommonResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def v1_votes_delete_post(self, cause, effect, **kwargs):
        """
        Delete vote
        Delete previously posted vote

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.v1_votes_delete_post(cause, effect, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str cause: Cause variable name (required)
        :param str effect: Effect variable name (required)
        :return: CommonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'cause' is set
        if cause is None:
            raise ValueError("Missing the required parameter `cause` when calling `v1_votes_delete_post`")
        # verify the required parameter 'effect' is set
        if effect is None:
            raise ValueError("Missing the required parameter `effect` when calling `v1_votes_delete_post`")

        all_params = ['cause', 'effect']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_votes_delete_post" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/v1/votes/delete'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}
        if 'cause' in params:
            query_params['cause'] = params['cause']
        if 'effect' in params:
            query_params['effect'] = params['effect']

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='CommonResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
