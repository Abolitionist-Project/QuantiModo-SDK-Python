# coding: utf-8

"""
UserVariableApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class UserVariableApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def user_variables_get(self, **kwargs):
        """
        Get all UserVariables
        Get all UserVariables

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_variables_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: User's OAuth2 access token
        :param str client_id: The ID of the client application which last created or updated this user variable
        :param int parent_id: ID of the parent variable if this variable has any parent
        :param int variable_id: ID of variable
        :param int user_id: User ID
        :param int default_unit_id: D of unit to use for this variable
        :param float minimum_allowed_value: Minimum reasonable value for this variable (uses default unit)
        :param float maximum_allowed_value: Maximum reasonable value for this variable (uses default unit)
        :param float filling_value: Value for replacing null measurements
        :param int join_with: The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables
        :param int onset_delay: Estimated number of seconds that pass before a stimulus produces a perceivable effect
        :param int duration_of_action: Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
        :param int variable_category_id: ID of variable category
        :param int updated: updated
        :param int public: Is variable public
        :param bool cause_only: A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
        :param str filling_type: 0 -> No filling, 1 -> Use filling-value
        :param int number_of_measurements: Number of measurements
        :param int number_of_processed_measurements: Number of processed measurements
        :param int measurements_at_last_analysis: Number of measurements at last analysis
        :param int last_unit_id: ID of last Unit
        :param int last_original_unit_id: ID of last original Unit
        :param int last_original_value: Last original value which is stored
        :param float last_value: Last Value
        :param float last_original_value2: Last original value which is stored
        :param int last_source_id: ID of last source
        :param int number_of_correlations: Number of correlations for this variable
        :param str status: status
        :param str error_message: error_message
        :param str last_successful_update_time: When this variable or its settings were last updated
        :param float standard_deviation: Standard deviation
        :param float variance: Variance
        :param float minimum_recorded_value: Minimum recorded value of this variable
        :param float maximum_recorded_value: Maximum recorded value of this variable
        :param float mean: Mean
        :param float median: Median
        :param int most_common_unit_id: Most common Unit ID
        :param float most_common_value: Most common value
        :param float number_of_unique_daily_values: Number of unique daily values
        :param int number_of_changes: Number of changes
        :param float skewness: Skewness
        :param float kurtosis: Kurtosis
        :param float latitude: Latitude
        :param float longitude: Longitude
        :param str location: Location
        :param str created_at: When the record was first created. Use ISO 8601 datetime format
        :param str updated_at: When the record was last updated. Use ISO 8601 datetime format
        :param bool outcome: Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
        :param str sources: Comma-separated list of source names to limit variables to those sources
        :param int earliest_source_time: Earliest source time
        :param int latest_source_time: Latest source time
        :param int earliest_measurement_time: Earliest measurement time
        :param int latest_measurement_time: Latest measurement time
        :param int earliest_filling_time: Earliest filling time
        :param int latest_filling_time: Latest filling time
        :param int limit: The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records.
        :param int offset: OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned.
        :param str sort: Sort by given field. If the field is prefixed with '-', it will sort in descending order.
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'client_id', 'parent_id', 'variable_id', 'user_id', 'default_unit_id', 'minimum_allowed_value', 'maximum_allowed_value', 'filling_value', 'join_with', 'onset_delay', 'duration_of_action', 'variable_category_id', 'updated', 'public', 'cause_only', 'filling_type', 'number_of_measurements', 'number_of_processed_measurements', 'measurements_at_last_analysis', 'last_unit_id', 'last_original_unit_id', 'last_original_value', 'last_value', 'last_original_value2', 'last_source_id', 'number_of_correlations', 'status', 'error_message', 'last_successful_update_time', 'standard_deviation', 'variance', 'minimum_recorded_value', 'maximum_recorded_value', 'mean', 'median', 'most_common_unit_id', 'most_common_value', 'number_of_unique_daily_values', 'number_of_changes', 'skewness', 'kurtosis', 'latitude', 'longitude', 'location', 'created_at', 'updated_at', 'outcome', 'sources', 'earliest_source_time', 'latest_source_time', 'earliest_measurement_time', 'latest_measurement_time', 'earliest_filling_time', 'latest_filling_time', 'limit', 'offset', 'sort']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_variables_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/userVariables'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']
        if 'client_id' in params:
            query_params['client_id'] = params['client_id']
        if 'parent_id' in params:
            query_params['parent_id'] = params['parent_id']
        if 'variable_id' in params:
            query_params['variable_id'] = params['variable_id']
        if 'user_id' in params:
            query_params['user_id'] = params['user_id']
        if 'default_unit_id' in params:
            query_params['default_unit_id'] = params['default_unit_id']
        if 'minimum_allowed_value' in params:
            query_params['minimum_allowed_value'] = params['minimum_allowed_value']
        if 'maximum_allowed_value' in params:
            query_params['maximum_allowed_value'] = params['maximum_allowed_value']
        if 'filling_value' in params:
            query_params['filling_value'] = params['filling_value']
        if 'join_with' in params:
            query_params['join_with'] = params['join_with']
        if 'onset_delay' in params:
            query_params['onset_delay'] = params['onset_delay']
        if 'duration_of_action' in params:
            query_params['duration_of_action'] = params['duration_of_action']
        if 'variable_category_id' in params:
            query_params['variable_category_id'] = params['variable_category_id']
        if 'updated' in params:
            query_params['updated'] = params['updated']
        if 'public' in params:
            query_params['public'] = params['public']
        if 'cause_only' in params:
            query_params['cause_only'] = params['cause_only']
        if 'filling_type' in params:
            query_params['filling_type'] = params['filling_type']
        if 'number_of_measurements' in params:
            query_params['number_of_measurements'] = params['number_of_measurements']
        if 'number_of_processed_measurements' in params:
            query_params['number_of_processed_measurements'] = params['number_of_processed_measurements']
        if 'measurements_at_last_analysis' in params:
            query_params['measurements_at_last_analysis'] = params['measurements_at_last_analysis']
        if 'last_unit_id' in params:
            query_params['last_unit_id'] = params['last_unit_id']
        if 'last_original_unit_id' in params:
            query_params['last_original_unit_id'] = params['last_original_unit_id']
        if 'last_original_value' in params:
            query_params['last_original_value'] = params['last_original_value']
        if 'last_value' in params:
            query_params['last_value'] = params['last_value']
        if 'last_original_value2' in params:
            query_params['last_original_value'] = params['last_original_value2']
        if 'last_source_id' in params:
            query_params['last_source_id'] = params['last_source_id']
        if 'number_of_correlations' in params:
            query_params['number_of_correlations'] = params['number_of_correlations']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'error_message' in params:
            query_params['error_message'] = params['error_message']
        if 'last_successful_update_time' in params:
            query_params['last_successful_update_time'] = params['last_successful_update_time']
        if 'standard_deviation' in params:
            query_params['standard_deviation'] = params['standard_deviation']
        if 'variance' in params:
            query_params['variance'] = params['variance']
        if 'minimum_recorded_value' in params:
            query_params['minimum_recorded_value'] = params['minimum_recorded_value']
        if 'maximum_recorded_value' in params:
            query_params['maximum_recorded_value'] = params['maximum_recorded_value']
        if 'mean' in params:
            query_params['mean'] = params['mean']
        if 'median' in params:
            query_params['median'] = params['median']
        if 'most_common_unit_id' in params:
            query_params['most_common_unit_id'] = params['most_common_unit_id']
        if 'most_common_value' in params:
            query_params['most_common_value'] = params['most_common_value']
        if 'number_of_unique_daily_values' in params:
            query_params['number_of_unique_daily_values'] = params['number_of_unique_daily_values']
        if 'number_of_changes' in params:
            query_params['number_of_changes'] = params['number_of_changes']
        if 'skewness' in params:
            query_params['skewness'] = params['skewness']
        if 'kurtosis' in params:
            query_params['kurtosis'] = params['kurtosis']
        if 'latitude' in params:
            query_params['latitude'] = params['latitude']
        if 'longitude' in params:
            query_params['longitude'] = params['longitude']
        if 'location' in params:
            query_params['location'] = params['location']
        if 'created_at' in params:
            query_params['created_at'] = params['created_at']
        if 'updated_at' in params:
            query_params['updated_at'] = params['updated_at']
        if 'outcome' in params:
            query_params['outcome'] = params['outcome']
        if 'sources' in params:
            query_params['sources'] = params['sources']
        if 'earliest_source_time' in params:
            query_params['earliest_source_time'] = params['earliest_source_time']
        if 'latest_source_time' in params:
            query_params['latest_source_time'] = params['latest_source_time']
        if 'earliest_measurement_time' in params:
            query_params['earliest_measurement_time'] = params['earliest_measurement_time']
        if 'latest_measurement_time' in params:
            query_params['latest_measurement_time'] = params['latest_measurement_time']
        if 'earliest_filling_time' in params:
            query_params['earliest_filling_time'] = params['earliest_filling_time']
        if 'latest_filling_time' in params:
            query_params['latest_filling_time'] = params['latest_filling_time']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'sort' in params:
            query_params['sort'] = params['sort']

        header_params = {}

        form_params = []
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['quantimodo_oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='InlineResponse2009',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def user_variables_post(self, **kwargs):
        """
        Store UserVariable
        Users can change things like the display name for a variable. They can also change the parameters used in analysis of that variable such as the expected duration of action for a variable to have an effect, the estimated delay before the onset of action. In order to filter out erroneous data, they are able to set the maximum and minimum reasonable daily values for a variable.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_variables_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str access_token: User's OAuth2 access token
        :param UserVariable body: UserVariable that should be stored
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_token', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_variables_post" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/userVariables'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['quantimodo_oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='InlineResponse20030',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def user_variables_id_get(self, id, **kwargs):
        """
        Get UserVariable
        Get UserVariable

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_variables_id_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id of UserVariable (required)
        :param str access_token: User's OAuth2 access token
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'access_token']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_variables_id_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_variables_id_get`")

        resource_path = '/userVariables/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['quantimodo_oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='InlineResponse20030',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def user_variables_id_put(self, id, **kwargs):
        """
        Update UserVariable
        Update UserVariable

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_variables_id_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id of UserVariable (required)
        :param str access_token: User's OAuth2 access token
        :param UserVariable body: UserVariable that should be updated
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'access_token', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_variables_id_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_variables_id_put`")

        resource_path = '/userVariables/{id}'.replace('{format}', 'json')
        method = 'PUT'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['quantimodo_oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='InlineResponse2002',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def user_variables_id_delete(self, id, **kwargs):
        """
        Delete UserVariable
        Delete UserVariable

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_variables_id_delete(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id of UserVariable (required)
        :param str access_token: User's OAuth2 access token
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'access_token']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_variables_id_delete" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `user_variables_id_delete`")

        resource_path = '/userVariables/{id}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'access_token' in params:
            query_params['access_token'] = params['access_token']

        header_params = {}

        form_params = []
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['quantimodo_oauth2']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='InlineResponse2002',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
