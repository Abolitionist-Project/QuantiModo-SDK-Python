# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MeasurementPost(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MeasurementPost - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variable_id': 'int',
            'source_id': 'int',
            'unit_id': 'int',
            'measurements': 'list[MeasurementValue]'
        }

        self.attribute_map = {
            'variable_id': 'variable_id',
            'source_id': 'source_id',
            'unit_id': 'unit_id',
            'measurements': 'measurements'
        }

        self._variable_id = None
        self._source_id = None
        self._unit_id = None
        self._measurements = None

    @property
    def variable_id(self):
        """
        Gets the variable_id of this MeasurementPost.
        ID of the variable for the measurement as obtained from the GET variables endpoint

        :return: The variable_id of this MeasurementPost.
        :rtype: int
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """
        Sets the variable_id of this MeasurementPost.
        ID of the variable for the measurement as obtained from the GET variables endpoint

        :param variable_id: The variable_id of this MeasurementPost.
        :type: int
        """
        self._variable_id = variable_id

    @property
    def source_id(self):
        """
        Gets the source_id of this MeasurementPost.
        Source ID of the app or device as obtained from the GET sources endpoint

        :return: The source_id of this MeasurementPost.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this MeasurementPost.
        Source ID of the app or device as obtained from the GET sources endpoint

        :param source_id: The source_id of this MeasurementPost.
        :type: int
        """
        self._source_id = source_id

    @property
    def unit_id(self):
        """
        Gets the unit_id of this MeasurementPost.
        Unit id for the measurement value as obtained from the GET units endpoint

        :return: The unit_id of this MeasurementPost.
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """
        Sets the unit_id of this MeasurementPost.
        Unit id for the measurement value as obtained from the GET units endpoint

        :param unit_id: The unit_id of this MeasurementPost.
        :type: int
        """
        self._unit_id = unit_id

    @property
    def measurements(self):
        """
        Gets the measurements of this MeasurementPost.
        measurements

        :return: The measurements of this MeasurementPost.
        :rtype: list[MeasurementValue]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """
        Sets the measurements of this MeasurementPost.
        measurements

        :param measurements: The measurements of this MeasurementPost.
        :type: list[MeasurementValue]
        """
        self._measurements = measurements

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

