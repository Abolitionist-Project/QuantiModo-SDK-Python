# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Measurement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Measurement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'user_id': 'int',
            'client_id': 'str',
            'connector_id': 'int',
            'variable_id': 'int',
            'source_id': 'int',
            'start_time': 'str',
            'value': 'float',
            'unit_id': 'int',
            'original_value': 'float',
            'original_unit_id': 'int',
            'duration': 'int',
            'note': 'str',
            'latitude': 'float',
            'longitude': 'float',
            'location': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'error': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'client_id': 'client_id',
            'connector_id': 'connector_id',
            'variable_id': 'variable_id',
            'source_id': 'source_id',
            'start_time': 'start_time',
            'value': 'value',
            'unit_id': 'unit_id',
            'original_value': 'original_value',
            'original_unit_id': 'original_unit_id',
            'duration': 'duration',
            'note': 'note',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'location': 'location',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'error': 'error'
        }

        self._id = None
        self._user_id = None
        self._client_id = None
        self._connector_id = None
        self._variable_id = None
        self._source_id = None
        self._start_time = None
        self._value = None
        self._unit_id = None
        self._original_value = None
        self._original_unit_id = None
        self._duration = None
        self._note = None
        self._latitude = None
        self._longitude = None
        self._location = None
        self._created_at = None
        self._updated_at = None
        self._error = None

    @property
    def id(self):
        """
        Gets the id of this Measurement.
        id

        :return: The id of this Measurement.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Measurement.
        id

        :param id: The id of this Measurement.
        :type: int
        """
        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this Measurement.
        ID of user that owns this measurement

        :return: The user_id of this Measurement.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Measurement.
        ID of user that owns this measurement

        :param user_id: The user_id of this Measurement.
        :type: int
        """
        self._user_id = user_id

    @property
    def client_id(self):
        """
        Gets the client_id of this Measurement.
        client_id

        :return: The client_id of this Measurement.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Measurement.
        client_id

        :param client_id: The client_id of this Measurement.
        :type: str
        """
        self._client_id = client_id

    @property
    def connector_id(self):
        """
        Gets the connector_id of this Measurement.
        The id for the connector data source from which the measurement was obtained

        :return: The connector_id of this Measurement.
        :rtype: int
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """
        Sets the connector_id of this Measurement.
        The id for the connector data source from which the measurement was obtained

        :param connector_id: The connector_id of this Measurement.
        :type: int
        """
        self._connector_id = connector_id

    @property
    def variable_id(self):
        """
        Gets the variable_id of this Measurement.
        ID of the variable for which we are creating the measurement records

        :return: The variable_id of this Measurement.
        :rtype: int
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """
        Sets the variable_id of this Measurement.
        ID of the variable for which we are creating the measurement records

        :param variable_id: The variable_id of this Measurement.
        :type: int
        """
        self._variable_id = variable_id

    @property
    def source_id(self):
        """
        Gets the source_id of this Measurement.
        Application or device used to record the measurement values

        :return: The source_id of this Measurement.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this Measurement.
        Application or device used to record the measurement values

        :param source_id: The source_id of this Measurement.
        :type: int
        """
        self._source_id = source_id

    @property
    def start_time(self):
        """
        Gets the start_time of this Measurement.
        Start Time for the measurement event. Use ISO 8601

        :return: The start_time of this Measurement.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Measurement.
        Start Time for the measurement event. Use ISO 8601

        :param start_time: The start_time of this Measurement.
        :type: str
        """
        self._start_time = start_time

    @property
    def value(self):
        """
        Gets the value of this Measurement.
        The value of the measurement after conversion to the default unit for that variable

        :return: The value of this Measurement.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Measurement.
        The value of the measurement after conversion to the default unit for that variable

        :param value: The value of this Measurement.
        :type: float
        """
        self._value = value

    @property
    def unit_id(self):
        """
        Gets the unit_id of this Measurement.
        The default unit for the variable

        :return: The unit_id of this Measurement.
        :rtype: int
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """
        Sets the unit_id of this Measurement.
        The default unit for the variable

        :param unit_id: The unit_id of this Measurement.
        :type: int
        """
        self._unit_id = unit_id

    @property
    def original_value(self):
        """
        Gets the original_value of this Measurement.
        Value of measurement as originally posted (before conversion to default unit)

        :return: The original_value of this Measurement.
        :rtype: float
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """
        Sets the original_value of this Measurement.
        Value of measurement as originally posted (before conversion to default unit)

        :param original_value: The original_value of this Measurement.
        :type: float
        """
        self._original_value = original_value

    @property
    def original_unit_id(self):
        """
        Gets the original_unit_id of this Measurement.
        Unit ID of measurement as originally submitted

        :return: The original_unit_id of this Measurement.
        :rtype: int
        """
        return self._original_unit_id

    @original_unit_id.setter
    def original_unit_id(self, original_unit_id):
        """
        Sets the original_unit_id of this Measurement.
        Unit ID of measurement as originally submitted

        :param original_unit_id: The original_unit_id of this Measurement.
        :type: int
        """
        self._original_unit_id = original_unit_id

    @property
    def duration(self):
        """
        Gets the duration of this Measurement.
        Duration of the event being measurement in seconds

        :return: The duration of this Measurement.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Measurement.
        Duration of the event being measurement in seconds

        :param duration: The duration of this Measurement.
        :type: int
        """
        self._duration = duration

    @property
    def note(self):
        """
        Gets the note of this Measurement.
        An optional note the user may include with their measurement

        :return: The note of this Measurement.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Measurement.
        An optional note the user may include with their measurement

        :param note: The note of this Measurement.
        :type: str
        """
        self._note = note

    @property
    def latitude(self):
        """
        Gets the latitude of this Measurement.
        Latitude at which the measurement was taken

        :return: The latitude of this Measurement.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Measurement.
        Latitude at which the measurement was taken

        :param latitude: The latitude of this Measurement.
        :type: float
        """
        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Measurement.
        Longitude at which the measurement was taken

        :return: The longitude of this Measurement.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Measurement.
        Longitude at which the measurement was taken

        :param longitude: The longitude of this Measurement.
        :type: float
        """
        self._longitude = longitude

    @property
    def location(self):
        """
        Gets the location of this Measurement.
        location

        :return: The location of this Measurement.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this Measurement.
        location

        :param location: The location of this Measurement.
        :type: str
        """
        self._location = location

    @property
    def created_at(self):
        """
        Gets the created_at of this Measurement.
        When the record was first created. Use ISO 8601 datetime format

        :return: The created_at of this Measurement.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Measurement.
        When the record was first created. Use ISO 8601 datetime format

        :param created_at: The created_at of this Measurement.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Measurement.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :return: The updated_at of this Measurement.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Measurement.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :param updated_at: The updated_at of this Measurement.
        :type: datetime
        """
        self._updated_at = updated_at

    @property
    def error(self):
        """
        Gets the error of this Measurement.
        error

        :return: The error of this Measurement.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this Measurement.
        error

        :param error: The error of this Measurement.
        :type: str
        """
        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

