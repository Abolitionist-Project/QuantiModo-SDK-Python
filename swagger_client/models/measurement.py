# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Measurement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Measurement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variable': 'str',
            'source': 'str',
            'timestamp': 'int',
            'start_time': 'str',
            'human_time': 'HumanTime',
            'value': 'float',
            'unit': 'str',
            'original_value': 'int',
            'stored_value': 'float',
            'stored_abbreviated_unit_name': 'str',
            'original_abbreviated_unit_name': 'str',
            'abbreviated_unit_name': 'str',
            'note': 'str'
        }

        self.attribute_map = {
            'variable': 'variable',
            'source': 'source',
            'timestamp': 'timestamp',
            'start_time': 'startTime',
            'human_time': 'humanTime',
            'value': 'value',
            'unit': 'unit',
            'original_value': 'originalValue',
            'stored_value': 'storedValue',
            'stored_abbreviated_unit_name': 'storedAbbreviatedUnitName',
            'original_abbreviated_unit_name': 'originalAbbreviatedUnitName',
            'abbreviated_unit_name': 'abbreviatedUnitName',
            'note': 'note'
        }

        self._variable = None
        self._source = None
        self._timestamp = None
        self._start_time = None
        self._human_time = None
        self._value = None
        self._unit = None
        self._original_value = None
        self._stored_value = None
        self._stored_abbreviated_unit_name = None
        self._original_abbreviated_unit_name = None
        self._abbreviated_unit_name = None
        self._note = None

    @property
    def variable(self):
        """
        Gets the variable of this Measurement.
        ORIGINAL Name of the variable for which we are creating the measurement records

        :return: The variable of this Measurement.
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """
        Sets the variable of this Measurement.
        ORIGINAL Name of the variable for which we are creating the measurement records

        :param variable: The variable of this Measurement.
        :type: str
        """
        self._variable = variable

    @property
    def source(self):
        """
        Gets the source of this Measurement.
        Application or device used to record the measurement values

        :return: The source of this Measurement.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Measurement.
        Application or device used to record the measurement values

        :param source: The source of this Measurement.
        :type: str
        """
        self._source = source

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Measurement.
        Timestamp for the measurement event in epoch time

        :return: The timestamp of this Measurement.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Measurement.
        Timestamp for the measurement event in epoch time

        :param timestamp: The timestamp of this Measurement.
        :type: int
        """
        self._timestamp = timestamp

    @property
    def start_time(self):
        """
        Gets the start_time of this Measurement.
        Start Time for the measurement event in ISO 8601

        :return: The start_time of this Measurement.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this Measurement.
        Start Time for the measurement event in ISO 8601

        :param start_time: The start_time of this Measurement.
        :type: str
        """
        self._start_time = start_time

    @property
    def human_time(self):
        """
        Gets the human_time of this Measurement.
        Start Time for the measurement event in ISO 8601

        :return: The human_time of this Measurement.
        :rtype: HumanTime
        """
        return self._human_time

    @human_time.setter
    def human_time(self, human_time):
        """
        Sets the human_time of this Measurement.
        Start Time for the measurement event in ISO 8601

        :param human_time: The human_time of this Measurement.
        :type: HumanTime
        """
        self._human_time = human_time

    @property
    def value(self):
        """
        Gets the value of this Measurement.
        Converted measurement value in requested unit

        :return: The value of this Measurement.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Measurement.
        Converted measurement value in requested unit

        :param value: The value of this Measurement.
        :type: float
        """
        self._value = value

    @property
    def unit(self):
        """
        Gets the unit of this Measurement.
        Unit of measurement as requested in GET request

        :return: The unit of this Measurement.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this Measurement.
        Unit of measurement as requested in GET request

        :param unit: The unit of this Measurement.
        :type: str
        """
        self._unit = unit

    @property
    def original_value(self):
        """
        Gets the original_value of this Measurement.
        Original value

        :return: The original_value of this Measurement.
        :rtype: int
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """
        Sets the original_value of this Measurement.
        Original value

        :param original_value: The original_value of this Measurement.
        :type: int
        """
        self._original_value = original_value

    @property
    def stored_value(self):
        """
        Gets the stored_value of this Measurement.
        Measurement value in the unit as orignally submitted

        :return: The stored_value of this Measurement.
        :rtype: float
        """
        return self._stored_value

    @stored_value.setter
    def stored_value(self, stored_value):
        """
        Sets the stored_value of this Measurement.
        Measurement value in the unit as orignally submitted

        :param stored_value: The stored_value of this Measurement.
        :type: float
        """
        self._stored_value = stored_value

    @property
    def stored_abbreviated_unit_name(self):
        """
        Gets the stored_abbreviated_unit_name of this Measurement.
        Unit of measurement as originally submitted

        :return: The stored_abbreviated_unit_name of this Measurement.
        :rtype: str
        """
        return self._stored_abbreviated_unit_name

    @stored_abbreviated_unit_name.setter
    def stored_abbreviated_unit_name(self, stored_abbreviated_unit_name):
        """
        Sets the stored_abbreviated_unit_name of this Measurement.
        Unit of measurement as originally submitted

        :param stored_abbreviated_unit_name: The stored_abbreviated_unit_name of this Measurement.
        :type: str
        """
        self._stored_abbreviated_unit_name = stored_abbreviated_unit_name

    @property
    def original_abbreviated_unit_name(self):
        """
        Gets the original_abbreviated_unit_name of this Measurement.
        Original Unit of measurement as originally submitted

        :return: The original_abbreviated_unit_name of this Measurement.
        :rtype: str
        """
        return self._original_abbreviated_unit_name

    @original_abbreviated_unit_name.setter
    def original_abbreviated_unit_name(self, original_abbreviated_unit_name):
        """
        Sets the original_abbreviated_unit_name of this Measurement.
        Original Unit of measurement as originally submitted

        :param original_abbreviated_unit_name: The original_abbreviated_unit_name of this Measurement.
        :type: str
        """
        self._original_abbreviated_unit_name = original_abbreviated_unit_name

    @property
    def abbreviated_unit_name(self):
        """
        Gets the abbreviated_unit_name of this Measurement.
        Unit of measurement as originally submitted

        :return: The abbreviated_unit_name of this Measurement.
        :rtype: str
        """
        return self._abbreviated_unit_name

    @abbreviated_unit_name.setter
    def abbreviated_unit_name(self, abbreviated_unit_name):
        """
        Sets the abbreviated_unit_name of this Measurement.
        Unit of measurement as originally submitted

        :param abbreviated_unit_name: The abbreviated_unit_name of this Measurement.
        :type: str
        """
        self._abbreviated_unit_name = abbreviated_unit_name

    @property
    def note(self):
        """
        Gets the note of this Measurement.
        Note of measurement

        :return: The note of this Measurement.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Measurement.
        Note of measurement

        :param note: The note of this Measurement.
        :type: str
        """
        self._note = note

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
