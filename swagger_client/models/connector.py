# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Connector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Connector - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'display_name': 'str',
            'image': 'str',
            'get_it_url': 'str',
            'short_description': 'str',
            'long_description': 'str',
            'enabled': 'bool',
            'oauth': 'bool',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'display_name': 'display_name',
            'image': 'image',
            'get_it_url': 'get_it_url',
            'short_description': 'short_description',
            'long_description': 'long_description',
            'enabled': 'enabled',
            'oauth': 'oauth',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._name = None
        self._display_name = None
        self._image = None
        self._get_it_url = None
        self._short_description = None
        self._long_description = None
        self._enabled = None
        self._oauth = None
        self._created_at = None
        self._updated_at = None

    @property
    def id(self):
        """
        Gets the id of this Connector.
        Connector ID number

        :return: The id of this Connector.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Connector.
        Connector ID number

        :param id: The id of this Connector.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Connector.
        Lowercase system name for the data source

        :return: The name of this Connector.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Connector.
        Lowercase system name for the data source

        :param name: The name of this Connector.
        :type: str
        """
        self._name = name

    @property
    def display_name(self):
        """
        Gets the display_name of this Connector.
        Pretty display name for the data source

        :return: The display_name of this Connector.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this Connector.
        Pretty display name for the data source

        :param display_name: The display_name of this Connector.
        :type: str
        """
        self._display_name = display_name

    @property
    def image(self):
        """
        Gets the image of this Connector.
        URL to the image of the connector logo

        :return: The image of this Connector.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Connector.
        URL to the image of the connector logo

        :param image: The image of this Connector.
        :type: str
        """
        self._image = image

    @property
    def get_it_url(self):
        """
        Gets the get_it_url of this Connector.
        URL to a site where one can get this device or application

        :return: The get_it_url of this Connector.
        :rtype: str
        """
        return self._get_it_url

    @get_it_url.setter
    def get_it_url(self, get_it_url):
        """
        Sets the get_it_url of this Connector.
        URL to a site where one can get this device or application

        :param get_it_url: The get_it_url of this Connector.
        :type: str
        """
        self._get_it_url = get_it_url

    @property
    def short_description(self):
        """
        Gets the short_description of this Connector.
        Short description of the service (such as the categories it tracks)

        :return: The short_description of this Connector.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this Connector.
        Short description of the service (such as the categories it tracks)

        :param short_description: The short_description of this Connector.
        :type: str
        """
        self._short_description = short_description

    @property
    def long_description(self):
        """
        Gets the long_description of this Connector.
        Longer paragraph description of the data provider

        :return: The long_description of this Connector.
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """
        Sets the long_description of this Connector.
        Longer paragraph description of the data provider

        :param long_description: The long_description of this Connector.
        :type: str
        """
        self._long_description = long_description

    @property
    def enabled(self):
        """
        Gets the enabled of this Connector.
        Set to 1 if the connector should be returned when listing connectors

        :return: The enabled of this Connector.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Connector.
        Set to 1 if the connector should be returned when listing connectors

        :param enabled: The enabled of this Connector.
        :type: bool
        """
        self._enabled = enabled

    @property
    def oauth(self):
        """
        Gets the oauth of this Connector.
        Set to 1 if the connector uses OAuth authentication as opposed to username/password

        :return: The oauth of this Connector.
        :rtype: bool
        """
        return self._oauth

    @oauth.setter
    def oauth(self, oauth):
        """
        Sets the oauth of this Connector.
        Set to 1 if the connector uses OAuth authentication as opposed to username/password

        :param oauth: The oauth of this Connector.
        :type: bool
        """
        self._oauth = oauth

    @property
    def created_at(self):
        """
        Gets the created_at of this Connector.
        When the record was first created. Use ISO 8601 datetime format

        :return: The created_at of this Connector.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Connector.
        When the record was first created. Use ISO 8601 datetime format

        :param created_at: The created_at of this Connector.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Connector.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :return: The updated_at of this Connector.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Connector.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :param updated_at: The updated_at of this Connector.
        :type: datetime
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

