#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from pprint import pformat
from six import iteritems


class Connector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'display_name': 'str',
            'image': 'str',
            'get_it_url': 'str',
            'connected': 'str',
            'connect_instructions': 'str',
            'last_update': 'int',
            'latest_data': 'int',
            'no_data_yet': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'display_name': 'displayName',
            'image': 'image',
            'get_it_url': 'getItUrl',
            'connected': 'connected',
            'connect_instructions': 'connectInstructions',
            'last_update': 'lastUpdate',
            'latest_data': 'latestData',
            'no_data_yet': 'noDataYet'
        }

        self._id = None    # Connector ID number
        self._name = None    # Connector lowercase system name
        self._display_name = None    # Connector pretty display name
        self._image = None    # URL to the image of the connector logo
        self._get_it_url = None    # URL to a site where one can get this device or application
        self._connected = None    # True if the authenticated user has this connector enabled
        self._connect_instructions = None    # URL and parameters used when connecting to a service
        self._last_update = None    # Epoch timestamp of last sync
        self._latest_data = None    # Number of measurements obtained during latest update
        self._no_data_yet = None    # True if user has no measurements for this connector

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, id):
        self._id = id

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def display_name(self):
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        self._display_name = display_name

    @property
    def image(self):
        return self._image

    @image.setter
    def image(self, image):
        self._image = image

    @property
    def get_it_url(self):
        return self._get_it_url

    @get_it_url.setter
    def get_it_url(self, get_it_url):
        self._get_it_url = get_it_url

    @property
    def connected(self):
        return self._connected

    @connected.setter
    def connected(self, connected):
        self._connected = connected

    @property
    def connect_instructions(self):
        return self._connect_instructions

    @connect_instructions.setter
    def connect_instructions(self, connect_instructions):
        self._connect_instructions = connect_instructions

    @property
    def last_update(self):
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        self._last_update = last_update

    @property
    def latest_data(self):
        return self._latest_data

    @latest_data.setter
    def latest_data(self, latest_data):
        self._latest_data = latest_data

    @property
    def no_data_yet(self):
        return self._no_data_yet

    @no_data_yet.setter
    def no_data_yet(self, no_data_yet):
        self._no_data_yet = no_data_yet

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for name, prop in iteritems(self.__dict__):
            if name == "attribute_map" or name == "swagger_types":
                continue
            if isinstance(prop, list):
                result[name[1:]] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    prop
                ))
            elif hasattr(prop, "to_dict"):
                result[name[1:]] = prop.to_dict()
            else:
                result[name[1:]] = prop

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
