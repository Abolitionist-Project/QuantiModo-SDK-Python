# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UserVariables(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UserVariables - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user': 'int',
            'variable': 'str',
            'duration_of_action': 'int',
            'filling_value': 'int',
            'join_with': 'str',
            'maximum_value': 'float',
            'minimum_value': 'float',
            'name': 'str',
            'onset_delay': 'int',
            'unit': 'str'
        }

        self.attribute_map = {
            'user': 'user',
            'variable': 'variable',
            'duration_of_action': 'durationOfAction',
            'filling_value': 'fillingValue',
            'join_with': 'joinWith',
            'maximum_value': 'maximumValue',
            'minimum_value': 'minimumValue',
            'name': 'name',
            'onset_delay': 'onsetDelay',
            'unit': 'unit'
        }

        self._user = None
        self._variable = None
        self._duration_of_action = None
        self._filling_value = None
        self._join_with = None
        self._maximum_value = None
        self._minimum_value = None
        self._name = None
        self._onset_delay = None
        self._unit = None

    @property
    def user(self):
        """
        Gets the user of this UserVariables.
        User ID

        :return: The user of this UserVariables.
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this UserVariables.
        User ID

        :param user: The user of this UserVariables.
        :type: int
        """
        self._user = user

    @property
    def variable(self):
        """
        Gets the variable of this UserVariables.
        Variable DISPLAY name

        :return: The variable of this UserVariables.
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """
        Sets the variable of this UserVariables.
        Variable DISPLAY name

        :param variable: The variable of this UserVariables.
        :type: str
        """
        self._variable = variable

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this UserVariables.
        Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect

        :return: The duration_of_action of this UserVariables.
        :rtype: int
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this UserVariables.
        Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect

        :param duration_of_action: The duration_of_action of this UserVariables.
        :type: int
        """
        self._duration_of_action = duration_of_action

    @property
    def filling_value(self):
        """
        Gets the filling_value of this UserVariables.
        fillingValue

        :return: The filling_value of this UserVariables.
        :rtype: int
        """
        return self._filling_value

    @filling_value.setter
    def filling_value(self, filling_value):
        """
        Sets the filling_value of this UserVariables.
        fillingValue

        :param filling_value: The filling_value of this UserVariables.
        :type: int
        """
        self._filling_value = filling_value

    @property
    def join_with(self):
        """
        Gets the join_with of this UserVariables.
        joinWith

        :return: The join_with of this UserVariables.
        :rtype: str
        """
        return self._join_with

    @join_with.setter
    def join_with(self, join_with):
        """
        Sets the join_with of this UserVariables.
        joinWith

        :param join_with: The join_with of this UserVariables.
        :type: str
        """
        self._join_with = join_with

    @property
    def maximum_value(self):
        """
        Gets the maximum_value of this UserVariables.
        maximumValue

        :return: The maximum_value of this UserVariables.
        :rtype: float
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """
        Sets the maximum_value of this UserVariables.
        maximumValue

        :param maximum_value: The maximum_value of this UserVariables.
        :type: float
        """
        self._maximum_value = maximum_value

    @property
    def minimum_value(self):
        """
        Gets the minimum_value of this UserVariables.
        minimumValue

        :return: The minimum_value of this UserVariables.
        :rtype: float
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        """
        Sets the minimum_value of this UserVariables.
        minimumValue

        :param minimum_value: The minimum_value of this UserVariables.
        :type: float
        """
        self._minimum_value = minimum_value

    @property
    def name(self):
        """
        Gets the name of this UserVariables.
        name

        :return: The name of this UserVariables.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this UserVariables.
        name

        :param name: The name of this UserVariables.
        :type: str
        """
        self._name = name

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this UserVariables.
        onsetDelay

        :return: The onset_delay of this UserVariables.
        :rtype: int
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this UserVariables.
        onsetDelay

        :param onset_delay: The onset_delay of this UserVariables.
        :type: int
        """
        self._onset_delay = onset_delay

    @property
    def unit(self):
        """
        Gets the unit of this UserVariables.
        unit

        :return: The unit of this UserVariables.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this UserVariables.
        unit

        :param unit: The unit of this UserVariables.
        :type: str
        """
        self._unit = unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
