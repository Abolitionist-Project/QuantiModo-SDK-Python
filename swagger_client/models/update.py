# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Update(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Update - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'user_id': 'int',
            'connector_id': 'int',
            'number_of_measurements': 'int',
            'success': 'bool',
            'message': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'connector_id': 'connector_id',
            'number_of_measurements': 'number_of_measurements',
            'success': 'success',
            'message': 'message',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._user_id = None
        self._connector_id = None
        self._number_of_measurements = None
        self._success = None
        self._message = None
        self._created_at = None
        self._updated_at = None

    @property
    def id(self):
        """
        Gets the id of this Update.
        id

        :return: The id of this Update.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Update.
        id

        :param id: The id of this Update.
        :type: int
        """
        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this Update.
        user_id

        :return: The user_id of this Update.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Update.
        user_id

        :param user_id: The user_id of this Update.
        :type: int
        """
        self._user_id = user_id

    @property
    def connector_id(self):
        """
        Gets the connector_id of this Update.
        connector_id

        :return: The connector_id of this Update.
        :rtype: int
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """
        Sets the connector_id of this Update.
        connector_id

        :param connector_id: The connector_id of this Update.
        :type: int
        """
        self._connector_id = connector_id

    @property
    def number_of_measurements(self):
        """
        Gets the number_of_measurements of this Update.
        number_of_measurements

        :return: The number_of_measurements of this Update.
        :rtype: int
        """
        return self._number_of_measurements

    @number_of_measurements.setter
    def number_of_measurements(self, number_of_measurements):
        """
        Sets the number_of_measurements of this Update.
        number_of_measurements

        :param number_of_measurements: The number_of_measurements of this Update.
        :type: int
        """
        self._number_of_measurements = number_of_measurements

    @property
    def success(self):
        """
        Gets the success of this Update.
        success

        :return: The success of this Update.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this Update.
        success

        :param success: The success of this Update.
        :type: bool
        """
        self._success = success

    @property
    def message(self):
        """
        Gets the message of this Update.
        message

        :return: The message of this Update.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this Update.
        message

        :param message: The message of this Update.
        :type: str
        """
        self._message = message

    @property
    def created_at(self):
        """
        Gets the created_at of this Update.
        When the record was first created. Use ISO 8601 datetime format

        :return: The created_at of this Update.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Update.
        When the record was first created. Use ISO 8601 datetime format

        :param created_at: The created_at of this Update.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Update.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :return: The updated_at of this Update.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Update.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :param updated_at: The updated_at of this Update.
        :type: datetime
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

