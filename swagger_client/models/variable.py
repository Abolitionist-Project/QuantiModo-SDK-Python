#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from pprint import pformat
from six import iteritems


class Variable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'original_name': 'str',
            'category': 'str',
            'unit': 'str',
            'sources': 'str',
            'minimum_value': 'float',
            'maximum_value': 'float',
            'combination_operation': 'str',
            'filling_value': 'float',
            'join_with': 'str',
            'joined_variables': 'list[Variable]',
            'parent': 'int',
            'sub_variables': 'list[Variable]',
            'onset_delay': 'int',
            'duration_of_action': 'int',
            'earliest_measurement_time': 'int',
            'latest_measurement_time': 'int',
            'updated': 'int',
            'cause_only': 'int',
            'number_of_correlations': 'int',
            'outcome': 'int',
            'measurements_at_last_analysis': 'int',
            'number_of_measurements': 'int',
            'last_unit': 'int',
            'last_value': 'int',
            'most_common_value': 'int',
            'most_common_unit': 'int',
            'last_source': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'original_name': 'originalName',
            'category': 'category',
            'unit': 'unit',
            'sources': 'sources',
            'minimum_value': 'minimumValue',
            'maximum_value': 'maximumValue',
            'combination_operation': 'combinationOperation',
            'filling_value': 'fillingValue',
            'join_with': 'joinWith',
            'joined_variables': 'joinedVariables',
            'parent': 'parent',
            'sub_variables': 'subVariables',
            'onset_delay': 'onsetDelay',
            'duration_of_action': 'durationOfAction',
            'earliest_measurement_time': 'earliestMeasurementTime',
            'latest_measurement_time': 'latestMeasurementTime',
            'updated': 'updated',
            'cause_only': 'causeOnly',
            'number_of_correlations': 'numberOfCorrelations',
            'outcome': 'outcome',
            'measurements_at_last_analysis': 'measurementsAtLastAnalysis',
            'number_of_measurements': 'numberOfMeasurements',
            'last_unit': 'lastUnit',
            'last_value': 'lastValue',
            'most_common_value': 'mostCommonValue',
            'most_common_unit': 'mostCommonUnit',
            'last_source': 'lastSource'
        }

        self._id = None    # Variable ID
        self._name = None    # User-defined variable display name.
        self._original_name = None    # Name used when the variable was originally created in the `variables` table.
        self._category = None    # Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
        self._unit = None    # Abbreviated name of the default unit for the variable
        self._sources = None    # Comma-separated list of source names to limit variables to those sources
        self._minimum_value = None    # Minimum reasonable value for this variable (uses default unit)
        self._maximum_value = None    # Maximum reasonable value for this variable (uses default unit)
        self._combination_operation = None    # How to aggregate measurements over time.
        self._filling_value = None    # Value for replacing null measurements
        self._join_with = None    # The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.
        self._joined_variables = None    # Array of Variables that are joined with this Variable
        self._parent = None    # Id of the parent variable if this variable has any parent
        self._sub_variables = None    # Array of Variables that are sub variables to this Variable
        self._onset_delay = None    # How long it takes for a measurement in this variable to take effect
        self._duration_of_action = None    # How long the effect of a measurement in this variable lasts
        self._earliest_measurement_time = None    # Earliest measurement time
        self._latest_measurement_time = None    # Latest measurement time
        self._updated = None    # When this variable or its settings were last updated
        self._cause_only = None    # A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.
        self._number_of_correlations = None    # Number of correlations
        self._outcome = None    # Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.
        self._measurements_at_last_analysis = None    # The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the measurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there&#39;s not enough new data to make a significant difference in the correlation.
        self._number_of_measurements = None    # Number of measurements
        self._last_unit = None    # Last unit
        self._last_value = None    # Last value
        self._most_common_value = None    # Most common value
        self._most_common_unit = None    # Most common unit
        self._last_source = None    # Last source

    @property
    def id(self):
        return self._id

    @id.setter
    def id(self, id):
        self._id = id

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def original_name(self):
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        self._original_name = original_name

    @property
    def category(self):
        return self._category

    @category.setter
    def category(self, category):
        self._category = category

    @property
    def unit(self):
        return self._unit

    @unit.setter
    def unit(self, unit):
        self._unit = unit

    @property
    def sources(self):
        return self._sources

    @sources.setter
    def sources(self, sources):
        self._sources = sources

    @property
    def minimum_value(self):
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        self._minimum_value = minimum_value

    @property
    def maximum_value(self):
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        self._maximum_value = maximum_value

    @property
    def combination_operation(self):
        return self._combination_operation

    @combination_operation.setter
    def combination_operation(self, combination_operation):
        allowed_values = ["MEAN", "SUM"]
        if combination_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `combination_operation`, must be one of {0}"
                .format(allowed_values)
            )
        self._combination_operation = combination_operation

    @property
    def filling_value(self):
        return self._filling_value

    @filling_value.setter
    def filling_value(self, filling_value):
        self._filling_value = filling_value

    @property
    def join_with(self):
        return self._join_with

    @join_with.setter
    def join_with(self, join_with):
        self._join_with = join_with

    @property
    def joined_variables(self):
        return self._joined_variables

    @joined_variables.setter
    def joined_variables(self, joined_variables):
        self._joined_variables = joined_variables

    @property
    def parent(self):
        return self._parent

    @parent.setter
    def parent(self, parent):
        self._parent = parent

    @property
    def sub_variables(self):
        return self._sub_variables

    @sub_variables.setter
    def sub_variables(self, sub_variables):
        self._sub_variables = sub_variables

    @property
    def onset_delay(self):
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        self._onset_delay = onset_delay

    @property
    def duration_of_action(self):
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        self._duration_of_action = duration_of_action

    @property
    def earliest_measurement_time(self):
        return self._earliest_measurement_time

    @earliest_measurement_time.setter
    def earliest_measurement_time(self, earliest_measurement_time):
        self._earliest_measurement_time = earliest_measurement_time

    @property
    def latest_measurement_time(self):
        return self._latest_measurement_time

    @latest_measurement_time.setter
    def latest_measurement_time(self, latest_measurement_time):
        self._latest_measurement_time = latest_measurement_time

    @property
    def updated(self):
        return self._updated

    @updated.setter
    def updated(self, updated):
        self._updated = updated

    @property
    def cause_only(self):
        return self._cause_only

    @cause_only.setter
    def cause_only(self, cause_only):
        self._cause_only = cause_only

    @property
    def number_of_correlations(self):
        return self._number_of_correlations

    @number_of_correlations.setter
    def number_of_correlations(self, number_of_correlations):
        self._number_of_correlations = number_of_correlations

    @property
    def outcome(self):
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        self._outcome = outcome

    @property
    def measurements_at_last_analysis(self):
        return self._measurements_at_last_analysis

    @measurements_at_last_analysis.setter
    def measurements_at_last_analysis(self, measurements_at_last_analysis):
        self._measurements_at_last_analysis = measurements_at_last_analysis

    @property
    def number_of_measurements(self):
        return self._number_of_measurements

    @number_of_measurements.setter
    def number_of_measurements(self, number_of_measurements):
        self._number_of_measurements = number_of_measurements

    @property
    def last_unit(self):
        return self._last_unit

    @last_unit.setter
    def last_unit(self, last_unit):
        self._last_unit = last_unit

    @property
    def last_value(self):
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        self._last_value = last_value

    @property
    def most_common_value(self):
        return self._most_common_value

    @most_common_value.setter
    def most_common_value(self, most_common_value):
        self._most_common_value = most_common_value

    @property
    def most_common_unit(self):
        return self._most_common_unit

    @most_common_unit.setter
    def most_common_unit(self, most_common_unit):
        self._most_common_unit = most_common_unit

    @property
    def last_source(self):
        return self._last_source

    @last_source.setter
    def last_source(self, last_source):
        self._last_source = last_source

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for name, prop in iteritems(self.__dict__):
            if name == "attribute_map" or name == "swagger_types":
                continue
            if isinstance(prop, list):
                result[name[1:]] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    prop
                ))
            elif hasattr(prop, "to_dict"):
                result[name[1:]] = prop.to_dict()
            else:
                result[name[1:]] = prop

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
