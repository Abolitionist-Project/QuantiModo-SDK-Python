# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Variable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Variable - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'client_id': 'str',
            'parent_id': 'int',
            'name': 'str',
            'variable_category_id': 'int',
            'default_unit_id': 'int',
            'combination_operation': 'str',
            'filling_value': 'float',
            'maximum_allowed_value': 'float',
            'minimum_allowed_value': 'float',
            'onset_delay': 'int',
            'duration_of_action': 'int',
            'public': 'int',
            'cause_only': 'bool',
            'most_common_value': 'float',
            'most_common_unit_id': 'int',
            'standard_deviation': 'float',
            'variance': 'float',
            'mean': 'float',
            'median': 'float',
            'number_of_measurements': 'float',
            'number_of_unique_values': 'float',
            'skewness': 'float',
            'kurtosis': 'float',
            'status': 'str',
            'error_message': 'str',
            'last_successful_update_time': 'datetime',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'product_url': 'str',
            'image_url': 'str',
            'price': 'float',
            'number_of_user_variables': 'int',
            'outcome': 'bool',
            'minimum_recorded_value': 'float',
            'maximum_recorded_value': 'float'
        }

        self.attribute_map = {
            'id': 'id',
            'client_id': 'client_id',
            'parent_id': 'parent_id',
            'name': 'name',
            'variable_category_id': 'variable_category_id',
            'default_unit_id': 'default_unit_id',
            'combination_operation': 'combination_operation',
            'filling_value': 'filling_value',
            'maximum_allowed_value': 'maximum_allowed_value',
            'minimum_allowed_value': 'minimum_allowed_value',
            'onset_delay': 'onset_delay',
            'duration_of_action': 'duration_of_action',
            'public': 'public',
            'cause_only': 'cause_only',
            'most_common_value': 'most_common_value',
            'most_common_unit_id': 'most_common_unit_id',
            'standard_deviation': 'standard_deviation',
            'variance': 'variance',
            'mean': 'mean',
            'median': 'median',
            'number_of_measurements': 'number_of_measurements',
            'number_of_unique_values': 'number_of_unique_values',
            'skewness': 'skewness',
            'kurtosis': 'kurtosis',
            'status': 'status',
            'error_message': 'error_message',
            'last_successful_update_time': 'last_successful_update_time',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'product_url': 'product_url',
            'image_url': 'image_url',
            'price': 'price',
            'number_of_user_variables': 'number_of_user_variables',
            'outcome': 'outcome',
            'minimum_recorded_value': 'minimum_recorded_value',
            'maximum_recorded_value': 'maximum_recorded_value'
        }

        self._id = None
        self._client_id = None
        self._parent_id = None
        self._name = None
        self._variable_category_id = None
        self._default_unit_id = None
        self._combination_operation = None
        self._filling_value = None
        self._maximum_allowed_value = None
        self._minimum_allowed_value = None
        self._onset_delay = None
        self._duration_of_action = None
        self._public = None
        self._cause_only = None
        self._most_common_value = None
        self._most_common_unit_id = None
        self._standard_deviation = None
        self._variance = None
        self._mean = None
        self._median = None
        self._number_of_measurements = None
        self._number_of_unique_values = None
        self._skewness = None
        self._kurtosis = None
        self._status = None
        self._error_message = None
        self._last_successful_update_time = None
        self._created_at = None
        self._updated_at = None
        self._product_url = None
        self._image_url = None
        self._price = None
        self._number_of_user_variables = None
        self._outcome = None
        self._minimum_recorded_value = None
        self._maximum_recorded_value = None

    @property
    def id(self):
        """
        Gets the id of this Variable.
        id

        :return: The id of this Variable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Variable.
        id

        :param id: The id of this Variable.
        :type: int
        """
        self._id = id

    @property
    def client_id(self):
        """
        Gets the client_id of this Variable.
        client_id

        :return: The client_id of this Variable.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Variable.
        client_id

        :param client_id: The client_id of this Variable.
        :type: str
        """
        self._client_id = client_id

    @property
    def parent_id(self):
        """
        Gets the parent_id of this Variable.
        ID of the parent variable if this variable has any parent

        :return: The parent_id of this Variable.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this Variable.
        ID of the parent variable if this variable has any parent

        :param parent_id: The parent_id of this Variable.
        :type: int
        """
        self._parent_id = parent_id

    @property
    def name(self):
        """
        Gets the name of this Variable.
        User-defined variable display name

        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Variable.
        User-defined variable display name

        :param name: The name of this Variable.
        :type: str
        """
        self._name = name

    @property
    def variable_category_id(self):
        """
        Gets the variable_category_id of this Variable.
        Variable category ID

        :return: The variable_category_id of this Variable.
        :rtype: int
        """
        return self._variable_category_id

    @variable_category_id.setter
    def variable_category_id(self, variable_category_id):
        """
        Sets the variable_category_id of this Variable.
        Variable category ID

        :param variable_category_id: The variable_category_id of this Variable.
        :type: int
        """
        self._variable_category_id = variable_category_id

    @property
    def default_unit_id(self):
        """
        Gets the default_unit_id of this Variable.
        ID of the default unit of measurement to use for this variable

        :return: The default_unit_id of this Variable.
        :rtype: int
        """
        return self._default_unit_id

    @default_unit_id.setter
    def default_unit_id(self, default_unit_id):
        """
        Sets the default_unit_id of this Variable.
        ID of the default unit of measurement to use for this variable

        :param default_unit_id: The default_unit_id of this Variable.
        :type: int
        """
        self._default_unit_id = default_unit_id

    @property
    def combination_operation(self):
        """
        Gets the combination_operation of this Variable.
        How to combine values of this variable (for instance, to see a summary of the values over a month) SUM or MEAN

        :return: The combination_operation of this Variable.
        :rtype: str
        """
        return self._combination_operation

    @combination_operation.setter
    def combination_operation(self, combination_operation):
        """
        Sets the combination_operation of this Variable.
        How to combine values of this variable (for instance, to see a summary of the values over a month) SUM or MEAN

        :param combination_operation: The combination_operation of this Variable.
        :type: str
        """
        self._combination_operation = combination_operation

    @property
    def filling_value(self):
        """
        Gets the filling_value of this Variable.
        Value for replacing null measurements

        :return: The filling_value of this Variable.
        :rtype: float
        """
        return self._filling_value

    @filling_value.setter
    def filling_value(self, filling_value):
        """
        Sets the filling_value of this Variable.
        Value for replacing null measurements

        :param filling_value: The filling_value of this Variable.
        :type: float
        """
        self._filling_value = filling_value

    @property
    def maximum_allowed_value(self):
        """
        Gets the maximum_allowed_value of this Variable.
        Maximum reasonable value for this variable (uses default unit)

        :return: The maximum_allowed_value of this Variable.
        :rtype: float
        """
        return self._maximum_allowed_value

    @maximum_allowed_value.setter
    def maximum_allowed_value(self, maximum_allowed_value):
        """
        Sets the maximum_allowed_value of this Variable.
        Maximum reasonable value for this variable (uses default unit)

        :param maximum_allowed_value: The maximum_allowed_value of this Variable.
        :type: float
        """
        self._maximum_allowed_value = maximum_allowed_value

    @property
    def minimum_allowed_value(self):
        """
        Gets the minimum_allowed_value of this Variable.
        Minimum reasonable value for this variable (uses default unit)

        :return: The minimum_allowed_value of this Variable.
        :rtype: float
        """
        return self._minimum_allowed_value

    @minimum_allowed_value.setter
    def minimum_allowed_value(self, minimum_allowed_value):
        """
        Sets the minimum_allowed_value of this Variable.
        Minimum reasonable value for this variable (uses default unit)

        :param minimum_allowed_value: The minimum_allowed_value of this Variable.
        :type: float
        """
        self._minimum_allowed_value = minimum_allowed_value

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this Variable.
        How long it takes for a measurement in this variable to take effect

        :return: The onset_delay of this Variable.
        :rtype: int
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this Variable.
        How long it takes for a measurement in this variable to take effect

        :param onset_delay: The onset_delay of this Variable.
        :type: int
        """
        self._onset_delay = onset_delay

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this Variable.
        How long the effect of a measurement in this variable lasts

        :return: The duration_of_action of this Variable.
        :rtype: int
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this Variable.
        How long the effect of a measurement in this variable lasts

        :param duration_of_action: The duration_of_action of this Variable.
        :type: int
        """
        self._duration_of_action = duration_of_action

    @property
    def public(self):
        """
        Gets the public of this Variable.
        Is variable public

        :return: The public of this Variable.
        :rtype: int
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this Variable.
        Is variable public

        :param public: The public of this Variable.
        :type: int
        """
        self._public = public

    @property
    def cause_only(self):
        """
        Gets the cause_only of this Variable.
        A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user

        :return: The cause_only of this Variable.
        :rtype: bool
        """
        return self._cause_only

    @cause_only.setter
    def cause_only(self, cause_only):
        """
        Sets the cause_only of this Variable.
        A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user

        :param cause_only: The cause_only of this Variable.
        :type: bool
        """
        self._cause_only = cause_only

    @property
    def most_common_value(self):
        """
        Gets the most_common_value of this Variable.
        Most common value

        :return: The most_common_value of this Variable.
        :rtype: float
        """
        return self._most_common_value

    @most_common_value.setter
    def most_common_value(self, most_common_value):
        """
        Sets the most_common_value of this Variable.
        Most common value

        :param most_common_value: The most_common_value of this Variable.
        :type: float
        """
        self._most_common_value = most_common_value

    @property
    def most_common_unit_id(self):
        """
        Gets the most_common_unit_id of this Variable.
        Most common Unit

        :return: The most_common_unit_id of this Variable.
        :rtype: int
        """
        return self._most_common_unit_id

    @most_common_unit_id.setter
    def most_common_unit_id(self, most_common_unit_id):
        """
        Sets the most_common_unit_id of this Variable.
        Most common Unit

        :param most_common_unit_id: The most_common_unit_id of this Variable.
        :type: int
        """
        self._most_common_unit_id = most_common_unit_id

    @property
    def standard_deviation(self):
        """
        Gets the standard_deviation of this Variable.
        Standard Deviation

        :return: The standard_deviation of this Variable.
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """
        Sets the standard_deviation of this Variable.
        Standard Deviation

        :param standard_deviation: The standard_deviation of this Variable.
        :type: float
        """
        self._standard_deviation = standard_deviation

    @property
    def variance(self):
        """
        Gets the variance of this Variable.
        Variance

        :return: The variance of this Variable.
        :rtype: float
        """
        return self._variance

    @variance.setter
    def variance(self, variance):
        """
        Sets the variance of this Variable.
        Variance

        :param variance: The variance of this Variable.
        :type: float
        """
        self._variance = variance

    @property
    def mean(self):
        """
        Gets the mean of this Variable.
        Mean

        :return: The mean of this Variable.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """
        Sets the mean of this Variable.
        Mean

        :param mean: The mean of this Variable.
        :type: float
        """
        self._mean = mean

    @property
    def median(self):
        """
        Gets the median of this Variable.
        Median

        :return: The median of this Variable.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """
        Sets the median of this Variable.
        Median

        :param median: The median of this Variable.
        :type: float
        """
        self._median = median

    @property
    def number_of_measurements(self):
        """
        Gets the number_of_measurements of this Variable.
        Number of measurements

        :return: The number_of_measurements of this Variable.
        :rtype: float
        """
        return self._number_of_measurements

    @number_of_measurements.setter
    def number_of_measurements(self, number_of_measurements):
        """
        Sets the number_of_measurements of this Variable.
        Number of measurements

        :param number_of_measurements: The number_of_measurements of this Variable.
        :type: float
        """
        self._number_of_measurements = number_of_measurements

    @property
    def number_of_unique_values(self):
        """
        Gets the number_of_unique_values of this Variable.
        Number of unique values

        :return: The number_of_unique_values of this Variable.
        :rtype: float
        """
        return self._number_of_unique_values

    @number_of_unique_values.setter
    def number_of_unique_values(self, number_of_unique_values):
        """
        Sets the number_of_unique_values of this Variable.
        Number of unique values

        :param number_of_unique_values: The number_of_unique_values of this Variable.
        :type: float
        """
        self._number_of_unique_values = number_of_unique_values

    @property
    def skewness(self):
        """
        Gets the skewness of this Variable.
        Skewness

        :return: The skewness of this Variable.
        :rtype: float
        """
        return self._skewness

    @skewness.setter
    def skewness(self, skewness):
        """
        Sets the skewness of this Variable.
        Skewness

        :param skewness: The skewness of this Variable.
        :type: float
        """
        self._skewness = skewness

    @property
    def kurtosis(self):
        """
        Gets the kurtosis of this Variable.
        Kurtosis

        :return: The kurtosis of this Variable.
        :rtype: float
        """
        return self._kurtosis

    @kurtosis.setter
    def kurtosis(self, kurtosis):
        """
        Sets the kurtosis of this Variable.
        Kurtosis

        :param kurtosis: The kurtosis of this Variable.
        :type: float
        """
        self._kurtosis = kurtosis

    @property
    def status(self):
        """
        Gets the status of this Variable.
        status

        :return: The status of this Variable.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Variable.
        status

        :param status: The status of this Variable.
        :type: str
        """
        self._status = status

    @property
    def error_message(self):
        """
        Gets the error_message of this Variable.
        error_message

        :return: The error_message of this Variable.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this Variable.
        error_message

        :param error_message: The error_message of this Variable.
        :type: str
        """
        self._error_message = error_message

    @property
    def last_successful_update_time(self):
        """
        Gets the last_successful_update_time of this Variable.
        When this variable or its settings were last updated

        :return: The last_successful_update_time of this Variable.
        :rtype: datetime
        """
        return self._last_successful_update_time

    @last_successful_update_time.setter
    def last_successful_update_time(self, last_successful_update_time):
        """
        Sets the last_successful_update_time of this Variable.
        When this variable or its settings were last updated

        :param last_successful_update_time: The last_successful_update_time of this Variable.
        :type: datetime
        """
        self._last_successful_update_time = last_successful_update_time

    @property
    def created_at(self):
        """
        Gets the created_at of this Variable.
        When the record was first created. Use ISO 8601 datetime format

        :return: The created_at of this Variable.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Variable.
        When the record was first created. Use ISO 8601 datetime format

        :param created_at: The created_at of this Variable.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Variable.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :return: The updated_at of this Variable.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Variable.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :param updated_at: The updated_at of this Variable.
        :type: datetime
        """
        self._updated_at = updated_at

    @property
    def product_url(self):
        """
        Gets the product_url of this Variable.
        Product URL

        :return: The product_url of this Variable.
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """
        Sets the product_url of this Variable.
        Product URL

        :param product_url: The product_url of this Variable.
        :type: str
        """
        self._product_url = product_url

    @property
    def image_url(self):
        """
        Gets the image_url of this Variable.
        Image URL

        :return: The image_url of this Variable.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this Variable.
        Image URL

        :param image_url: The image_url of this Variable.
        :type: str
        """
        self._image_url = image_url

    @property
    def price(self):
        """
        Gets the price of this Variable.
        Price

        :return: The price of this Variable.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this Variable.
        Price

        :param price: The price of this Variable.
        :type: float
        """
        self._price = price

    @property
    def number_of_user_variables(self):
        """
        Gets the number_of_user_variables of this Variable.
        Number of variables

        :return: The number_of_user_variables of this Variable.
        :rtype: int
        """
        return self._number_of_user_variables

    @number_of_user_variables.setter
    def number_of_user_variables(self, number_of_user_variables):
        """
        Sets the number_of_user_variables of this Variable.
        Number of variables

        :param number_of_user_variables: The number_of_user_variables of this Variable.
        :type: int
        """
        self._number_of_user_variables = number_of_user_variables

    @property
    def outcome(self):
        """
        Gets the outcome of this Variable.
        Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.

        :return: The outcome of this Variable.
        :rtype: bool
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """
        Sets the outcome of this Variable.
        Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.

        :param outcome: The outcome of this Variable.
        :type: bool
        """
        self._outcome = outcome

    @property
    def minimum_recorded_value(self):
        """
        Gets the minimum_recorded_value of this Variable.
        Minimum recorded value of this variable

        :return: The minimum_recorded_value of this Variable.
        :rtype: float
        """
        return self._minimum_recorded_value

    @minimum_recorded_value.setter
    def minimum_recorded_value(self, minimum_recorded_value):
        """
        Sets the minimum_recorded_value of this Variable.
        Minimum recorded value of this variable

        :param minimum_recorded_value: The minimum_recorded_value of this Variable.
        :type: float
        """
        self._minimum_recorded_value = minimum_recorded_value

    @property
    def maximum_recorded_value(self):
        """
        Gets the maximum_recorded_value of this Variable.
        Maximum recorded value of this variable

        :return: The maximum_recorded_value of this Variable.
        :rtype: float
        """
        return self._maximum_recorded_value

    @maximum_recorded_value.setter
    def maximum_recorded_value(self, maximum_recorded_value):
        """
        Sets the maximum_recorded_value of this Variable.
        Maximum recorded value of this variable

        :param maximum_recorded_value: The maximum_recorded_value of this Variable.
        :type: float
        """
        self._maximum_recorded_value = maximum_recorded_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

