#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from pprint import pformat
from six import iteritems


class Unit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'abbreviated_name': 'str',
            'category': 'str',
            'minimum': 'float',
            'maximum': 'float',
            'conversion_steps': 'list[ConversionStep]'
        }

        self.attribute_map = {
            'name': 'name',
            'abbreviated_name': 'abbreviatedName',
            'category': 'category',
            'minimum': 'minimum',
            'maximum': 'maximum',
            'conversion_steps': 'conversionSteps'
        }

        self._name = None    # Unit name
        self._abbreviated_name = None    # Unit abbreviation
        self._category = None    # Unit category
        self._minimum = None    # Unit minimum value
        self._maximum = None    # Unit maximum value
        self._conversion_steps = None    # Conversion steps list

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def abbreviated_name(self):
        return self._abbreviated_name

    @abbreviated_name.setter
    def abbreviated_name(self, abbreviated_name):
        self._abbreviated_name = abbreviated_name

    @property
    def category(self):
        return self._category

    @category.setter
    def category(self, category):
        allowed_values = ["Distance", "Duration", "Energy", "Frequency", "Miscellany", "Pressure", "Proportion", "Rating", "Temperature", "Volume", "Weight"]
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category`, must be one of {0}"
                .format(allowed_values)
            )
        self._category = category

    @property
    def minimum(self):
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        self._minimum = minimum

    @property
    def maximum(self):
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        self._maximum = maximum

    @property
    def conversion_steps(self):
        return self._conversion_steps

    @conversion_steps.setter
    def conversion_steps(self, conversion_steps):
        self._conversion_steps = conversion_steps

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for name, prop in iteritems(self.__dict__):
            if name == "attribute_map" or name == "swagger_types":
                continue
            if isinstance(prop, list):
                result[name[1:]] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    prop
                ))
            elif hasattr(prop, "to_dict"):
                result[name[1:]] = prop.to_dict()
            else:
                result[name[1:]] = prop

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
