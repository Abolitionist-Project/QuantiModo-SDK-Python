# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Unit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Unit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'client_id': 'str',
            'name': 'str',
            'abbreviated_name': 'str',
            'category_id': 'int',
            'minimum_value': 'float',
            'maximum_value': 'float',
            'updated': 'int',
            'default_unit_id': 'int',
            'multiply': 'float',
            'add': 'float',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'client_id': 'client_id',
            'name': 'name',
            'abbreviated_name': 'abbreviated_name',
            'category_id': 'category_id',
            'minimum_value': 'minimum_value',
            'maximum_value': 'maximum_value',
            'updated': 'updated',
            'default_unit_id': 'default_unit_id',
            'multiply': 'multiply',
            'add': 'add',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._client_id = None
        self._name = None
        self._abbreviated_name = None
        self._category_id = None
        self._minimum_value = None
        self._maximum_value = None
        self._updated = None
        self._default_unit_id = None
        self._multiply = None
        self._add = None
        self._created_at = None
        self._updated_at = None

    @property
    def id(self):
        """
        Gets the id of this Unit.
        id

        :return: The id of this Unit.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Unit.
        id

        :param id: The id of this Unit.
        :type: int
        """
        self._id = id

    @property
    def client_id(self):
        """
        Gets the client_id of this Unit.
        client_id

        :return: The client_id of this Unit.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Unit.
        client_id

        :param client_id: The client_id of this Unit.
        :type: str
        """
        self._client_id = client_id

    @property
    def name(self):
        """
        Gets the name of this Unit.
        Unit name

        :return: The name of this Unit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Unit.
        Unit name

        :param name: The name of this Unit.
        :type: str
        """
        self._name = name

    @property
    def abbreviated_name(self):
        """
        Gets the abbreviated_name of this Unit.
        Unit abbreviation

        :return: The abbreviated_name of this Unit.
        :rtype: str
        """
        return self._abbreviated_name

    @abbreviated_name.setter
    def abbreviated_name(self, abbreviated_name):
        """
        Sets the abbreviated_name of this Unit.
        Unit abbreviation

        :param abbreviated_name: The abbreviated_name of this Unit.
        :type: str
        """
        self._abbreviated_name = abbreviated_name

    @property
    def category_id(self):
        """
        Gets the category_id of this Unit.
        Unit category ID

        :return: The category_id of this Unit.
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """
        Sets the category_id of this Unit.
        Unit category ID

        :param category_id: The category_id of this Unit.
        :type: int
        """
        self._category_id = category_id

    @property
    def minimum_value(self):
        """
        Gets the minimum_value of this Unit.
        Minimum value permitted for this unit

        :return: The minimum_value of this Unit.
        :rtype: float
        """
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        """
        Sets the minimum_value of this Unit.
        Minimum value permitted for this unit

        :param minimum_value: The minimum_value of this Unit.
        :type: float
        """
        self._minimum_value = minimum_value

    @property
    def maximum_value(self):
        """
        Gets the maximum_value of this Unit.
        Maximum value permitted for this unit

        :return: The maximum_value of this Unit.
        :rtype: float
        """
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        """
        Sets the maximum_value of this Unit.
        Maximum value permitted for this unit

        :param maximum_value: The maximum_value of this Unit.
        :type: float
        """
        self._maximum_value = maximum_value

    @property
    def updated(self):
        """
        Gets the updated of this Unit.
        updated

        :return: The updated of this Unit.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Unit.
        updated

        :param updated: The updated of this Unit.
        :type: int
        """
        self._updated = updated

    @property
    def default_unit_id(self):
        """
        Gets the default_unit_id of this Unit.
        ID of default unit for this units category

        :return: The default_unit_id of this Unit.
        :rtype: int
        """
        return self._default_unit_id

    @default_unit_id.setter
    def default_unit_id(self, default_unit_id):
        """
        Sets the default_unit_id of this Unit.
        ID of default unit for this units category

        :param default_unit_id: The default_unit_id of this Unit.
        :type: int
        """
        self._default_unit_id = default_unit_id

    @property
    def multiply(self):
        """
        Gets the multiply of this Unit.
        Value multiplied to convert to default unit in this unit category

        :return: The multiply of this Unit.
        :rtype: float
        """
        return self._multiply

    @multiply.setter
    def multiply(self, multiply):
        """
        Sets the multiply of this Unit.
        Value multiplied to convert to default unit in this unit category

        :param multiply: The multiply of this Unit.
        :type: float
        """
        self._multiply = multiply

    @property
    def add(self):
        """
        Gets the add of this Unit.
        Value which should be added to convert to default unit

        :return: The add of this Unit.
        :rtype: float
        """
        return self._add

    @add.setter
    def add(self, add):
        """
        Sets the add of this Unit.
        Value which should be added to convert to default unit

        :param add: The add of this Unit.
        :type: float
        """
        self._add = add

    @property
    def created_at(self):
        """
        Gets the created_at of this Unit.
        When the record was first created. Use ISO 8601 datetime format

        :return: The created_at of this Unit.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Unit.
        When the record was first created. Use ISO 8601 datetime format

        :param created_at: The created_at of this Unit.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Unit.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :return: The updated_at of this Unit.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Unit.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :param updated_at: The updated_at of this Unit.
        :type: datetime
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

