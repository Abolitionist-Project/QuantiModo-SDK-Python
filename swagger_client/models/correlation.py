#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from pprint import pformat
from six import iteritems


class Correlation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'correlation_coefficient': 'Number',
            'cause': 'str',
            'effect': 'str',
            'onset_delay': 'float',
            'duration_of_action': 'Number',
            'number_of_pairs': 'Number',
            'effect_size': 'str',
            'statistical_significance': 'str',
            'timestamp': 'Number',
            'reverse_correlation': 'Number',
            'causality_factor': 'Number',
            'cause_category': 'str',
            'effect_category': 'str'
        }

        self.attribute_map = {
            'correlation_coefficient': 'correlationCoefficient',
            'cause': 'cause',
            'effect': 'effect',
            'onset_delay': 'onsetDelay',
            'duration_of_action': 'durationOfAction',
            'number_of_pairs': 'numberOfPairs',
            'effect_size': 'effectSize',
            'statistical_significance': 'statisticalSignificance',
            'timestamp': 'timestamp',
            'reverse_correlation': 'reverseCorrelation',
            'causality_factor': 'causalityFactor',
            'cause_category': 'causeCategory',
            'effect_category': 'effectCategory'
        }

        self._correlation_coefficient = None    # Pearson correlation coefficient between cause and effect measurements
        self._cause = None    # ORIGINAL variable name of the cause variable for which the user desires correlations.
        self._effect = None    # ORIGINAL variable name of the effect variable for which the user desires correlations.
        self._onset_delay = None    # User estimated or default time after cause measurement before a perceivable effect is observed
        self._duration_of_action = None    # Time over which the cause is expected to produce a perceivable effect following the onset delay
        self._number_of_pairs = None    # Number of points that went into the correlation calculation
        self._effect_size = None    # Magnitude of the effects of a cause indicating whether it&#39;s practically meaningful.
        self._statistical_significance = None    # A function of the effect size and sample size
        self._timestamp = None    # Time at which correlation was calculated
        self._reverse_correlation = None    # Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.
        self._causality_factor = None    # 
        self._cause_category = None    # Variable category of the cause variable.
        self._effect_category = None    # Variable category of the effect variable.

    @property
    def correlation_coefficient(self):
        return self._correlation_coefficient

    @correlation_coefficient.setter
    def correlation_coefficient(self, correlation_coefficient):
        self._correlation_coefficient = correlation_coefficient

    @property
    def cause(self):
        return self._cause

    @cause.setter
    def cause(self, cause):
        self._cause = cause

    @property
    def effect(self):
        return self._effect

    @effect.setter
    def effect(self, effect):
        self._effect = effect

    @property
    def onset_delay(self):
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        self._onset_delay = onset_delay

    @property
    def duration_of_action(self):
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        self._duration_of_action = duration_of_action

    @property
    def number_of_pairs(self):
        return self._number_of_pairs

    @number_of_pairs.setter
    def number_of_pairs(self, number_of_pairs):
        self._number_of_pairs = number_of_pairs

    @property
    def effect_size(self):
        return self._effect_size

    @effect_size.setter
    def effect_size(self, effect_size):
        self._effect_size = effect_size

    @property
    def statistical_significance(self):
        return self._statistical_significance

    @statistical_significance.setter
    def statistical_significance(self, statistical_significance):
        self._statistical_significance = statistical_significance

    @property
    def timestamp(self):
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        self._timestamp = timestamp

    @property
    def reverse_correlation(self):
        return self._reverse_correlation

    @reverse_correlation.setter
    def reverse_correlation(self, reverse_correlation):
        self._reverse_correlation = reverse_correlation

    @property
    def causality_factor(self):
        return self._causality_factor

    @causality_factor.setter
    def causality_factor(self, causality_factor):
        self._causality_factor = causality_factor

    @property
    def cause_category(self):
        return self._cause_category

    @cause_category.setter
    def cause_category(self, cause_category):
        self._cause_category = cause_category

    @property
    def effect_category(self):
        return self._effect_category

    @effect_category.setter
    def effect_category(self, effect_category):
        self._effect_category = effect_category

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for name, prop in iteritems(self.__dict__):
            if name == "attribute_map" or name == "swagger_types":
                continue
            if isinstance(prop, list):
                result[name[1:]] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    prop
                ))
            elif hasattr(prop, "to_dict"):
                result[name[1:]] = prop.to_dict()
            else:
                result[name[1:]] = prop

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
