# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Correlation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Correlation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'timestamp': 'int',
            'user_id': 'int',
            'correlation': 'float',
            'cause_id': 'int',
            'effect_id': 'int',
            'onset_delay': 'int',
            'duration_of_action': 'int',
            'number_of_pairs': 'int',
            'value_predicting_high_outcome': 'float',
            'value_predicting_low_outcome': 'float',
            'optimal_pearson_product': 'float',
            'vote': 'float',
            'statistical_significance': 'float',
            'cause_unit': 'str',
            'cause_unit_id': 'int',
            'cause_changes': 'int',
            'effect_changes': 'int',
            'qm_score': 'float',
            'error': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime',
            'reverse_pearson_correlation_coefficient': 'float',
            'predictive_pearson_correlation_coefficient': 'float'
        }

        self.attribute_map = {
            'id': 'id',
            'timestamp': 'timestamp',
            'user_id': 'user_id',
            'correlation': 'correlation',
            'cause_id': 'cause_id',
            'effect_id': 'effect_id',
            'onset_delay': 'onset_delay',
            'duration_of_action': 'duration_of_action',
            'number_of_pairs': 'number_of_pairs',
            'value_predicting_high_outcome': 'value_predicting_high_outcome',
            'value_predicting_low_outcome': 'value_predicting_low_outcome',
            'optimal_pearson_product': 'optimal_pearson_product',
            'vote': 'vote',
            'statistical_significance': 'statistical_significance',
            'cause_unit': 'cause_unit',
            'cause_unit_id': 'cause_unit_id',
            'cause_changes': 'cause_changes',
            'effect_changes': 'effect_changes',
            'qm_score': 'qm_score',
            'error': 'error',
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'reverse_pearson_correlation_coefficient': 'reverse_pearson_correlation_coefficient',
            'predictive_pearson_correlation_coefficient': 'predictive_pearson_correlation_coefficient'
        }

        self._id = None
        self._timestamp = None
        self._user_id = None
        self._correlation = None
        self._cause_id = None
        self._effect_id = None
        self._onset_delay = None
        self._duration_of_action = None
        self._number_of_pairs = None
        self._value_predicting_high_outcome = None
        self._value_predicting_low_outcome = None
        self._optimal_pearson_product = None
        self._vote = None
        self._statistical_significance = None
        self._cause_unit = None
        self._cause_unit_id = None
        self._cause_changes = None
        self._effect_changes = None
        self._qm_score = None
        self._error = None
        self._created_at = None
        self._updated_at = None
        self._reverse_pearson_correlation_coefficient = None
        self._predictive_pearson_correlation_coefficient = None

    @property
    def id(self):
        """
        Gets the id of this Correlation.
        id

        :return: The id of this Correlation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Correlation.
        id

        :param id: The id of this Correlation.
        :type: int
        """
        self._id = id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Correlation.
        Time at which correlation was calculated

        :return: The timestamp of this Correlation.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Correlation.
        Time at which correlation was calculated

        :param timestamp: The timestamp of this Correlation.
        :type: int
        """
        self._timestamp = timestamp

    @property
    def user_id(self):
        """
        Gets the user_id of this Correlation.
        ID of user that owns this correlation

        :return: The user_id of this Correlation.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Correlation.
        ID of user that owns this correlation

        :param user_id: The user_id of this Correlation.
        :type: int
        """
        self._user_id = user_id

    @property
    def correlation(self):
        """
        Gets the correlation of this Correlation.
        Pearson correlation coefficient between cause and effect measurements

        :return: The correlation of this Correlation.
        :rtype: float
        """
        return self._correlation

    @correlation.setter
    def correlation(self, correlation):
        """
        Sets the correlation of this Correlation.
        Pearson correlation coefficient between cause and effect measurements

        :param correlation: The correlation of this Correlation.
        :type: float
        """
        self._correlation = correlation

    @property
    def cause_id(self):
        """
        Gets the cause_id of this Correlation.
        variable ID of the cause variable for which the user desires correlations

        :return: The cause_id of this Correlation.
        :rtype: int
        """
        return self._cause_id

    @cause_id.setter
    def cause_id(self, cause_id):
        """
        Sets the cause_id of this Correlation.
        variable ID of the cause variable for which the user desires correlations

        :param cause_id: The cause_id of this Correlation.
        :type: int
        """
        self._cause_id = cause_id

    @property
    def effect_id(self):
        """
        Gets the effect_id of this Correlation.
        variable ID of the effect variable for which the user desires correlations

        :return: The effect_id of this Correlation.
        :rtype: int
        """
        return self._effect_id

    @effect_id.setter
    def effect_id(self, effect_id):
        """
        Sets the effect_id of this Correlation.
        variable ID of the effect variable for which the user desires correlations

        :param effect_id: The effect_id of this Correlation.
        :type: int
        """
        self._effect_id = effect_id

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this Correlation.
        User estimated or default time after cause measurement before a perceivable effect is observed

        :return: The onset_delay of this Correlation.
        :rtype: int
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this Correlation.
        User estimated or default time after cause measurement before a perceivable effect is observed

        :param onset_delay: The onset_delay of this Correlation.
        :type: int
        """
        self._onset_delay = onset_delay

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this Correlation.
        Time over which the cause is expected to produce a perceivable effect following the onset delay

        :return: The duration_of_action of this Correlation.
        :rtype: int
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this Correlation.
        Time over which the cause is expected to produce a perceivable effect following the onset delay

        :param duration_of_action: The duration_of_action of this Correlation.
        :type: int
        """
        self._duration_of_action = duration_of_action

    @property
    def number_of_pairs(self):
        """
        Gets the number_of_pairs of this Correlation.
        Number of points that went into the correlation calculation

        :return: The number_of_pairs of this Correlation.
        :rtype: int
        """
        return self._number_of_pairs

    @number_of_pairs.setter
    def number_of_pairs(self, number_of_pairs):
        """
        Sets the number_of_pairs of this Correlation.
        Number of points that went into the correlation calculation

        :param number_of_pairs: The number_of_pairs of this Correlation.
        :type: int
        """
        self._number_of_pairs = number_of_pairs

    @property
    def value_predicting_high_outcome(self):
        """
        Gets the value_predicting_high_outcome of this Correlation.
        cause value that predicts an above average effect value (in default unit for cause variable)

        :return: The value_predicting_high_outcome of this Correlation.
        :rtype: float
        """
        return self._value_predicting_high_outcome

    @value_predicting_high_outcome.setter
    def value_predicting_high_outcome(self, value_predicting_high_outcome):
        """
        Sets the value_predicting_high_outcome of this Correlation.
        cause value that predicts an above average effect value (in default unit for cause variable)

        :param value_predicting_high_outcome: The value_predicting_high_outcome of this Correlation.
        :type: float
        """
        self._value_predicting_high_outcome = value_predicting_high_outcome

    @property
    def value_predicting_low_outcome(self):
        """
        Gets the value_predicting_low_outcome of this Correlation.
        cause value that predicts a below average effect value (in default unit for cause variable)

        :return: The value_predicting_low_outcome of this Correlation.
        :rtype: float
        """
        return self._value_predicting_low_outcome

    @value_predicting_low_outcome.setter
    def value_predicting_low_outcome(self, value_predicting_low_outcome):
        """
        Sets the value_predicting_low_outcome of this Correlation.
        cause value that predicts a below average effect value (in default unit for cause variable)

        :param value_predicting_low_outcome: The value_predicting_low_outcome of this Correlation.
        :type: float
        """
        self._value_predicting_low_outcome = value_predicting_low_outcome

    @property
    def optimal_pearson_product(self):
        """
        Gets the optimal_pearson_product of this Correlation.
        Optimal Pearson Product

        :return: The optimal_pearson_product of this Correlation.
        :rtype: float
        """
        return self._optimal_pearson_product

    @optimal_pearson_product.setter
    def optimal_pearson_product(self, optimal_pearson_product):
        """
        Sets the optimal_pearson_product of this Correlation.
        Optimal Pearson Product

        :param optimal_pearson_product: The optimal_pearson_product of this Correlation.
        :type: float
        """
        self._optimal_pearson_product = optimal_pearson_product

    @property
    def vote(self):
        """
        Gets the vote of this Correlation.
        Vote

        :return: The vote of this Correlation.
        :rtype: float
        """
        return self._vote

    @vote.setter
    def vote(self, vote):
        """
        Sets the vote of this Correlation.
        Vote

        :param vote: The vote of this Correlation.
        :type: float
        """
        self._vote = vote

    @property
    def statistical_significance(self):
        """
        Gets the statistical_significance of this Correlation.
        A function of the effect size and sample size

        :return: The statistical_significance of this Correlation.
        :rtype: float
        """
        return self._statistical_significance

    @statistical_significance.setter
    def statistical_significance(self, statistical_significance):
        """
        Sets the statistical_significance of this Correlation.
        A function of the effect size and sample size

        :param statistical_significance: The statistical_significance of this Correlation.
        :type: float
        """
        self._statistical_significance = statistical_significance

    @property
    def cause_unit(self):
        """
        Gets the cause_unit of this Correlation.
        Unit of Cause

        :return: The cause_unit of this Correlation.
        :rtype: str
        """
        return self._cause_unit

    @cause_unit.setter
    def cause_unit(self, cause_unit):
        """
        Sets the cause_unit of this Correlation.
        Unit of Cause

        :param cause_unit: The cause_unit of this Correlation.
        :type: str
        """
        self._cause_unit = cause_unit

    @property
    def cause_unit_id(self):
        """
        Gets the cause_unit_id of this Correlation.
        Unit ID of Cause

        :return: The cause_unit_id of this Correlation.
        :rtype: int
        """
        return self._cause_unit_id

    @cause_unit_id.setter
    def cause_unit_id(self, cause_unit_id):
        """
        Sets the cause_unit_id of this Correlation.
        Unit ID of Cause

        :param cause_unit_id: The cause_unit_id of this Correlation.
        :type: int
        """
        self._cause_unit_id = cause_unit_id

    @property
    def cause_changes(self):
        """
        Gets the cause_changes of this Correlation.
        Cause changes

        :return: The cause_changes of this Correlation.
        :rtype: int
        """
        return self._cause_changes

    @cause_changes.setter
    def cause_changes(self, cause_changes):
        """
        Sets the cause_changes of this Correlation.
        Cause changes

        :param cause_changes: The cause_changes of this Correlation.
        :type: int
        """
        self._cause_changes = cause_changes

    @property
    def effect_changes(self):
        """
        Gets the effect_changes of this Correlation.
        Effect changes

        :return: The effect_changes of this Correlation.
        :rtype: int
        """
        return self._effect_changes

    @effect_changes.setter
    def effect_changes(self, effect_changes):
        """
        Sets the effect_changes of this Correlation.
        Effect changes

        :param effect_changes: The effect_changes of this Correlation.
        :type: int
        """
        self._effect_changes = effect_changes

    @property
    def qm_score(self):
        """
        Gets the qm_score of this Correlation.
        QM Score

        :return: The qm_score of this Correlation.
        :rtype: float
        """
        return self._qm_score

    @qm_score.setter
    def qm_score(self, qm_score):
        """
        Sets the qm_score of this Correlation.
        QM Score

        :param qm_score: The qm_score of this Correlation.
        :type: float
        """
        self._qm_score = qm_score

    @property
    def error(self):
        """
        Gets the error of this Correlation.
        error

        :return: The error of this Correlation.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this Correlation.
        error

        :param error: The error of this Correlation.
        :type: str
        """
        self._error = error

    @property
    def created_at(self):
        """
        Gets the created_at of this Correlation.
        created_at

        :return: The created_at of this Correlation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Correlation.
        created_at

        :param created_at: The created_at of this Correlation.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Correlation.
        updated_at

        :return: The updated_at of this Correlation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Correlation.
        updated_at

        :param updated_at: The updated_at of this Correlation.
        :type: datetime
        """
        self._updated_at = updated_at

    @property
    def reverse_pearson_correlation_coefficient(self):
        """
        Gets the reverse_pearson_correlation_coefficient of this Correlation.
        Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation

        :return: The reverse_pearson_correlation_coefficient of this Correlation.
        :rtype: float
        """
        return self._reverse_pearson_correlation_coefficient

    @reverse_pearson_correlation_coefficient.setter
    def reverse_pearson_correlation_coefficient(self, reverse_pearson_correlation_coefficient):
        """
        Sets the reverse_pearson_correlation_coefficient of this Correlation.
        Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation

        :param reverse_pearson_correlation_coefficient: The reverse_pearson_correlation_coefficient of this Correlation.
        :type: float
        """
        self._reverse_pearson_correlation_coefficient = reverse_pearson_correlation_coefficient

    @property
    def predictive_pearson_correlation_coefficient(self):
        """
        Gets the predictive_pearson_correlation_coefficient of this Correlation.
        Predictive Pearson Correlation Coefficient

        :return: The predictive_pearson_correlation_coefficient of this Correlation.
        :rtype: float
        """
        return self._predictive_pearson_correlation_coefficient

    @predictive_pearson_correlation_coefficient.setter
    def predictive_pearson_correlation_coefficient(self, predictive_pearson_correlation_coefficient):
        """
        Sets the predictive_pearson_correlation_coefficient of this Correlation.
        Predictive Pearson Correlation Coefficient

        :param predictive_pearson_correlation_coefficient: The predictive_pearson_correlation_coefficient of this Correlation.
        :type: float
        """
        self._predictive_pearson_correlation_coefficient = predictive_pearson_correlation_coefficient

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
