# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Correlation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Correlation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'correlation_coefficient': 'float',
            'cause': 'str',
            'original_cause': 'str',
            'effect': 'str',
            'original_effect': 'str',
            'onset_delay': 'float',
            'duration_of_action': 'float',
            'number_of_pairs': 'float',
            'effect_size': 'str',
            'statistical_significance': 'str',
            'timestamp': 'float',
            'reverse_correlation': 'float',
            'causality_factor': 'float',
            'cause_category': 'str',
            'effect_category': 'str',
            'value_predicting_high_outcome': 'float',
            'value_predicting_low_outcome': 'float',
            'optimal_pearson_product': 'float',
            'average_vote': 'float',
            'user_vote': 'float',
            'cause_unit': 'str',
            'cause_unit_id': 'int'
        }

        self.attribute_map = {
            'correlation_coefficient': 'correlationCoefficient',
            'cause': 'cause',
            'original_cause': 'originalCause',
            'effect': 'effect',
            'original_effect': 'originalEffect',
            'onset_delay': 'onsetDelay',
            'duration_of_action': 'durationOfAction',
            'number_of_pairs': 'numberOfPairs',
            'effect_size': 'effectSize',
            'statistical_significance': 'statisticalSignificance',
            'timestamp': 'timestamp',
            'reverse_correlation': 'reverseCorrelation',
            'causality_factor': 'causalityFactor',
            'cause_category': 'causeCategory',
            'effect_category': 'effectCategory',
            'value_predicting_high_outcome': 'valuePredictingHighOutcome',
            'value_predicting_low_outcome': 'valuePredictingLowOutcome',
            'optimal_pearson_product': 'optimalPearsonProduct',
            'average_vote': 'averageVote',
            'user_vote': 'userVote',
            'cause_unit': 'causeUnit',
            'cause_unit_id': 'causeUnitId'
        }

        self._correlation_coefficient = None
        self._cause = None
        self._original_cause = None
        self._effect = None
        self._original_effect = None
        self._onset_delay = None
        self._duration_of_action = None
        self._number_of_pairs = None
        self._effect_size = None
        self._statistical_significance = None
        self._timestamp = None
        self._reverse_correlation = None
        self._causality_factor = None
        self._cause_category = None
        self._effect_category = None
        self._value_predicting_high_outcome = None
        self._value_predicting_low_outcome = None
        self._optimal_pearson_product = None
        self._average_vote = None
        self._user_vote = None
        self._cause_unit = None
        self._cause_unit_id = None

    @property
    def correlation_coefficient(self):
        """
        Gets the correlation_coefficient of this Correlation.
        Pearson correlation coefficient between cause and effect measurements

        :return: The correlation_coefficient of this Correlation.
        :rtype: float
        """
        return self._correlation_coefficient

    @correlation_coefficient.setter
    def correlation_coefficient(self, correlation_coefficient):
        """
        Sets the correlation_coefficient of this Correlation.
        Pearson correlation coefficient between cause and effect measurements

        :param correlation_coefficient: The correlation_coefficient of this Correlation.
        :type: float
        """
        self._correlation_coefficient = correlation_coefficient

    @property
    def cause(self):
        """
        Gets the cause of this Correlation.
        ORIGINAL variable name of the cause variable for which the user desires correlations.

        :return: The cause of this Correlation.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """
        Sets the cause of this Correlation.
        ORIGINAL variable name of the cause variable for which the user desires correlations.

        :param cause: The cause of this Correlation.
        :type: str
        """
        self._cause = cause

    @property
    def original_cause(self):
        """
        Gets the original_cause of this Correlation.
        original name of the cause.

        :return: The original_cause of this Correlation.
        :rtype: str
        """
        return self._original_cause

    @original_cause.setter
    def original_cause(self, original_cause):
        """
        Sets the original_cause of this Correlation.
        original name of the cause.

        :param original_cause: The original_cause of this Correlation.
        :type: str
        """
        self._original_cause = original_cause

    @property
    def effect(self):
        """
        Gets the effect of this Correlation.
        ORIGINAL variable name of the effect variable for which the user desires correlations.

        :return: The effect of this Correlation.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """
        Sets the effect of this Correlation.
        ORIGINAL variable name of the effect variable for which the user desires correlations.

        :param effect: The effect of this Correlation.
        :type: str
        """
        self._effect = effect

    @property
    def original_effect(self):
        """
        Gets the original_effect of this Correlation.
        effect variable original name.

        :return: The original_effect of this Correlation.
        :rtype: str
        """
        return self._original_effect

    @original_effect.setter
    def original_effect(self, original_effect):
        """
        Sets the original_effect of this Correlation.
        effect variable original name.

        :param original_effect: The original_effect of this Correlation.
        :type: str
        """
        self._original_effect = original_effect

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this Correlation.
        User estimated or default time after cause measurement before a perceivable effect is observed

        :return: The onset_delay of this Correlation.
        :rtype: float
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this Correlation.
        User estimated or default time after cause measurement before a perceivable effect is observed

        :param onset_delay: The onset_delay of this Correlation.
        :type: float
        """
        self._onset_delay = onset_delay

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this Correlation.
        Time over which the cause is expected to produce a perceivable effect following the onset delay

        :return: The duration_of_action of this Correlation.
        :rtype: float
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this Correlation.
        Time over which the cause is expected to produce a perceivable effect following the onset delay

        :param duration_of_action: The duration_of_action of this Correlation.
        :type: float
        """
        self._duration_of_action = duration_of_action

    @property
    def number_of_pairs(self):
        """
        Gets the number_of_pairs of this Correlation.
        Number of points that went into the correlation calculation

        :return: The number_of_pairs of this Correlation.
        :rtype: float
        """
        return self._number_of_pairs

    @number_of_pairs.setter
    def number_of_pairs(self, number_of_pairs):
        """
        Sets the number_of_pairs of this Correlation.
        Number of points that went into the correlation calculation

        :param number_of_pairs: The number_of_pairs of this Correlation.
        :type: float
        """
        self._number_of_pairs = number_of_pairs

    @property
    def effect_size(self):
        """
        Gets the effect_size of this Correlation.
        Magnitude of the effects of a cause indicating whether it's practically meaningful.

        :return: The effect_size of this Correlation.
        :rtype: str
        """
        return self._effect_size

    @effect_size.setter
    def effect_size(self, effect_size):
        """
        Sets the effect_size of this Correlation.
        Magnitude of the effects of a cause indicating whether it's practically meaningful.

        :param effect_size: The effect_size of this Correlation.
        :type: str
        """
        self._effect_size = effect_size

    @property
    def statistical_significance(self):
        """
        Gets the statistical_significance of this Correlation.
        A function of the effect size and sample size

        :return: The statistical_significance of this Correlation.
        :rtype: str
        """
        return self._statistical_significance

    @statistical_significance.setter
    def statistical_significance(self, statistical_significance):
        """
        Sets the statistical_significance of this Correlation.
        A function of the effect size and sample size

        :param statistical_significance: The statistical_significance of this Correlation.
        :type: str
        """
        self._statistical_significance = statistical_significance

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Correlation.
        Time at which correlation was calculated

        :return: The timestamp of this Correlation.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Correlation.
        Time at which correlation was calculated

        :param timestamp: The timestamp of this Correlation.
        :type: float
        """
        self._timestamp = timestamp

    @property
    def reverse_correlation(self):
        """
        Gets the reverse_correlation of this Correlation.
        Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.

        :return: The reverse_correlation of this Correlation.
        :rtype: float
        """
        return self._reverse_correlation

    @reverse_correlation.setter
    def reverse_correlation(self, reverse_correlation):
        """
        Sets the reverse_correlation of this Correlation.
        Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.

        :param reverse_correlation: The reverse_correlation of this Correlation.
        :type: float
        """
        self._reverse_correlation = reverse_correlation

    @property
    def causality_factor(self):
        """
        Gets the causality_factor of this Correlation.
        

        :return: The causality_factor of this Correlation.
        :rtype: float
        """
        return self._causality_factor

    @causality_factor.setter
    def causality_factor(self, causality_factor):
        """
        Sets the causality_factor of this Correlation.
        

        :param causality_factor: The causality_factor of this Correlation.
        :type: float
        """
        self._causality_factor = causality_factor

    @property
    def cause_category(self):
        """
        Gets the cause_category of this Correlation.
        Variable category of the cause variable.

        :return: The cause_category of this Correlation.
        :rtype: str
        """
        return self._cause_category

    @cause_category.setter
    def cause_category(self, cause_category):
        """
        Sets the cause_category of this Correlation.
        Variable category of the cause variable.

        :param cause_category: The cause_category of this Correlation.
        :type: str
        """
        self._cause_category = cause_category

    @property
    def effect_category(self):
        """
        Gets the effect_category of this Correlation.
        Variable category of the effect variable.

        :return: The effect_category of this Correlation.
        :rtype: str
        """
        return self._effect_category

    @effect_category.setter
    def effect_category(self, effect_category):
        """
        Sets the effect_category of this Correlation.
        Variable category of the effect variable.

        :param effect_category: The effect_category of this Correlation.
        :type: str
        """
        self._effect_category = effect_category

    @property
    def value_predicting_high_outcome(self):
        """
        Gets the value_predicting_high_outcome of this Correlation.
        cause value that predicts an above average effect value (in default unit for cause variable)

        :return: The value_predicting_high_outcome of this Correlation.
        :rtype: float
        """
        return self._value_predicting_high_outcome

    @value_predicting_high_outcome.setter
    def value_predicting_high_outcome(self, value_predicting_high_outcome):
        """
        Sets the value_predicting_high_outcome of this Correlation.
        cause value that predicts an above average effect value (in default unit for cause variable)

        :param value_predicting_high_outcome: The value_predicting_high_outcome of this Correlation.
        :type: float
        """
        self._value_predicting_high_outcome = value_predicting_high_outcome

    @property
    def value_predicting_low_outcome(self):
        """
        Gets the value_predicting_low_outcome of this Correlation.
        cause value that predicts a below average effect value (in default unit for cause variable)

        :return: The value_predicting_low_outcome of this Correlation.
        :rtype: float
        """
        return self._value_predicting_low_outcome

    @value_predicting_low_outcome.setter
    def value_predicting_low_outcome(self, value_predicting_low_outcome):
        """
        Sets the value_predicting_low_outcome of this Correlation.
        cause value that predicts a below average effect value (in default unit for cause variable)

        :param value_predicting_low_outcome: The value_predicting_low_outcome of this Correlation.
        :type: float
        """
        self._value_predicting_low_outcome = value_predicting_low_outcome

    @property
    def optimal_pearson_product(self):
        """
        Gets the optimal_pearson_product of this Correlation.
        Optimal Pearson Product

        :return: The optimal_pearson_product of this Correlation.
        :rtype: float
        """
        return self._optimal_pearson_product

    @optimal_pearson_product.setter
    def optimal_pearson_product(self, optimal_pearson_product):
        """
        Sets the optimal_pearson_product of this Correlation.
        Optimal Pearson Product

        :param optimal_pearson_product: The optimal_pearson_product of this Correlation.
        :type: float
        """
        self._optimal_pearson_product = optimal_pearson_product

    @property
    def average_vote(self):
        """
        Gets the average_vote of this Correlation.
        Average Vote

        :return: The average_vote of this Correlation.
        :rtype: float
        """
        return self._average_vote

    @average_vote.setter
    def average_vote(self, average_vote):
        """
        Sets the average_vote of this Correlation.
        Average Vote

        :param average_vote: The average_vote of this Correlation.
        :type: float
        """
        self._average_vote = average_vote

    @property
    def user_vote(self):
        """
        Gets the user_vote of this Correlation.
        User Vote

        :return: The user_vote of this Correlation.
        :rtype: float
        """
        return self._user_vote

    @user_vote.setter
    def user_vote(self, user_vote):
        """
        Sets the user_vote of this Correlation.
        User Vote

        :param user_vote: The user_vote of this Correlation.
        :type: float
        """
        self._user_vote = user_vote

    @property
    def cause_unit(self):
        """
        Gets the cause_unit of this Correlation.
        Unit of Cause

        :return: The cause_unit of this Correlation.
        :rtype: str
        """
        return self._cause_unit

    @cause_unit.setter
    def cause_unit(self, cause_unit):
        """
        Sets the cause_unit of this Correlation.
        Unit of Cause

        :param cause_unit: The cause_unit of this Correlation.
        :type: str
        """
        self._cause_unit = cause_unit

    @property
    def cause_unit_id(self):
        """
        Gets the cause_unit_id of this Correlation.
        Unit Id of Cause

        :return: The cause_unit_id of this Correlation.
        :rtype: int
        """
        return self._cause_unit_id

    @cause_unit_id.setter
    def cause_unit_id(self, cause_unit_id):
        """
        Sets the cause_unit_id of this Correlation.
        Unit Id of Cause

        :param cause_unit_id: The cause_unit_id of this Correlation.
        :type: int
        """
        self._cause_unit_id = cause_unit_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
