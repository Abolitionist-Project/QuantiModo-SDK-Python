# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PostCorrelation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PostCorrelation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cause': 'str',
            'effect': 'str',
            'correlation': 'float',
            'vote': 'int'
        }

        self.attribute_map = {
            'cause': 'cause',
            'effect': 'effect',
            'correlation': 'correlation',
            'vote': 'vote'
        }

        self._cause = None
        self._effect = None
        self._correlation = None
        self._vote = None

    @property
    def cause(self):
        """
        Gets the cause of this PostCorrelation.
        Cause variable name

        :return: The cause of this PostCorrelation.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """
        Sets the cause of this PostCorrelation.
        Cause variable name

        :param cause: The cause of this PostCorrelation.
        :type: str
        """
        self._cause = cause

    @property
    def effect(self):
        """
        Gets the effect of this PostCorrelation.
        Effect variable name

        :return: The effect of this PostCorrelation.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """
        Sets the effect of this PostCorrelation.
        Effect variable name

        :param effect: The effect of this PostCorrelation.
        :type: str
        """
        self._effect = effect

    @property
    def correlation(self):
        """
        Gets the correlation of this PostCorrelation.
        Correlation value

        :return: The correlation of this PostCorrelation.
        :rtype: float
        """
        return self._correlation

    @correlation.setter
    def correlation(self, correlation):
        """
        Sets the correlation of this PostCorrelation.
        Correlation value

        :param correlation: The correlation of this PostCorrelation.
        :type: float
        """
        self._correlation = correlation

    @property
    def vote(self):
        """
        Gets the vote of this PostCorrelation.
        Vote: 0 or 1

        :return: The vote of this PostCorrelation.
        :rtype: int
        """
        return self._vote

    @vote.setter
    def vote(self, vote):
        """
        Sets the vote of this PostCorrelation.
        Vote: 0 or 1

        :param vote: The vote of this PostCorrelation.
        :type: int
        """
        self._vote = vote

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
