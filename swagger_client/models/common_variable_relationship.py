# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CommonVariableRelationship(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CommonVariableRelationship - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'confidence_level': 'str',
            'confidence_score': 'float',
            'direction': 'str',
            'duration_of_action': 'int',
            'error_message': 'str',
            'onset_delay': 'int',
            'outcome_variable_id': 'int',
            'predictor_variable_id': 'int',
            'predictor_unit_id': 'int',
            'sinn_rank': 'float',
            'strength_score': 'float',
            'strength_level': 'str',
            'up_votes': 'int',
            'down_votes': 'int',
            'value_predicting_high_outcome': 'float',
            'value_predicting_low_outcome': 'float',
            'number_of_users': 'int',
            'data_source': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'confidence_level': 'confidence_level',
            'confidence_score': 'confidence_score',
            'direction': 'direction',
            'duration_of_action': 'duration_of_action',
            'error_message': 'error_message',
            'onset_delay': 'onset_delay',
            'outcome_variable_id': 'outcome_variable_id',
            'predictor_variable_id': 'predictor_variable_id',
            'predictor_unit_id': 'predictor_unit_id',
            'sinn_rank': 'sinn_rank',
            'strength_score': 'strength_score',
            'strength_level': 'strength_level',
            'up_votes': 'up_votes',
            'down_votes': 'down_votes',
            'value_predicting_high_outcome': 'value_predicting_high_outcome',
            'value_predicting_low_outcome': 'value_predicting_low_outcome',
            'number_of_users': 'number_of_users',
            'data_source': 'data_source'
        }

        self._id = None
        self._confidence_level = None
        self._confidence_score = None
        self._direction = None
        self._duration_of_action = None
        self._error_message = None
        self._onset_delay = None
        self._outcome_variable_id = None
        self._predictor_variable_id = None
        self._predictor_unit_id = None
        self._sinn_rank = None
        self._strength_score = None
        self._strength_level = None
        self._up_votes = None
        self._down_votes = None
        self._value_predicting_high_outcome = None
        self._value_predicting_low_outcome = None
        self._number_of_users = None
        self._data_source = None

    @property
    def id(self):
        """
        Gets the id of this CommonVariableRelationship.
        id

        :return: The id of this CommonVariableRelationship.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CommonVariableRelationship.
        id

        :param id: The id of this CommonVariableRelationship.
        :type: int
        """
        self._id = id

    @property
    def confidence_level(self):
        """
        Gets the confidence_level of this CommonVariableRelationship.
        Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :return: The confidence_level of this CommonVariableRelationship.
        :rtype: str
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """
        Sets the confidence_level of this CommonVariableRelationship.
        Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :param confidence_level: The confidence_level of this CommonVariableRelationship.
        :type: str
        """
        self._confidence_level = confidence_level

    @property
    def confidence_score(self):
        """
        Gets the confidence_score of this CommonVariableRelationship.
        A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :return: The confidence_score of this CommonVariableRelationship.
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """
        Sets the confidence_score of this CommonVariableRelationship.
        A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :param confidence_score: The confidence_score of this CommonVariableRelationship.
        :type: float
        """
        self._confidence_score = confidence_score

    @property
    def direction(self):
        """
        Gets the direction of this CommonVariableRelationship.
        Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.

        :return: The direction of this CommonVariableRelationship.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this CommonVariableRelationship.
        Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.

        :param direction: The direction of this CommonVariableRelationship.
        :type: str
        """
        self._direction = direction

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this CommonVariableRelationship.
        duration_of_action

        :return: The duration_of_action of this CommonVariableRelationship.
        :rtype: int
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this CommonVariableRelationship.
        duration_of_action

        :param duration_of_action: The duration_of_action of this CommonVariableRelationship.
        :type: int
        """
        self._duration_of_action = duration_of_action

    @property
    def error_message(self):
        """
        Gets the error_message of this CommonVariableRelationship.
        error_message

        :return: The error_message of this CommonVariableRelationship.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this CommonVariableRelationship.
        error_message

        :param error_message: The error_message of this CommonVariableRelationship.
        :type: str
        """
        self._error_message = error_message

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this CommonVariableRelationship.
        User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed

        :return: The onset_delay of this CommonVariableRelationship.
        :rtype: int
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this CommonVariableRelationship.
        User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed

        :param onset_delay: The onset_delay of this CommonVariableRelationship.
        :type: int
        """
        self._onset_delay = onset_delay

    @property
    def outcome_variable_id(self):
        """
        Gets the outcome_variable_id of this CommonVariableRelationship.
        Variable ID for the outcome variable

        :return: The outcome_variable_id of this CommonVariableRelationship.
        :rtype: int
        """
        return self._outcome_variable_id

    @outcome_variable_id.setter
    def outcome_variable_id(self, outcome_variable_id):
        """
        Sets the outcome_variable_id of this CommonVariableRelationship.
        Variable ID for the outcome variable

        :param outcome_variable_id: The outcome_variable_id of this CommonVariableRelationship.
        :type: int
        """
        self._outcome_variable_id = outcome_variable_id

    @property
    def predictor_variable_id(self):
        """
        Gets the predictor_variable_id of this CommonVariableRelationship.
        Variable ID for the predictor variable

        :return: The predictor_variable_id of this CommonVariableRelationship.
        :rtype: int
        """
        return self._predictor_variable_id

    @predictor_variable_id.setter
    def predictor_variable_id(self, predictor_variable_id):
        """
        Sets the predictor_variable_id of this CommonVariableRelationship.
        Variable ID for the predictor variable

        :param predictor_variable_id: The predictor_variable_id of this CommonVariableRelationship.
        :type: int
        """
        self._predictor_variable_id = predictor_variable_id

    @property
    def predictor_unit_id(self):
        """
        Gets the predictor_unit_id of this CommonVariableRelationship.
        ID for default unit of the predictor variable

        :return: The predictor_unit_id of this CommonVariableRelationship.
        :rtype: int
        """
        return self._predictor_unit_id

    @predictor_unit_id.setter
    def predictor_unit_id(self, predictor_unit_id):
        """
        Sets the predictor_unit_id of this CommonVariableRelationship.
        ID for default unit of the predictor variable

        :param predictor_unit_id: The predictor_unit_id of this CommonVariableRelationship.
        :type: int
        """
        self._predictor_unit_id = predictor_unit_id

    @property
    def sinn_rank(self):
        """
        Gets the sinn_rank of this CommonVariableRelationship.
        A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.

        :return: The sinn_rank of this CommonVariableRelationship.
        :rtype: float
        """
        return self._sinn_rank

    @sinn_rank.setter
    def sinn_rank(self, sinn_rank):
        """
        Sets the sinn_rank of this CommonVariableRelationship.
        A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.

        :param sinn_rank: The sinn_rank of this CommonVariableRelationship.
        :type: float
        """
        self._sinn_rank = sinn_rank

    @property
    def strength_score(self):
        """
        Gets the strength_score of this CommonVariableRelationship.
        A value represented to the size of the effect which the predictor appears to have on the outcome.

        :return: The strength_score of this CommonVariableRelationship.
        :rtype: float
        """
        return self._strength_score

    @strength_score.setter
    def strength_score(self, strength_score):
        """
        Sets the strength_score of this CommonVariableRelationship.
        A value represented to the size of the effect which the predictor appears to have on the outcome.

        :param strength_score: The strength_score of this CommonVariableRelationship.
        :type: float
        """
        self._strength_score = strength_score

    @property
    def strength_level(self):
        """
        Gets the strength_level of this CommonVariableRelationship.
        Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.

        :return: The strength_level of this CommonVariableRelationship.
        :rtype: str
        """
        return self._strength_level

    @strength_level.setter
    def strength_level(self, strength_level):
        """
        Sets the strength_level of this CommonVariableRelationship.
        Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.

        :param strength_level: The strength_level of this CommonVariableRelationship.
        :type: str
        """
        self._strength_level = strength_level

    @property
    def up_votes(self):
        """
        Gets the up_votes of this CommonVariableRelationship.
        Number of users who feel that there is a plausible causal relationship between the predictor and outcome variables.

        :return: The up_votes of this CommonVariableRelationship.
        :rtype: int
        """
        return self._up_votes

    @up_votes.setter
    def up_votes(self, up_votes):
        """
        Sets the up_votes of this CommonVariableRelationship.
        Number of users who feel that there is a plausible causal relationship between the predictor and outcome variables.

        :param up_votes: The up_votes of this CommonVariableRelationship.
        :type: int
        """
        self._up_votes = up_votes

    @property
    def down_votes(self):
        """
        Gets the down_votes of this CommonVariableRelationship.
        Number of users who do not feel that there is a plausible causal relationship between the predictor and outcome variables.

        :return: The down_votes of this CommonVariableRelationship.
        :rtype: int
        """
        return self._down_votes

    @down_votes.setter
    def down_votes(self, down_votes):
        """
        Sets the down_votes of this CommonVariableRelationship.
        Number of users who do not feel that there is a plausible causal relationship between the predictor and outcome variables.

        :param down_votes: The down_votes of this CommonVariableRelationship.
        :type: int
        """
        self._down_votes = down_votes

    @property
    def value_predicting_high_outcome(self):
        """
        Gets the value_predicting_high_outcome of this CommonVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes an above average outcome value

        :return: The value_predicting_high_outcome of this CommonVariableRelationship.
        :rtype: float
        """
        return self._value_predicting_high_outcome

    @value_predicting_high_outcome.setter
    def value_predicting_high_outcome(self, value_predicting_high_outcome):
        """
        Sets the value_predicting_high_outcome of this CommonVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes an above average outcome value

        :param value_predicting_high_outcome: The value_predicting_high_outcome of this CommonVariableRelationship.
        :type: float
        """
        self._value_predicting_high_outcome = value_predicting_high_outcome

    @property
    def value_predicting_low_outcome(self):
        """
        Gets the value_predicting_low_outcome of this CommonVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes a below average outcome value

        :return: The value_predicting_low_outcome of this CommonVariableRelationship.
        :rtype: float
        """
        return self._value_predicting_low_outcome

    @value_predicting_low_outcome.setter
    def value_predicting_low_outcome(self, value_predicting_low_outcome):
        """
        Sets the value_predicting_low_outcome of this CommonVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes a below average outcome value

        :param value_predicting_low_outcome: The value_predicting_low_outcome of this CommonVariableRelationship.
        :type: float
        """
        self._value_predicting_low_outcome = value_predicting_low_outcome

    @property
    def number_of_users(self):
        """
        Gets the number_of_users of this CommonVariableRelationship.
        Number of users whose data was aggregated to obtain this relationship

        :return: The number_of_users of this CommonVariableRelationship.
        :rtype: int
        """
        return self._number_of_users

    @number_of_users.setter
    def number_of_users(self, number_of_users):
        """
        Sets the number_of_users of this CommonVariableRelationship.
        Number of users whose data was aggregated to obtain this relationship

        :param number_of_users: The number_of_users of this CommonVariableRelationship.
        :type: int
        """
        self._number_of_users = number_of_users

    @property
    def data_source(self):
        """
        Gets the data_source of this CommonVariableRelationship.
        Source of data for this common variable relationship

        :return: The data_source of this CommonVariableRelationship.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """
        Sets the data_source of this CommonVariableRelationship.
        Source of data for this common variable relationship

        :param data_source: The data_source of this CommonVariableRelationship.
        :type: str
        """
        self._data_source = data_source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

