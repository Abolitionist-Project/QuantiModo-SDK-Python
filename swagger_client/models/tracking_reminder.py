# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TrackingReminder(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TrackingReminder - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'client_id': 'str',
            'user_id': 'int',
            'variable_id': 'int',
            'default_value': 'float',
            'reminder_start_time': 'str',
            'reminder_end_time': 'str',
            'reminder_sound': 'str',
            'reminder_frequency': 'int',
            'pop_up': 'bool',
            'sms': 'bool',
            'email': 'bool',
            'notification_bar': 'bool',
            'last_reminded': 'datetime',
            'last_tracked': 'datetime',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'client_id': 'client_id',
            'user_id': 'user_id',
            'variable_id': 'variable_id',
            'default_value': 'default_value',
            'reminder_start_time': 'reminder_start_time',
            'reminder_end_time': 'reminder_end_time',
            'reminder_sound': 'reminder_sound',
            'reminder_frequency': 'reminder_frequency',
            'pop_up': 'pop_up',
            'sms': 'sms',
            'email': 'email',
            'notification_bar': 'notification_bar',
            'last_reminded': 'last_reminded',
            'last_tracked': 'last_tracked',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._client_id = None
        self._user_id = None
        self._variable_id = None
        self._default_value = None
        self._reminder_start_time = None
        self._reminder_end_time = None
        self._reminder_sound = None
        self._reminder_frequency = None
        self._pop_up = None
        self._sms = None
        self._email = None
        self._notification_bar = None
        self._last_reminded = None
        self._last_tracked = None
        self._created_at = None
        self._updated_at = None

    @property
    def id(self):
        """
        Gets the id of this TrackingReminder.
        id

        :return: The id of this TrackingReminder.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TrackingReminder.
        id

        :param id: The id of this TrackingReminder.
        :type: int
        """
        self._id = id

    @property
    def client_id(self):
        """
        Gets the client_id of this TrackingReminder.
        client_id

        :return: The client_id of this TrackingReminder.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this TrackingReminder.
        client_id

        :param client_id: The client_id of this TrackingReminder.
        :type: str
        """
        self._client_id = client_id

    @property
    def user_id(self):
        """
        Gets the user_id of this TrackingReminder.
        ID of User

        :return: The user_id of this TrackingReminder.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this TrackingReminder.
        ID of User

        :param user_id: The user_id of this TrackingReminder.
        :type: int
        """
        self._user_id = user_id

    @property
    def variable_id(self):
        """
        Gets the variable_id of this TrackingReminder.
        Id for the variable to be tracked

        :return: The variable_id of this TrackingReminder.
        :rtype: int
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """
        Sets the variable_id of this TrackingReminder.
        Id for the variable to be tracked

        :param variable_id: The variable_id of this TrackingReminder.
        :type: int
        """
        self._variable_id = variable_id

    @property
    def default_value(self):
        """
        Gets the default_value of this TrackingReminder.
        Default value to use for the measurement when tracking

        :return: The default_value of this TrackingReminder.
        :rtype: float
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """
        Sets the default_value of this TrackingReminder.
        Default value to use for the measurement when tracking

        :param default_value: The default_value of this TrackingReminder.
        :type: float
        """
        self._default_value = default_value

    @property
    def reminder_start_time(self):
        """
        Gets the reminder_start_time of this TrackingReminder.
        Earliest time of day at which reminders should appear

        :return: The reminder_start_time of this TrackingReminder.
        :rtype: str
        """
        return self._reminder_start_time

    @reminder_start_time.setter
    def reminder_start_time(self, reminder_start_time):
        """
        Sets the reminder_start_time of this TrackingReminder.
        Earliest time of day at which reminders should appear

        :param reminder_start_time: The reminder_start_time of this TrackingReminder.
        :type: str
        """
        self._reminder_start_time = reminder_start_time

    @property
    def reminder_end_time(self):
        """
        Gets the reminder_end_time of this TrackingReminder.
        Latest time of day at which reminders should appear

        :return: The reminder_end_time of this TrackingReminder.
        :rtype: str
        """
        return self._reminder_end_time

    @reminder_end_time.setter
    def reminder_end_time(self, reminder_end_time):
        """
        Sets the reminder_end_time of this TrackingReminder.
        Latest time of day at which reminders should appear

        :param reminder_end_time: The reminder_end_time of this TrackingReminder.
        :type: str
        """
        self._reminder_end_time = reminder_end_time

    @property
    def reminder_sound(self):
        """
        Gets the reminder_sound of this TrackingReminder.
        String identifier for the sound to accompany the reminder

        :return: The reminder_sound of this TrackingReminder.
        :rtype: str
        """
        return self._reminder_sound

    @reminder_sound.setter
    def reminder_sound(self, reminder_sound):
        """
        Sets the reminder_sound of this TrackingReminder.
        String identifier for the sound to accompany the reminder

        :param reminder_sound: The reminder_sound of this TrackingReminder.
        :type: str
        """
        self._reminder_sound = reminder_sound

    @property
    def reminder_frequency(self):
        """
        Gets the reminder_frequency of this TrackingReminder.
        Number of seconds between one reminder and the next

        :return: The reminder_frequency of this TrackingReminder.
        :rtype: int
        """
        return self._reminder_frequency

    @reminder_frequency.setter
    def reminder_frequency(self, reminder_frequency):
        """
        Sets the reminder_frequency of this TrackingReminder.
        Number of seconds between one reminder and the next

        :param reminder_frequency: The reminder_frequency of this TrackingReminder.
        :type: int
        """
        self._reminder_frequency = reminder_frequency

    @property
    def pop_up(self):
        """
        Gets the pop_up of this TrackingReminder.
        True if the reminders should appear as a popup notification

        :return: The pop_up of this TrackingReminder.
        :rtype: bool
        """
        return self._pop_up

    @pop_up.setter
    def pop_up(self, pop_up):
        """
        Sets the pop_up of this TrackingReminder.
        True if the reminders should appear as a popup notification

        :param pop_up: The pop_up of this TrackingReminder.
        :type: bool
        """
        self._pop_up = pop_up

    @property
    def sms(self):
        """
        Gets the sms of this TrackingReminder.
        True if the reminders should be delivered via SMS

        :return: The sms of this TrackingReminder.
        :rtype: bool
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """
        Sets the sms of this TrackingReminder.
        True if the reminders should be delivered via SMS

        :param sms: The sms of this TrackingReminder.
        :type: bool
        """
        self._sms = sms

    @property
    def email(self):
        """
        Gets the email of this TrackingReminder.
        True if the reminders should be delivered via email

        :return: The email of this TrackingReminder.
        :rtype: bool
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this TrackingReminder.
        True if the reminders should be delivered via email

        :param email: The email of this TrackingReminder.
        :type: bool
        """
        self._email = email

    @property
    def notification_bar(self):
        """
        Gets the notification_bar of this TrackingReminder.
        True if the reminders should appear in the notification bar

        :return: The notification_bar of this TrackingReminder.
        :rtype: bool
        """
        return self._notification_bar

    @notification_bar.setter
    def notification_bar(self, notification_bar):
        """
        Sets the notification_bar of this TrackingReminder.
        True if the reminders should appear in the notification bar

        :param notification_bar: The notification_bar of this TrackingReminder.
        :type: bool
        """
        self._notification_bar = notification_bar

    @property
    def last_reminded(self):
        """
        Gets the last_reminded of this TrackingReminder.
        ISO 8601 timestamp for the last time a reminder was sent

        :return: The last_reminded of this TrackingReminder.
        :rtype: datetime
        """
        return self._last_reminded

    @last_reminded.setter
    def last_reminded(self, last_reminded):
        """
        Sets the last_reminded of this TrackingReminder.
        ISO 8601 timestamp for the last time a reminder was sent

        :param last_reminded: The last_reminded of this TrackingReminder.
        :type: datetime
        """
        self._last_reminded = last_reminded

    @property
    def last_tracked(self):
        """
        Gets the last_tracked of this TrackingReminder.
        ISO 8601 timestamp for the last time a measurement was received for this user and variable

        :return: The last_tracked of this TrackingReminder.
        :rtype: datetime
        """
        return self._last_tracked

    @last_tracked.setter
    def last_tracked(self, last_tracked):
        """
        Sets the last_tracked of this TrackingReminder.
        ISO 8601 timestamp for the last time a measurement was received for this user and variable

        :param last_tracked: The last_tracked of this TrackingReminder.
        :type: datetime
        """
        self._last_tracked = last_tracked

    @property
    def created_at(self):
        """
        Gets the created_at of this TrackingReminder.
        When the record was first created. Use ISO 8601 datetime format

        :return: The created_at of this TrackingReminder.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this TrackingReminder.
        When the record was first created. Use ISO 8601 datetime format

        :param created_at: The created_at of this TrackingReminder.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this TrackingReminder.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :return: The updated_at of this TrackingReminder.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this TrackingReminder.
        When the record in the database was last updated. Use ISO 8601 datetime format

        :param updated_at: The updated_at of this TrackingReminder.
        :type: datetime
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

