#!/usr/bin/env python
# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""
from pprint import pformat
from six import iteritems


class VariableUserSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Swagger model

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user': 'int',
            'variable': 'str',
            'duration_of_action': 'int',
            'filling_value': 'int',
            'join_with': 'str',
            'maximum_value': 'float',
            'minimum_value': 'float',
            'name': 'str',
            'onset_delay': 'int',
            'unit': 'str'
        }

        self.attribute_map = {
            'user': 'user',
            'variable': 'variable',
            'duration_of_action': 'durationOfAction',
            'filling_value': 'fillingValue',
            'join_with': 'joinWith',
            'maximum_value': 'maximumValue',
            'minimum_value': 'minimumValue',
            'name': 'name',
            'onset_delay': 'onsetDelay',
            'unit': 'unit'
        }

        self._user = None    # User ID
        self._variable = None    # Variable DISPLAY name
        self._duration_of_action = None    # Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
        self._filling_value = None    # fillingValue
        self._join_with = None    # joinWith
        self._maximum_value = None    # maximumValue
        self._minimum_value = None    # minimumValue
        self._name = None    # name
        self._onset_delay = None    # onsetDelay
        self._unit = None    # unit

    @property
    def user(self):
        return self._user

    @user.setter
    def user(self, user):
        self._user = user

    @property
    def variable(self):
        return self._variable

    @variable.setter
    def variable(self, variable):
        self._variable = variable

    @property
    def duration_of_action(self):
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        self._duration_of_action = duration_of_action

    @property
    def filling_value(self):
        return self._filling_value

    @filling_value.setter
    def filling_value(self, filling_value):
        self._filling_value = filling_value

    @property
    def join_with(self):
        return self._join_with

    @join_with.setter
    def join_with(self, join_with):
        self._join_with = join_with

    @property
    def maximum_value(self):
        return self._maximum_value

    @maximum_value.setter
    def maximum_value(self, maximum_value):
        self._maximum_value = maximum_value

    @property
    def minimum_value(self):
        return self._minimum_value

    @minimum_value.setter
    def minimum_value(self, minimum_value):
        self._minimum_value = minimum_value

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, name):
        self._name = name

    @property
    def onset_delay(self):
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        self._onset_delay = onset_delay

    @property
    def unit(self):
        return self._unit

    @unit.setter
    def unit(self, unit):
        self._unit = unit

    def to_dict(self):
        """
        Return model properties dict
        """
        result = {}

        for name, prop in iteritems(self.__dict__):
            if name == "attribute_map" or name == "swagger_types":
                continue
            if isinstance(prop, list):
                result[name[1:]] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    prop
                ))
            elif hasattr(prop, "to_dict"):
                result[name[1:]] = prop.to_dict()
            else:
                result[name[1:]] = prop

        return result

    def to_str(self):
        """
        Return model properties str
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
