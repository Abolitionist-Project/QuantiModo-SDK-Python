# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MeasurementSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MeasurementSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'measurements': 'list[ValueObject]',
            'name': 'str',
            'source': 'str',
            'category': 'str',
            'combination_operation': 'str',
            'unit': 'str'
        }

        self.attribute_map = {
            'measurements': 'measurements',
            'name': 'name',
            'source': 'source',
            'category': 'category',
            'combination_operation': 'combinationOperation',
            'unit': 'unit'
        }

        self._measurements = None
        self._name = None
        self._source = None
        self._category = None
        self._combination_operation = None
        self._unit = None

    @property
    def measurements(self):
        """
        Gets the measurements of this MeasurementSet.
        Array of timestamps, values, and optional notes

        :return: The measurements of this MeasurementSet.
        :rtype: list[ValueObject]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """
        Sets the measurements of this MeasurementSet.
        Array of timestamps, values, and optional notes

        :param measurements: The measurements of this MeasurementSet.
        :type: list[ValueObject]
        """
        self._measurements = measurements

    @property
    def name(self):
        """
        Gets the name of this MeasurementSet.
        ORIGINAL name of the variable for which we are creating the measurement records

        :return: The name of this MeasurementSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MeasurementSet.
        ORIGINAL name of the variable for which we are creating the measurement records

        :param name: The name of this MeasurementSet.
        :type: str
        """
        self._name = name

    @property
    def source(self):
        """
        Gets the source of this MeasurementSet.
        Name of the application or device used to record the measurement values

        :return: The source of this MeasurementSet.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this MeasurementSet.
        Name of the application or device used to record the measurement values

        :param source: The source of this MeasurementSet.
        :type: str
        """
        self._source = source

    @property
    def category(self):
        """
        Gets the category of this MeasurementSet.
        Variable category name

        :return: The category of this MeasurementSet.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this MeasurementSet.
        Variable category name

        :param category: The category of this MeasurementSet.
        :type: str
        """
        self._category = category

    @property
    def combination_operation(self):
        """
        Gets the combination_operation of this MeasurementSet.
        Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\"

        :return: The combination_operation of this MeasurementSet.
        :rtype: str
        """
        return self._combination_operation

    @combination_operation.setter
    def combination_operation(self, combination_operation):
        """
        Sets the combination_operation of this MeasurementSet.
        Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\"

        :param combination_operation: The combination_operation of this MeasurementSet.
        :type: str
        """
        allowed_values = ["MEAN", "SUM"]
        if combination_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `combination_operation`, must be one of {0}"
                .format(allowed_values)
            )
        self._combination_operation = combination_operation

    @property
    def unit(self):
        """
        Gets the unit of this MeasurementSet.
        Unit of measurement

        :return: The unit of this MeasurementSet.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """
        Sets the unit of this MeasurementSet.
        Unit of measurement

        :param unit: The unit of this MeasurementSet.
        :type: str
        """
        self._unit = unit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
