# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class VariableUserSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        VariableUserSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'user_id': 'int',
            'variable_id': 'int',
            'source_id': 'int',
            'timestamp': 'int',
            'earliest_measurement_time': 'int',
            'latest_measurement_time': 'int',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'variable_id': 'variable_id',
            'source_id': 'source_id',
            'timestamp': 'timestamp',
            'earliest_measurement_time': 'earliest_measurement_time',
            'latest_measurement_time': 'latest_measurement_time',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._user_id = None
        self._variable_id = None
        self._source_id = None
        self._timestamp = None
        self._earliest_measurement_time = None
        self._latest_measurement_time = None
        self._created_at = None
        self._updated_at = None

    @property
    def user_id(self):
        """
        Gets the user_id of this VariableUserSource.
        ID of User

        :return: The user_id of this VariableUserSource.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this VariableUserSource.
        ID of User

        :param user_id: The user_id of this VariableUserSource.
        :type: int
        """
        self._user_id = user_id

    @property
    def variable_id(self):
        """
        Gets the variable_id of this VariableUserSource.
        ID of variable

        :return: The variable_id of this VariableUserSource.
        :rtype: int
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """
        Sets the variable_id of this VariableUserSource.
        ID of variable

        :param variable_id: The variable_id of this VariableUserSource.
        :type: int
        """
        self._variable_id = variable_id

    @property
    def source_id(self):
        """
        Gets the source_id of this VariableUserSource.
        ID of source

        :return: The source_id of this VariableUserSource.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this VariableUserSource.
        ID of source

        :param source_id: The source_id of this VariableUserSource.
        :type: int
        """
        self._source_id = source_id

    @property
    def timestamp(self):
        """
        Gets the timestamp of this VariableUserSource.
        Time that this measurement occurred Uses epoch minute (epoch time divided by 60)

        :return: The timestamp of this VariableUserSource.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this VariableUserSource.
        Time that this measurement occurred Uses epoch minute (epoch time divided by 60)

        :param timestamp: The timestamp of this VariableUserSource.
        :type: int
        """
        self._timestamp = timestamp

    @property
    def earliest_measurement_time(self):
        """
        Gets the earliest_measurement_time of this VariableUserSource.
        Earliest measurement time

        :return: The earliest_measurement_time of this VariableUserSource.
        :rtype: int
        """
        return self._earliest_measurement_time

    @earliest_measurement_time.setter
    def earliest_measurement_time(self, earliest_measurement_time):
        """
        Sets the earliest_measurement_time of this VariableUserSource.
        Earliest measurement time

        :param earliest_measurement_time: The earliest_measurement_time of this VariableUserSource.
        :type: int
        """
        self._earliest_measurement_time = earliest_measurement_time

    @property
    def latest_measurement_time(self):
        """
        Gets the latest_measurement_time of this VariableUserSource.
        Latest measurement time

        :return: The latest_measurement_time of this VariableUserSource.
        :rtype: int
        """
        return self._latest_measurement_time

    @latest_measurement_time.setter
    def latest_measurement_time(self, latest_measurement_time):
        """
        Sets the latest_measurement_time of this VariableUserSource.
        Latest measurement time

        :param latest_measurement_time: The latest_measurement_time of this VariableUserSource.
        :type: int
        """
        self._latest_measurement_time = latest_measurement_time

    @property
    def created_at(self):
        """
        Gets the created_at of this VariableUserSource.
        created_at

        :return: The created_at of this VariableUserSource.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this VariableUserSource.
        created_at

        :param created_at: The created_at of this VariableUserSource.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this VariableUserSource.
        updated_at

        :return: The updated_at of this VariableUserSource.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this VariableUserSource.
        updated_at

        :param updated_at: The updated_at of this VariableUserSource.
        :type: datetime
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
