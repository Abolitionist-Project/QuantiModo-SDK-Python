# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class MeasurementExport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        MeasurementExport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'user_id': 'int',
            'status': 'str',
            'error_message': 'str',
            'created_at': 'datetime',
            'updated_at': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'status': 'status',
            'error_message': 'error_message',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._user_id = None
        self._status = None
        self._error_message = None
        self._created_at = None
        self._updated_at = None

    @property
    def id(self):
        """
        Gets the id of this MeasurementExport.
        id

        :return: The id of this MeasurementExport.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MeasurementExport.
        id

        :param id: The id of this MeasurementExport.
        :type: int
        """
        self._id = id

    @property
    def user_id(self):
        """
        Gets the user_id of this MeasurementExport.
        ID of User

        :return: The user_id of this MeasurementExport.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this MeasurementExport.
        ID of User

        :param user_id: The user_id of this MeasurementExport.
        :type: int
        """
        self._user_id = user_id

    @property
    def status(self):
        """
        Gets the status of this MeasurementExport.
        Status of Measurement Export

        :return: The status of this MeasurementExport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this MeasurementExport.
        Status of Measurement Export

        :param status: The status of this MeasurementExport.
        :type: str
        """
        self._status = status

    @property
    def error_message(self):
        """
        Gets the error_message of this MeasurementExport.
        Error message

        :return: The error_message of this MeasurementExport.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this MeasurementExport.
        Error message

        :param error_message: The error_message of this MeasurementExport.
        :type: str
        """
        self._error_message = error_message

    @property
    def created_at(self):
        """
        Gets the created_at of this MeasurementExport.
        created_at

        :return: The created_at of this MeasurementExport.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this MeasurementExport.
        created_at

        :param created_at: The created_at of this MeasurementExport.
        :type: datetime
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this MeasurementExport.
        updated_at

        :return: The updated_at of this MeasurementExport.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this MeasurementExport.
        updated_at

        :param updated_at: The updated_at of this MeasurementExport.
        :type: datetime
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
