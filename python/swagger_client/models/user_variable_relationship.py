# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserVariableRelationship(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, confidence_level=None, confidence_score=None, direction=None, duration_of_action=None, error_message=None, onset_delay=None, outcome_variable_id=None, predictor_variable_id=None, predictor_unit_id=None, sinn_rank=None, strength_level=None, strength_score=None, user_id=None, vote=None, value_predicting_high_outcome=None, value_predicting_low_outcome=None):
        """
        UserVariableRelationship - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'confidence_level': 'str',
            'confidence_score': 'float',
            'direction': 'str',
            'duration_of_action': 'int',
            'error_message': 'str',
            'onset_delay': 'int',
            'outcome_variable_id': 'int',
            'predictor_variable_id': 'int',
            'predictor_unit_id': 'int',
            'sinn_rank': 'float',
            'strength_level': 'str',
            'strength_score': 'float',
            'user_id': 'int',
            'vote': 'str',
            'value_predicting_high_outcome': 'float',
            'value_predicting_low_outcome': 'float'
        }

        self.attribute_map = {
            'id': 'id',
            'confidence_level': 'confidence_level',
            'confidence_score': 'confidence_score',
            'direction': 'direction',
            'duration_of_action': 'duration_of_action',
            'error_message': 'error_message',
            'onset_delay': 'onset_delay',
            'outcome_variable_id': 'outcome_variableId',
            'predictor_variable_id': 'predictor_variableId',
            'predictor_unit_id': 'predictor_unit_id',
            'sinn_rank': 'sinn_rank',
            'strength_level': 'strength_level',
            'strength_score': 'strength_score',
            'user_id': 'userId',
            'vote': 'vote',
            'value_predicting_high_outcome': 'value_predicting_high_outcome',
            'value_predicting_low_outcome': 'value_predicting_low_outcome'
        }

        self._id = id
        self._confidence_level = confidence_level
        self._confidence_score = confidence_score
        self._direction = direction
        self._duration_of_action = duration_of_action
        self._error_message = error_message
        self._onset_delay = onset_delay
        self._outcome_variable_id = outcome_variable_id
        self._predictor_variable_id = predictor_variable_id
        self._predictor_unit_id = predictor_unit_id
        self._sinn_rank = sinn_rank
        self._strength_level = strength_level
        self._strength_score = strength_score
        self._user_id = user_id
        self._vote = vote
        self._value_predicting_high_outcome = value_predicting_high_outcome
        self._value_predicting_low_outcome = value_predicting_low_outcome


    @property
    def id(self):
        """
        Gets the id of this UserVariableRelationship.
        id

        :return: The id of this UserVariableRelationship.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UserVariableRelationship.
        id

        :param id: The id of this UserVariableRelationship.
        :type: int
        """

        self._id = id

    @property
    def confidence_level(self):
        """
        Gets the confidence_level of this UserVariableRelationship.
        Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :return: The confidence_level of this UserVariableRelationship.
        :rtype: str
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level):
        """
        Sets the confidence_level of this UserVariableRelationship.
        Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :param confidence_level: The confidence_level of this UserVariableRelationship.
        :type: str
        """
        if confidence_level is None:
            raise ValueError("Invalid value for `confidence_level`, must not be `None`")

        self._confidence_level = confidence_level

    @property
    def confidence_score(self):
        """
        Gets the confidence_score of this UserVariableRelationship.
        A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :return: The confidence_score of this UserVariableRelationship.
        :rtype: float
        """
        return self._confidence_score

    @confidence_score.setter
    def confidence_score(self, confidence_score):
        """
        Sets the confidence_score of this UserVariableRelationship.
        A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors

        :param confidence_score: The confidence_score of this UserVariableRelationship.
        :type: float
        """
        if confidence_score is None:
            raise ValueError("Invalid value for `confidence_score`, must not be `None`")

        self._confidence_score = confidence_score

    @property
    def direction(self):
        """
        Gets the direction of this UserVariableRelationship.
        Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.

        :return: The direction of this UserVariableRelationship.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this UserVariableRelationship.
        Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.

        :param direction: The direction of this UserVariableRelationship.
        :type: str
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")

        self._direction = direction

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this UserVariableRelationship.
        The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.

        :return: The duration_of_action of this UserVariableRelationship.
        :rtype: int
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this UserVariableRelationship.
        The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.

        :param duration_of_action: The duration_of_action of this UserVariableRelationship.
        :type: int
        """
        if duration_of_action is None:
            raise ValueError("Invalid value for `duration_of_action`, must not be `None`")

        self._duration_of_action = duration_of_action

    @property
    def error_message(self):
        """
        Gets the error_message of this UserVariableRelationship.
        error_message

        :return: The error_message of this UserVariableRelationship.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this UserVariableRelationship.
        error_message

        :param error_message: The error_message of this UserVariableRelationship.
        :type: str
        """

        self._error_message = error_message

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this UserVariableRelationship.
        The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.

        :return: The onset_delay of this UserVariableRelationship.
        :rtype: int
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this UserVariableRelationship.
        The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.

        :param onset_delay: The onset_delay of this UserVariableRelationship.
        :type: int
        """

        self._onset_delay = onset_delay

    @property
    def outcome_variable_id(self):
        """
        Gets the outcome_variable_id of this UserVariableRelationship.
        Variable ID for the outcome variable

        :return: The outcome_variable_id of this UserVariableRelationship.
        :rtype: int
        """
        return self._outcome_variable_id

    @outcome_variable_id.setter
    def outcome_variable_id(self, outcome_variable_id):
        """
        Sets the outcome_variable_id of this UserVariableRelationship.
        Variable ID for the outcome variable

        :param outcome_variable_id: The outcome_variable_id of this UserVariableRelationship.
        :type: int
        """
        if outcome_variable_id is None:
            raise ValueError("Invalid value for `outcome_variable_id`, must not be `None`")

        self._outcome_variable_id = outcome_variable_id

    @property
    def predictor_variable_id(self):
        """
        Gets the predictor_variable_id of this UserVariableRelationship.
        Variable ID for the predictor variable

        :return: The predictor_variable_id of this UserVariableRelationship.
        :rtype: int
        """
        return self._predictor_variable_id

    @predictor_variable_id.setter
    def predictor_variable_id(self, predictor_variable_id):
        """
        Sets the predictor_variable_id of this UserVariableRelationship.
        Variable ID for the predictor variable

        :param predictor_variable_id: The predictor_variable_id of this UserVariableRelationship.
        :type: int
        """
        if predictor_variable_id is None:
            raise ValueError("Invalid value for `predictor_variable_id`, must not be `None`")

        self._predictor_variable_id = predictor_variable_id

    @property
    def predictor_unit_id(self):
        """
        Gets the predictor_unit_id of this UserVariableRelationship.
        ID for default unit of the predictor variable

        :return: The predictor_unit_id of this UserVariableRelationship.
        :rtype: int
        """
        return self._predictor_unit_id

    @predictor_unit_id.setter
    def predictor_unit_id(self, predictor_unit_id):
        """
        Sets the predictor_unit_id of this UserVariableRelationship.
        ID for default unit of the predictor variable

        :param predictor_unit_id: The predictor_unit_id of this UserVariableRelationship.
        :type: int
        """
        if predictor_unit_id is None:
            raise ValueError("Invalid value for `predictor_unit_id`, must not be `None`")

        self._predictor_unit_id = predictor_unit_id

    @property
    def sinn_rank(self):
        """
        Gets the sinn_rank of this UserVariableRelationship.
        A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.

        :return: The sinn_rank of this UserVariableRelationship.
        :rtype: float
        """
        return self._sinn_rank

    @sinn_rank.setter
    def sinn_rank(self, sinn_rank):
        """
        Sets the sinn_rank of this UserVariableRelationship.
        A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.

        :param sinn_rank: The sinn_rank of this UserVariableRelationship.
        :type: float
        """
        if sinn_rank is None:
            raise ValueError("Invalid value for `sinn_rank`, must not be `None`")

        self._sinn_rank = sinn_rank

    @property
    def strength_level(self):
        """
        Gets the strength_level of this UserVariableRelationship.
        Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.

        :return: The strength_level of this UserVariableRelationship.
        :rtype: str
        """
        return self._strength_level

    @strength_level.setter
    def strength_level(self, strength_level):
        """
        Sets the strength_level of this UserVariableRelationship.
        Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.

        :param strength_level: The strength_level of this UserVariableRelationship.
        :type: str
        """
        if strength_level is None:
            raise ValueError("Invalid value for `strength_level`, must not be `None`")

        self._strength_level = strength_level

    @property
    def strength_score(self):
        """
        Gets the strength_score of this UserVariableRelationship.
        A value represented to the size of the effect which the predictor appears to have on the outcome.

        :return: The strength_score of this UserVariableRelationship.
        :rtype: float
        """
        return self._strength_score

    @strength_score.setter
    def strength_score(self, strength_score):
        """
        Sets the strength_score of this UserVariableRelationship.
        A value represented to the size of the effect which the predictor appears to have on the outcome.

        :param strength_score: The strength_score of this UserVariableRelationship.
        :type: float
        """
        if strength_score is None:
            raise ValueError("Invalid value for `strength_score`, must not be `None`")

        self._strength_score = strength_score

    @property
    def user_id(self):
        """
        Gets the user_id of this UserVariableRelationship.
        userId

        :return: The user_id of this UserVariableRelationship.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this UserVariableRelationship.
        userId

        :param user_id: The user_id of this UserVariableRelationship.
        :type: int
        """

        self._user_id = user_id

    @property
    def vote(self):
        """
        Gets the vote of this UserVariableRelationship.
        vote

        :return: The vote of this UserVariableRelationship.
        :rtype: str
        """
        return self._vote

    @vote.setter
    def vote(self, vote):
        """
        Sets the vote of this UserVariableRelationship.
        vote

        :param vote: The vote of this UserVariableRelationship.
        :type: str
        """

        self._vote = vote

    @property
    def value_predicting_high_outcome(self):
        """
        Gets the value_predicting_high_outcome of this UserVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes an above average outcome value

        :return: The value_predicting_high_outcome of this UserVariableRelationship.
        :rtype: float
        """
        return self._value_predicting_high_outcome

    @value_predicting_high_outcome.setter
    def value_predicting_high_outcome(self, value_predicting_high_outcome):
        """
        Sets the value_predicting_high_outcome of this UserVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes an above average outcome value

        :param value_predicting_high_outcome: The value_predicting_high_outcome of this UserVariableRelationship.
        :type: float
        """
        if value_predicting_high_outcome is None:
            raise ValueError("Invalid value for `value_predicting_high_outcome`, must not be `None`")

        self._value_predicting_high_outcome = value_predicting_high_outcome

    @property
    def value_predicting_low_outcome(self):
        """
        Gets the value_predicting_low_outcome of this UserVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes a below average outcome value

        :return: The value_predicting_low_outcome of this UserVariableRelationship.
        :rtype: float
        """
        return self._value_predicting_low_outcome

    @value_predicting_low_outcome.setter
    def value_predicting_low_outcome(self, value_predicting_low_outcome):
        """
        Sets the value_predicting_low_outcome of this UserVariableRelationship.
        Value for the predictor variable (in it's default unit) which typically precedes a below average outcome value

        :param value_predicting_low_outcome: The value_predicting_low_outcome of this UserVariableRelationship.
        :type: float
        """
        if value_predicting_low_outcome is None:
            raise ValueError("Invalid value for `value_predicting_low_outcome`, must not be `None`")

        self._value_predicting_low_outcome = value_predicting_low_outcome

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
