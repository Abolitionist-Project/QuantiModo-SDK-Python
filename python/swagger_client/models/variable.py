# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Variable(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, category=None, unit_abbreviated_name=None, abbreviated_unit_id=None, sources=None, minimum_allowed_value=None, maximum_allowed_value=None, combination_operation=None, filling_value=None, join_with=None, joined_variables=None, parent=None, sub_variables=None, onset_delay=None, duration_of_action=None, earliest_measurement_time=None, latest_measurement_time=None, updated=None, cause_only=None, number_of_correlations=None, outcome=None, raw_measurements_at_last_analysis=None, number_of_raw_measurements=None, last_unit=None, last_value=None, most_common_value=None, most_common_unit=None, last_source=None, image_url=None, ion_icon=None):
        """
        Variable - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'category': 'str',
            'unit_abbreviated_name': 'str',
            'abbreviated_unit_id': 'int',
            'sources': 'str',
            'minimum_allowed_value': 'float',
            'maximum_allowed_value': 'float',
            'combination_operation': 'str',
            'filling_value': 'float',
            'join_with': 'str',
            'joined_variables': 'list[Variable]',
            'parent': 'int',
            'sub_variables': 'list[Variable]',
            'onset_delay': 'int',
            'duration_of_action': 'int',
            'earliest_measurement_time': 'int',
            'latest_measurement_time': 'int',
            'updated': 'int',
            'cause_only': 'int',
            'number_of_correlations': 'int',
            'outcome': 'int',
            'raw_measurements_at_last_analysis': 'int',
            'number_of_raw_measurements': 'int',
            'last_unit': 'str',
            'last_value': 'int',
            'most_common_value': 'int',
            'most_common_unit': 'str',
            'last_source': 'int',
            'image_url': 'str',
            'ion_icon': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'category': 'category',
            'unit_abbreviated_name': 'unitAbbreviatedName',
            'abbreviated_unit_id': 'abbreviatedUnitId',
            'sources': 'sources',
            'minimum_allowed_value': 'minimumAllowedValue',
            'maximum_allowed_value': 'maximumAllowedValue',
            'combination_operation': 'combinationOperation',
            'filling_value': 'fillingValue',
            'join_with': 'joinWith',
            'joined_variables': 'joinedVariables',
            'parent': 'parent',
            'sub_variables': 'subVariables',
            'onset_delay': 'onsetDelay',
            'duration_of_action': 'durationOfAction',
            'earliest_measurement_time': 'earliestMeasurementTime',
            'latest_measurement_time': 'latestMeasurementTime',
            'updated': 'updated',
            'cause_only': 'causeOnly',
            'number_of_correlations': 'numberOfCorrelations',
            'outcome': 'outcome',
            'raw_measurements_at_last_analysis': 'rawMeasurementsAtLastAnalysis',
            'number_of_raw_measurements': 'numberOfRawMeasurements',
            'last_unit': 'lastUnit',
            'last_value': 'lastValue',
            'most_common_value': 'mostCommonValue',
            'most_common_unit': 'mostCommonUnit',
            'last_source': 'lastSource',
            'image_url': 'imageUrl',
            'ion_icon': 'ionIcon'
        }

        self._id = id
        self._name = name
        self._category = category
        self._unit_abbreviated_name = unit_abbreviated_name
        self._abbreviated_unit_id = abbreviated_unit_id
        self._sources = sources
        self._minimum_allowed_value = minimum_allowed_value
        self._maximum_allowed_value = maximum_allowed_value
        self._combination_operation = combination_operation
        self._filling_value = filling_value
        self._join_with = join_with
        self._joined_variables = joined_variables
        self._parent = parent
        self._sub_variables = sub_variables
        self._onset_delay = onset_delay
        self._duration_of_action = duration_of_action
        self._earliest_measurement_time = earliest_measurement_time
        self._latest_measurement_time = latest_measurement_time
        self._updated = updated
        self._cause_only = cause_only
        self._number_of_correlations = number_of_correlations
        self._outcome = outcome
        self._raw_measurements_at_last_analysis = raw_measurements_at_last_analysis
        self._number_of_raw_measurements = number_of_raw_measurements
        self._last_unit = last_unit
        self._last_value = last_value
        self._most_common_value = most_common_value
        self._most_common_unit = most_common_unit
        self._last_source = last_source
        self._image_url = image_url
        self._ion_icon = ion_icon


    @property
    def id(self):
        """
        Gets the id of this Variable.
        Variable ID

        :return: The id of this Variable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Variable.
        Variable ID

        :param id: The id of this Variable.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Variable.
        User-defined variable display name.

        :return: The name of this Variable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Variable.
        User-defined variable display name.

        :param name: The name of this Variable.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def category(self):
        """
        Gets the category of this Variable.
        Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.

        :return: The category of this Variable.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Variable.
        Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.

        :param category: The category of this Variable.
        :type: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def unit_abbreviated_name(self):
        """
        Gets the unit_abbreviated_name of this Variable.
        Abbreviated name of the default unit for the variable

        :return: The unit_abbreviated_name of this Variable.
        :rtype: str
        """
        return self._unit_abbreviated_name

    @unit_abbreviated_name.setter
    def unit_abbreviated_name(self, unit_abbreviated_name):
        """
        Sets the unit_abbreviated_name of this Variable.
        Abbreviated name of the default unit for the variable

        :param unit_abbreviated_name: The unit_abbreviated_name of this Variable.
        :type: str
        """
        if unit_abbreviated_name is None:
            raise ValueError("Invalid value for `unit_abbreviated_name`, must not be `None`")

        self._unit_abbreviated_name = unit_abbreviated_name

    @property
    def abbreviated_unit_id(self):
        """
        Gets the abbreviated_unit_id of this Variable.
        Id of the default unit for the variable

        :return: The abbreviated_unit_id of this Variable.
        :rtype: int
        """
        return self._abbreviated_unit_id

    @abbreviated_unit_id.setter
    def abbreviated_unit_id(self, abbreviated_unit_id):
        """
        Sets the abbreviated_unit_id of this Variable.
        Id of the default unit for the variable

        :param abbreviated_unit_id: The abbreviated_unit_id of this Variable.
        :type: int
        """
        if abbreviated_unit_id is None:
            raise ValueError("Invalid value for `abbreviated_unit_id`, must not be `None`")

        self._abbreviated_unit_id = abbreviated_unit_id

    @property
    def sources(self):
        """
        Gets the sources of this Variable.
        Comma-separated list of source names to limit variables to those sources

        :return: The sources of this Variable.
        :rtype: str
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """
        Sets the sources of this Variable.
        Comma-separated list of source names to limit variables to those sources

        :param sources: The sources of this Variable.
        :type: str
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def minimum_allowed_value(self):
        """
        Gets the minimum_allowed_value of this Variable.
        The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.

        :return: The minimum_allowed_value of this Variable.
        :rtype: float
        """
        return self._minimum_allowed_value

    @minimum_allowed_value.setter
    def minimum_allowed_value(self, minimum_allowed_value):
        """
        Sets the minimum_allowed_value of this Variable.
        The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.

        :param minimum_allowed_value: The minimum_allowed_value of this Variable.
        :type: float
        """
        if minimum_allowed_value is None:
            raise ValueError("Invalid value for `minimum_allowed_value`, must not be `None`")

        self._minimum_allowed_value = minimum_allowed_value

    @property
    def maximum_allowed_value(self):
        """
        Gets the maximum_allowed_value of this Variable.
        The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.

        :return: The maximum_allowed_value of this Variable.
        :rtype: float
        """
        return self._maximum_allowed_value

    @maximum_allowed_value.setter
    def maximum_allowed_value(self, maximum_allowed_value):
        """
        Sets the maximum_allowed_value of this Variable.
        The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.

        :param maximum_allowed_value: The maximum_allowed_value of this Variable.
        :type: float
        """
        if maximum_allowed_value is None:
            raise ValueError("Invalid value for `maximum_allowed_value`, must not be `None`")

        self._maximum_allowed_value = maximum_allowed_value

    @property
    def combination_operation(self):
        """
        Gets the combination_operation of this Variable.
        Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.

        :return: The combination_operation of this Variable.
        :rtype: str
        """
        return self._combination_operation

    @combination_operation.setter
    def combination_operation(self, combination_operation):
        """
        Sets the combination_operation of this Variable.
        Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.

        :param combination_operation: The combination_operation of this Variable.
        :type: str
        """
        allowed_values = ["MEAN", "SUM"]
        if combination_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `combination_operation` ({0}), must be one of {1}"
                .format(combination_operation, allowed_values)
            )

        self._combination_operation = combination_operation

    @property
    def filling_value(self):
        """
        Gets the filling_value of this Variable.
        When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.

        :return: The filling_value of this Variable.
        :rtype: float
        """
        return self._filling_value

    @filling_value.setter
    def filling_value(self, filling_value):
        """
        Sets the filling_value of this Variable.
        When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.

        :param filling_value: The filling_value of this Variable.
        :type: float
        """
        if filling_value is None:
            raise ValueError("Invalid value for `filling_value`, must not be `None`")

        self._filling_value = filling_value

    @property
    def join_with(self):
        """
        Gets the join_with of this Variable.
        The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.

        :return: The join_with of this Variable.
        :rtype: str
        """
        return self._join_with

    @join_with.setter
    def join_with(self, join_with):
        """
        Sets the join_with of this Variable.
        The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.

        :param join_with: The join_with of this Variable.
        :type: str
        """
        if join_with is None:
            raise ValueError("Invalid value for `join_with`, must not be `None`")

        self._join_with = join_with

    @property
    def joined_variables(self):
        """
        Gets the joined_variables of this Variable.
        Array of Variables that are joined with this Variable

        :return: The joined_variables of this Variable.
        :rtype: list[Variable]
        """
        return self._joined_variables

    @joined_variables.setter
    def joined_variables(self, joined_variables):
        """
        Sets the joined_variables of this Variable.
        Array of Variables that are joined with this Variable

        :param joined_variables: The joined_variables of this Variable.
        :type: list[Variable]
        """
        if joined_variables is None:
            raise ValueError("Invalid value for `joined_variables`, must not be `None`")

        self._joined_variables = joined_variables

    @property
    def parent(self):
        """
        Gets the parent of this Variable.
        Id of the parent variable if this variable has any parent

        :return: The parent of this Variable.
        :rtype: int
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """
        Sets the parent of this Variable.
        Id of the parent variable if this variable has any parent

        :param parent: The parent of this Variable.
        :type: int
        """
        if parent is None:
            raise ValueError("Invalid value for `parent`, must not be `None`")

        self._parent = parent

    @property
    def sub_variables(self):
        """
        Gets the sub_variables of this Variable.
        Array of Variables that are sub variables to this Variable

        :return: The sub_variables of this Variable.
        :rtype: list[Variable]
        """
        return self._sub_variables

    @sub_variables.setter
    def sub_variables(self, sub_variables):
        """
        Sets the sub_variables of this Variable.
        Array of Variables that are sub variables to this Variable

        :param sub_variables: The sub_variables of this Variable.
        :type: list[Variable]
        """
        if sub_variables is None:
            raise ValueError("Invalid value for `sub_variables`, must not be `None`")

        self._sub_variables = sub_variables

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this Variable.
        The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.

        :return: The onset_delay of this Variable.
        :rtype: int
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this Variable.
        The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.

        :param onset_delay: The onset_delay of this Variable.
        :type: int
        """
        if onset_delay is None:
            raise ValueError("Invalid value for `onset_delay`, must not be `None`")

        self._onset_delay = onset_delay

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this Variable.
        The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.

        :return: The duration_of_action of this Variable.
        :rtype: int
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this Variable.
        The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.

        :param duration_of_action: The duration_of_action of this Variable.
        :type: int
        """
        if duration_of_action is None:
            raise ValueError("Invalid value for `duration_of_action`, must not be `None`")

        self._duration_of_action = duration_of_action

    @property
    def earliest_measurement_time(self):
        """
        Gets the earliest_measurement_time of this Variable.
        Earliest measurement time

        :return: The earliest_measurement_time of this Variable.
        :rtype: int
        """
        return self._earliest_measurement_time

    @earliest_measurement_time.setter
    def earliest_measurement_time(self, earliest_measurement_time):
        """
        Sets the earliest_measurement_time of this Variable.
        Earliest measurement time

        :param earliest_measurement_time: The earliest_measurement_time of this Variable.
        :type: int
        """
        if earliest_measurement_time is None:
            raise ValueError("Invalid value for `earliest_measurement_time`, must not be `None`")

        self._earliest_measurement_time = earliest_measurement_time

    @property
    def latest_measurement_time(self):
        """
        Gets the latest_measurement_time of this Variable.
        Latest measurement time

        :return: The latest_measurement_time of this Variable.
        :rtype: int
        """
        return self._latest_measurement_time

    @latest_measurement_time.setter
    def latest_measurement_time(self, latest_measurement_time):
        """
        Sets the latest_measurement_time of this Variable.
        Latest measurement time

        :param latest_measurement_time: The latest_measurement_time of this Variable.
        :type: int
        """
        if latest_measurement_time is None:
            raise ValueError("Invalid value for `latest_measurement_time`, must not be `None`")

        self._latest_measurement_time = latest_measurement_time

    @property
    def updated(self):
        """
        Gets the updated of this Variable.
        When this variable or its settings were last updated

        :return: The updated of this Variable.
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """
        Sets the updated of this Variable.
        When this variable or its settings were last updated

        :param updated: The updated of this Variable.
        :type: int
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    @property
    def cause_only(self):
        """
        Gets the cause_only of this Variable.
        A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.

        :return: The cause_only of this Variable.
        :rtype: int
        """
        return self._cause_only

    @cause_only.setter
    def cause_only(self, cause_only):
        """
        Sets the cause_only of this Variable.
        A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.

        :param cause_only: The cause_only of this Variable.
        :type: int
        """
        if cause_only is None:
            raise ValueError("Invalid value for `cause_only`, must not be `None`")

        self._cause_only = cause_only

    @property
    def number_of_correlations(self):
        """
        Gets the number_of_correlations of this Variable.
        Number of correlations

        :return: The number_of_correlations of this Variable.
        :rtype: int
        """
        return self._number_of_correlations

    @number_of_correlations.setter
    def number_of_correlations(self, number_of_correlations):
        """
        Sets the number_of_correlations of this Variable.
        Number of correlations

        :param number_of_correlations: The number_of_correlations of this Variable.
        :type: int
        """
        if number_of_correlations is None:
            raise ValueError("Invalid value for `number_of_correlations`, must not be `None`")

        self._number_of_correlations = number_of_correlations

    @property
    def outcome(self):
        """
        Gets the outcome of this Variable.
        Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.

        :return: The outcome of this Variable.
        :rtype: int
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """
        Sets the outcome of this Variable.
        Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.

        :param outcome: The outcome of this Variable.
        :type: int
        """
        if outcome is None:
            raise ValueError("Invalid value for `outcome`, must not be `None`")

        self._outcome = outcome

    @property
    def raw_measurements_at_last_analysis(self):
        """
        Gets the raw_measurements_at_last_analysis of this Variable.
        The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the rawMeasurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.

        :return: The raw_measurements_at_last_analysis of this Variable.
        :rtype: int
        """
        return self._raw_measurements_at_last_analysis

    @raw_measurements_at_last_analysis.setter
    def raw_measurements_at_last_analysis(self, raw_measurements_at_last_analysis):
        """
        Sets the raw_measurements_at_last_analysis of this Variable.
        The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the rawMeasurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.

        :param raw_measurements_at_last_analysis: The raw_measurements_at_last_analysis of this Variable.
        :type: int
        """
        if raw_measurements_at_last_analysis is None:
            raise ValueError("Invalid value for `raw_measurements_at_last_analysis`, must not be `None`")

        self._raw_measurements_at_last_analysis = raw_measurements_at_last_analysis

    @property
    def number_of_raw_measurements(self):
        """
        Gets the number_of_raw_measurements of this Variable.
        Number of measurements

        :return: The number_of_raw_measurements of this Variable.
        :rtype: int
        """
        return self._number_of_raw_measurements

    @number_of_raw_measurements.setter
    def number_of_raw_measurements(self, number_of_raw_measurements):
        """
        Sets the number_of_raw_measurements of this Variable.
        Number of measurements

        :param number_of_raw_measurements: The number_of_raw_measurements of this Variable.
        :type: int
        """
        if number_of_raw_measurements is None:
            raise ValueError("Invalid value for `number_of_raw_measurements`, must not be `None`")

        self._number_of_raw_measurements = number_of_raw_measurements

    @property
    def last_unit(self):
        """
        Gets the last_unit of this Variable.
        Last unit

        :return: The last_unit of this Variable.
        :rtype: str
        """
        return self._last_unit

    @last_unit.setter
    def last_unit(self, last_unit):
        """
        Sets the last_unit of this Variable.
        Last unit

        :param last_unit: The last_unit of this Variable.
        :type: str
        """
        if last_unit is None:
            raise ValueError("Invalid value for `last_unit`, must not be `None`")

        self._last_unit = last_unit

    @property
    def last_value(self):
        """
        Gets the last_value of this Variable.
        Last value

        :return: The last_value of this Variable.
        :rtype: int
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """
        Sets the last_value of this Variable.
        Last value

        :param last_value: The last_value of this Variable.
        :type: int
        """
        if last_value is None:
            raise ValueError("Invalid value for `last_value`, must not be `None`")

        self._last_value = last_value

    @property
    def most_common_value(self):
        """
        Gets the most_common_value of this Variable.
        Most common value

        :return: The most_common_value of this Variable.
        :rtype: int
        """
        return self._most_common_value

    @most_common_value.setter
    def most_common_value(self, most_common_value):
        """
        Sets the most_common_value of this Variable.
        Most common value

        :param most_common_value: The most_common_value of this Variable.
        :type: int
        """
        if most_common_value is None:
            raise ValueError("Invalid value for `most_common_value`, must not be `None`")

        self._most_common_value = most_common_value

    @property
    def most_common_unit(self):
        """
        Gets the most_common_unit of this Variable.
        Most common unit

        :return: The most_common_unit of this Variable.
        :rtype: str
        """
        return self._most_common_unit

    @most_common_unit.setter
    def most_common_unit(self, most_common_unit):
        """
        Sets the most_common_unit of this Variable.
        Most common unit

        :param most_common_unit: The most_common_unit of this Variable.
        :type: str
        """
        if most_common_unit is None:
            raise ValueError("Invalid value for `most_common_unit`, must not be `None`")

        self._most_common_unit = most_common_unit

    @property
    def last_source(self):
        """
        Gets the last_source of this Variable.
        Last source

        :return: The last_source of this Variable.
        :rtype: int
        """
        return self._last_source

    @last_source.setter
    def last_source(self, last_source):
        """
        Sets the last_source of this Variable.
        Last source

        :param last_source: The last_source of this Variable.
        :type: int
        """
        if last_source is None:
            raise ValueError("Invalid value for `last_source`, must not be `None`")

        self._last_source = last_source

    @property
    def image_url(self):
        """
        Gets the image_url of this Variable.
        

        :return: The image_url of this Variable.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this Variable.
        

        :param image_url: The image_url of this Variable.
        :type: str
        """

        self._image_url = image_url

    @property
    def ion_icon(self):
        """
        Gets the ion_icon of this Variable.
        

        :return: The ion_icon of this Variable.
        :rtype: str
        """
        return self._ion_icon

    @ion_icon.setter
    def ion_icon(self, ion_icon):
        """
        Sets the ion_icon of this Variable.
        

        :param ion_icon: The ion_icon of this Variable.
        :type: str
        """

        self._ion_icon = ion_icon

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
