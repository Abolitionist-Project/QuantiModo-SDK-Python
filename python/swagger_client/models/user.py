# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, wp_id=None, display_name=None, login_name=None, email=None, token=None, administrator=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'wp_id': 'int',
            'display_name': 'str',
            'login_name': 'str',
            'email': 'str',
            'token': 'str',
            'administrator': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'wp_id': 'wpId',
            'display_name': 'displayName',
            'login_name': 'loginName',
            'email': 'email',
            'token': 'token',
            'administrator': 'administrator'
        }

        self._id = id
        self._wp_id = wp_id
        self._display_name = display_name
        self._login_name = login_name
        self._email = email
        self._token = token
        self._administrator = administrator


    @property
    def id(self):
        """
        Gets the id of this User.
        User id

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.
        User id

        :param id: The id of this User.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def wp_id(self):
        """
        Gets the wp_id of this User.
        Wordpress user id

        :return: The wp_id of this User.
        :rtype: int
        """
        return self._wp_id

    @wp_id.setter
    def wp_id(self, wp_id):
        """
        Sets the wp_id of this User.
        Wordpress user id

        :param wp_id: The wp_id of this User.
        :type: int
        """
        if wp_id is None:
            raise ValueError("Invalid value for `wp_id`, must not be `None`")

        self._wp_id = wp_id

    @property
    def display_name(self):
        """
        Gets the display_name of this User.
        User display name

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this User.
        User display name

        :param display_name: The display_name of this User.
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def login_name(self):
        """
        Gets the login_name of this User.
        User login name

        :return: The login_name of this User.
        :rtype: str
        """
        return self._login_name

    @login_name.setter
    def login_name(self, login_name):
        """
        Sets the login_name of this User.
        User login name

        :param login_name: The login_name of this User.
        :type: str
        """
        if login_name is None:
            raise ValueError("Invalid value for `login_name`, must not be `None`")

        self._login_name = login_name

    @property
    def email(self):
        """
        Gets the email of this User.
        User email

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.
        User email

        :param email: The email of this User.
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def token(self):
        """
        Gets the token of this User.
        User token

        :return: The token of this User.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this User.
        User token

        :param token: The token of this User.
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def administrator(self):
        """
        Gets the administrator of this User.
        Is user administrator

        :return: The administrator of this User.
        :rtype: bool
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """
        Sets the administrator of this User.
        Is user administrator

        :param administrator: The administrator of this User.
        :type: bool
        """
        if administrator is None:
            raise ValueError("Invalid value for `administrator`, must not be `None`")

        self._administrator = administrator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
