# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Unit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, abbreviated_name=None, category=None, minimum_allowed_value=None, maximum_allowed_value=None, conversion_steps=None):
        """
        Unit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'abbreviated_name': 'str',
            'category': 'str',
            'minimum_allowed_value': 'float',
            'maximum_allowed_value': 'float',
            'conversion_steps': 'list[ConversionStep]'
        }

        self.attribute_map = {
            'name': 'name',
            'abbreviated_name': 'abbreviatedName',
            'category': 'category',
            'minimum_allowed_value': 'minimumAllowedValue',
            'maximum_allowed_value': 'maximumAllowedValue',
            'conversion_steps': 'conversionSteps'
        }

        self._name = name
        self._abbreviated_name = abbreviated_name
        self._category = category
        self._minimum_allowed_value = minimum_allowed_value
        self._maximum_allowed_value = maximum_allowed_value
        self._conversion_steps = conversion_steps


    @property
    def name(self):
        """
        Gets the name of this Unit.
        Unit name

        :return: The name of this Unit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Unit.
        Unit name

        :param name: The name of this Unit.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def abbreviated_name(self):
        """
        Gets the abbreviated_name of this Unit.
        Unit abbreviation

        :return: The abbreviated_name of this Unit.
        :rtype: str
        """
        return self._abbreviated_name

    @abbreviated_name.setter
    def abbreviated_name(self, abbreviated_name):
        """
        Sets the abbreviated_name of this Unit.
        Unit abbreviation

        :param abbreviated_name: The abbreviated_name of this Unit.
        :type: str
        """
        if abbreviated_name is None:
            raise ValueError("Invalid value for `abbreviated_name`, must not be `None`")

        self._abbreviated_name = abbreviated_name

    @property
    def category(self):
        """
        Gets the category of this Unit.
        Unit category

        :return: The category of this Unit.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Unit.
        Unit category

        :param category: The category of this Unit.
        :type: str
        """
        allowed_values = ["Distance", "Duration", "Energy", "Frequency", "Miscellany", "Pressure", "Proportion", "Rating", "Temperature", "Volume", "Weight"]
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def minimum_allowed_value(self):
        """
        Gets the minimum_allowed_value of this Unit.
        The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.

        :return: The minimum_allowed_value of this Unit.
        :rtype: float
        """
        return self._minimum_allowed_value

    @minimum_allowed_value.setter
    def minimum_allowed_value(self, minimum_allowed_value):
        """
        Sets the minimum_allowed_value of this Unit.
        The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.

        :param minimum_allowed_value: The minimum_allowed_value of this Unit.
        :type: float
        """

        self._minimum_allowed_value = minimum_allowed_value

    @property
    def maximum_allowed_value(self):
        """
        Gets the maximum_allowed_value of this Unit.
        The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.

        :return: The maximum_allowed_value of this Unit.
        :rtype: float
        """
        return self._maximum_allowed_value

    @maximum_allowed_value.setter
    def maximum_allowed_value(self, maximum_allowed_value):
        """
        Sets the maximum_allowed_value of this Unit.
        The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.

        :param maximum_allowed_value: The maximum_allowed_value of this Unit.
        :type: float
        """

        self._maximum_allowed_value = maximum_allowed_value

    @property
    def conversion_steps(self):
        """
        Gets the conversion_steps of this Unit.
        Conversion steps list

        :return: The conversion_steps of this Unit.
        :rtype: list[ConversionStep]
        """
        return self._conversion_steps

    @conversion_steps.setter
    def conversion_steps(self, conversion_steps):
        """
        Sets the conversion_steps of this Unit.
        Conversion steps list

        :param conversion_steps: The conversion_steps of this Unit.
        :type: list[ConversionStep]
        """
        if conversion_steps is None:
            raise ValueError("Invalid value for `conversion_steps`, must not be `None`")

        self._conversion_steps = conversion_steps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
