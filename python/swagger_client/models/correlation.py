# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Correlation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, average_daily_low_cause=None, average_daily_high_cause=None, average_effect=None, average_effect_following_high_cause=None, average_effect_following_low_cause=None, average_effect_following_high_cause_explanation=None, average_effect_following_low_cause_explanation=None, average_vote=None, causality_factor=None, cause=None, cause_variable_category_name=None, cause_changes=None, cause_variable_combination_operation=None, cause_variable_image_url=None, cause_variable_ion_icon=None, cause_unit=None, cause_variable_default_unit_id=None, cause_variable_id=None, cause_variable_name=None, correlation_coefficient=None, created_at=None, data_analysis=None, data_sources=None, duration_of_action=None, effect=None, effect_variable_category_name=None, effect_variable_image_url=None, effect_variable_ion_icon=None, effect_size=None, effect_variable_id=None, effect_variable_name=None, gauge_image=None, image_url=None, number_of_pairs=None, onset_delay=None, optimal_pearson_product=None, outcome_data_sources=None, predictor_explanation=None, principal_investigator=None, qm_score=None, reverse_correlation=None, significance_explanation=None, statistical_significance=None, strength_level=None, study_abstract=None, study_background=None, study_design=None, study_limitations=None, study_link_dynamic=None, study_link_facebook=None, study_link_google=None, study_link_twitter=None, study_link_static=None, study_objective=None, study_results=None, study_title=None, timestamp=None, updated_at=None, user_vote=None, value_predicting_high_outcome=None, value_predicting_high_outcome_explanation=None, value_predicting_low_outcome=None, value_predicting_low_outcome_explanation=None):
        """
        Correlation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'average_daily_low_cause': 'float',
            'average_daily_high_cause': 'float',
            'average_effect': 'float',
            'average_effect_following_high_cause': 'float',
            'average_effect_following_low_cause': 'float',
            'average_effect_following_high_cause_explanation': 'str',
            'average_effect_following_low_cause_explanation': 'str',
            'average_vote': 'float',
            'causality_factor': 'float',
            'cause': 'str',
            'cause_variable_category_name': 'str',
            'cause_changes': 'int',
            'cause_variable_combination_operation': 'str',
            'cause_variable_image_url': 'str',
            'cause_variable_ion_icon': 'str',
            'cause_unit': 'str',
            'cause_variable_default_unit_id': 'int',
            'cause_variable_id': 'int',
            'cause_variable_name': 'str',
            'correlation_coefficient': 'float',
            'created_at': 'datetime',
            'data_analysis': 'str',
            'data_sources': 'str',
            'duration_of_action': 'float',
            'effect': 'str',
            'effect_variable_category_name': 'str',
            'effect_variable_image_url': 'str',
            'effect_variable_ion_icon': 'str',
            'effect_size': 'str',
            'effect_variable_id': 'str',
            'effect_variable_name': 'str',
            'gauge_image': 'str',
            'image_url': 'str',
            'number_of_pairs': 'float',
            'onset_delay': 'float',
            'optimal_pearson_product': 'float',
            'outcome_data_sources': 'str',
            'predictor_explanation': 'str',
            'principal_investigator': 'str',
            'qm_score': 'float',
            'reverse_correlation': 'float',
            'significance_explanation': 'str',
            'statistical_significance': 'str',
            'strength_level': 'str',
            'study_abstract': 'str',
            'study_background': 'str',
            'study_design': 'str',
            'study_limitations': 'str',
            'study_link_dynamic': 'str',
            'study_link_facebook': 'str',
            'study_link_google': 'str',
            'study_link_twitter': 'str',
            'study_link_static': 'str',
            'study_objective': 'str',
            'study_results': 'str',
            'study_title': 'str',
            'timestamp': 'float',
            'updated_at': 'datetime',
            'user_vote': 'float',
            'value_predicting_high_outcome': 'float',
            'value_predicting_high_outcome_explanation': 'str',
            'value_predicting_low_outcome': 'float',
            'value_predicting_low_outcome_explanation': 'str'
        }

        self.attribute_map = {
            'average_daily_low_cause': 'averageDailyLowCause',
            'average_daily_high_cause': 'averageDailyHighCause',
            'average_effect': 'averageEffect',
            'average_effect_following_high_cause': 'averageEffectFollowingHighCause',
            'average_effect_following_low_cause': 'averageEffectFollowingLowCause',
            'average_effect_following_high_cause_explanation': 'averageEffectFollowingHighCauseExplanation',
            'average_effect_following_low_cause_explanation': 'averageEffectFollowingLowCauseExplanation',
            'average_vote': 'averageVote',
            'causality_factor': 'causalityFactor',
            'cause': 'cause',
            'cause_variable_category_name': 'causeVariableCategoryName',
            'cause_changes': 'causeChanges',
            'cause_variable_combination_operation': 'causeVariableCombinationOperation',
            'cause_variable_image_url': 'causeVariableImageUrl',
            'cause_variable_ion_icon': 'causeVariableIonIcon',
            'cause_unit': 'causeUnit',
            'cause_variable_default_unit_id': 'causeVariableDefaultUnitId',
            'cause_variable_id': 'causeVariableId',
            'cause_variable_name': 'causeVariableName',
            'correlation_coefficient': 'correlationCoefficient',
            'created_at': 'createdAt',
            'data_analysis': 'dataAnalysis',
            'data_sources': 'dataSources',
            'duration_of_action': 'durationOfAction',
            'effect': 'effect',
            'effect_variable_category_name': 'effectVariableCategoryName',
            'effect_variable_image_url': 'effectVariableImageUrl',
            'effect_variable_ion_icon': 'effectVariableIonIcon',
            'effect_size': 'effectSize',
            'effect_variable_id': 'effectVariableId',
            'effect_variable_name': 'effectVariableName',
            'gauge_image': 'gaugeImage',
            'image_url': 'imageUrl',
            'number_of_pairs': 'numberOfPairs',
            'onset_delay': 'onsetDelay',
            'optimal_pearson_product': 'optimalPearsonProduct',
            'outcome_data_sources': 'outcomeDataSources',
            'predictor_explanation': 'predictorExplanation',
            'principal_investigator': 'principalInvestigator',
            'qm_score': 'qmScore',
            'reverse_correlation': 'reverseCorrelation',
            'significance_explanation': 'significanceExplanation',
            'statistical_significance': 'statisticalSignificance',
            'strength_level': 'strengthLevel',
            'study_abstract': 'studyAbstract',
            'study_background': 'studyBackground',
            'study_design': 'studyDesign',
            'study_limitations': 'studyLimitations',
            'study_link_dynamic': 'studyLinkDynamic',
            'study_link_facebook': 'studyLinkFacebook',
            'study_link_google': 'studyLinkGoogle',
            'study_link_twitter': 'studyLinkTwitter',
            'study_link_static': 'studyLinkStatic',
            'study_objective': 'studyObjective',
            'study_results': 'studyResults',
            'study_title': 'studyTitle',
            'timestamp': 'timestamp',
            'updated_at': 'updatedAt',
            'user_vote': 'userVote',
            'value_predicting_high_outcome': 'valuePredictingHighOutcome',
            'value_predicting_high_outcome_explanation': 'valuePredictingHighOutcomeExplanation',
            'value_predicting_low_outcome': 'valuePredictingLowOutcome',
            'value_predicting_low_outcome_explanation': 'valuePredictingLowOutcomeExplanation'
        }

        self._average_daily_low_cause = average_daily_low_cause
        self._average_daily_high_cause = average_daily_high_cause
        self._average_effect = average_effect
        self._average_effect_following_high_cause = average_effect_following_high_cause
        self._average_effect_following_low_cause = average_effect_following_low_cause
        self._average_effect_following_high_cause_explanation = average_effect_following_high_cause_explanation
        self._average_effect_following_low_cause_explanation = average_effect_following_low_cause_explanation
        self._average_vote = average_vote
        self._causality_factor = causality_factor
        self._cause = cause
        self._cause_variable_category_name = cause_variable_category_name
        self._cause_changes = cause_changes
        self._cause_variable_combination_operation = cause_variable_combination_operation
        self._cause_variable_image_url = cause_variable_image_url
        self._cause_variable_ion_icon = cause_variable_ion_icon
        self._cause_unit = cause_unit
        self._cause_variable_default_unit_id = cause_variable_default_unit_id
        self._cause_variable_id = cause_variable_id
        self._cause_variable_name = cause_variable_name
        self._correlation_coefficient = correlation_coefficient
        self._created_at = created_at
        self._data_analysis = data_analysis
        self._data_sources = data_sources
        self._duration_of_action = duration_of_action
        self._effect = effect
        self._effect_variable_category_name = effect_variable_category_name
        self._effect_variable_image_url = effect_variable_image_url
        self._effect_variable_ion_icon = effect_variable_ion_icon
        self._effect_size = effect_size
        self._effect_variable_id = effect_variable_id
        self._effect_variable_name = effect_variable_name
        self._gauge_image = gauge_image
        self._image_url = image_url
        self._number_of_pairs = number_of_pairs
        self._onset_delay = onset_delay
        self._optimal_pearson_product = optimal_pearson_product
        self._outcome_data_sources = outcome_data_sources
        self._predictor_explanation = predictor_explanation
        self._principal_investigator = principal_investigator
        self._qm_score = qm_score
        self._reverse_correlation = reverse_correlation
        self._significance_explanation = significance_explanation
        self._statistical_significance = statistical_significance
        self._strength_level = strength_level
        self._study_abstract = study_abstract
        self._study_background = study_background
        self._study_design = study_design
        self._study_limitations = study_limitations
        self._study_link_dynamic = study_link_dynamic
        self._study_link_facebook = study_link_facebook
        self._study_link_google = study_link_google
        self._study_link_twitter = study_link_twitter
        self._study_link_static = study_link_static
        self._study_objective = study_objective
        self._study_results = study_results
        self._study_title = study_title
        self._timestamp = timestamp
        self._updated_at = updated_at
        self._user_vote = user_vote
        self._value_predicting_high_outcome = value_predicting_high_outcome
        self._value_predicting_high_outcome_explanation = value_predicting_high_outcome_explanation
        self._value_predicting_low_outcome = value_predicting_low_outcome
        self._value_predicting_low_outcome_explanation = value_predicting_low_outcome_explanation


    @property
    def average_daily_low_cause(self):
        """
        Gets the average_daily_low_cause of this Correlation.
        

        :return: The average_daily_low_cause of this Correlation.
        :rtype: float
        """
        return self._average_daily_low_cause

    @average_daily_low_cause.setter
    def average_daily_low_cause(self, average_daily_low_cause):
        """
        Sets the average_daily_low_cause of this Correlation.
        

        :param average_daily_low_cause: The average_daily_low_cause of this Correlation.
        :type: float
        """

        self._average_daily_low_cause = average_daily_low_cause

    @property
    def average_daily_high_cause(self):
        """
        Gets the average_daily_high_cause of this Correlation.
        

        :return: The average_daily_high_cause of this Correlation.
        :rtype: float
        """
        return self._average_daily_high_cause

    @average_daily_high_cause.setter
    def average_daily_high_cause(self, average_daily_high_cause):
        """
        Sets the average_daily_high_cause of this Correlation.
        

        :param average_daily_high_cause: The average_daily_high_cause of this Correlation.
        :type: float
        """

        self._average_daily_high_cause = average_daily_high_cause

    @property
    def average_effect(self):
        """
        Gets the average_effect of this Correlation.
        

        :return: The average_effect of this Correlation.
        :rtype: float
        """
        return self._average_effect

    @average_effect.setter
    def average_effect(self, average_effect):
        """
        Sets the average_effect of this Correlation.
        

        :param average_effect: The average_effect of this Correlation.
        :type: float
        """

        self._average_effect = average_effect

    @property
    def average_effect_following_high_cause(self):
        """
        Gets the average_effect_following_high_cause of this Correlation.
        

        :return: The average_effect_following_high_cause of this Correlation.
        :rtype: float
        """
        return self._average_effect_following_high_cause

    @average_effect_following_high_cause.setter
    def average_effect_following_high_cause(self, average_effect_following_high_cause):
        """
        Sets the average_effect_following_high_cause of this Correlation.
        

        :param average_effect_following_high_cause: The average_effect_following_high_cause of this Correlation.
        :type: float
        """

        self._average_effect_following_high_cause = average_effect_following_high_cause

    @property
    def average_effect_following_low_cause(self):
        """
        Gets the average_effect_following_low_cause of this Correlation.
        

        :return: The average_effect_following_low_cause of this Correlation.
        :rtype: float
        """
        return self._average_effect_following_low_cause

    @average_effect_following_low_cause.setter
    def average_effect_following_low_cause(self, average_effect_following_low_cause):
        """
        Sets the average_effect_following_low_cause of this Correlation.
        

        :param average_effect_following_low_cause: The average_effect_following_low_cause of this Correlation.
        :type: float
        """

        self._average_effect_following_low_cause = average_effect_following_low_cause

    @property
    def average_effect_following_high_cause_explanation(self):
        """
        Gets the average_effect_following_high_cause_explanation of this Correlation.
        

        :return: The average_effect_following_high_cause_explanation of this Correlation.
        :rtype: str
        """
        return self._average_effect_following_high_cause_explanation

    @average_effect_following_high_cause_explanation.setter
    def average_effect_following_high_cause_explanation(self, average_effect_following_high_cause_explanation):
        """
        Sets the average_effect_following_high_cause_explanation of this Correlation.
        

        :param average_effect_following_high_cause_explanation: The average_effect_following_high_cause_explanation of this Correlation.
        :type: str
        """

        self._average_effect_following_high_cause_explanation = average_effect_following_high_cause_explanation

    @property
    def average_effect_following_low_cause_explanation(self):
        """
        Gets the average_effect_following_low_cause_explanation of this Correlation.
        

        :return: The average_effect_following_low_cause_explanation of this Correlation.
        :rtype: str
        """
        return self._average_effect_following_low_cause_explanation

    @average_effect_following_low_cause_explanation.setter
    def average_effect_following_low_cause_explanation(self, average_effect_following_low_cause_explanation):
        """
        Sets the average_effect_following_low_cause_explanation of this Correlation.
        

        :param average_effect_following_low_cause_explanation: The average_effect_following_low_cause_explanation of this Correlation.
        :type: str
        """

        self._average_effect_following_low_cause_explanation = average_effect_following_low_cause_explanation

    @property
    def average_vote(self):
        """
        Gets the average_vote of this Correlation.
        Average Vote

        :return: The average_vote of this Correlation.
        :rtype: float
        """
        return self._average_vote

    @average_vote.setter
    def average_vote(self, average_vote):
        """
        Sets the average_vote of this Correlation.
        Average Vote

        :param average_vote: The average_vote of this Correlation.
        :type: float
        """

        self._average_vote = average_vote

    @property
    def causality_factor(self):
        """
        Gets the causality_factor of this Correlation.
        

        :return: The causality_factor of this Correlation.
        :rtype: float
        """
        return self._causality_factor

    @causality_factor.setter
    def causality_factor(self, causality_factor):
        """
        Sets the causality_factor of this Correlation.
        

        :param causality_factor: The causality_factor of this Correlation.
        :type: float
        """

        self._causality_factor = causality_factor

    @property
    def cause(self):
        """
        Gets the cause of this Correlation.
        Variable name of the cause variable for which the user desires correlations.

        :return: The cause of this Correlation.
        :rtype: str
        """
        return self._cause

    @cause.setter
    def cause(self, cause):
        """
        Sets the cause of this Correlation.
        Variable name of the cause variable for which the user desires correlations.

        :param cause: The cause of this Correlation.
        :type: str
        """
        if cause is None:
            raise ValueError("Invalid value for `cause`, must not be `None`")

        self._cause = cause

    @property
    def cause_variable_category_name(self):
        """
        Gets the cause_variable_category_name of this Correlation.
        Variable category of the cause variable.

        :return: The cause_variable_category_name of this Correlation.
        :rtype: str
        """
        return self._cause_variable_category_name

    @cause_variable_category_name.setter
    def cause_variable_category_name(self, cause_variable_category_name):
        """
        Sets the cause_variable_category_name of this Correlation.
        Variable category of the cause variable.

        :param cause_variable_category_name: The cause_variable_category_name of this Correlation.
        :type: str
        """

        self._cause_variable_category_name = cause_variable_category_name

    @property
    def cause_changes(self):
        """
        Gets the cause_changes of this Correlation.
        Number of changes in the predictor variable (a.k.a the number of experiments)

        :return: The cause_changes of this Correlation.
        :rtype: int
        """
        return self._cause_changes

    @cause_changes.setter
    def cause_changes(self, cause_changes):
        """
        Sets the cause_changes of this Correlation.
        Number of changes in the predictor variable (a.k.a the number of experiments)

        :param cause_changes: The cause_changes of this Correlation.
        :type: int
        """

        self._cause_changes = cause_changes

    @property
    def cause_variable_combination_operation(self):
        """
        Gets the cause_variable_combination_operation of this Correlation.
        The way cause measurements are aggregated

        :return: The cause_variable_combination_operation of this Correlation.
        :rtype: str
        """
        return self._cause_variable_combination_operation

    @cause_variable_combination_operation.setter
    def cause_variable_combination_operation(self, cause_variable_combination_operation):
        """
        Sets the cause_variable_combination_operation of this Correlation.
        The way cause measurements are aggregated

        :param cause_variable_combination_operation: The cause_variable_combination_operation of this Correlation.
        :type: str
        """

        self._cause_variable_combination_operation = cause_variable_combination_operation

    @property
    def cause_variable_image_url(self):
        """
        Gets the cause_variable_image_url of this Correlation.
        

        :return: The cause_variable_image_url of this Correlation.
        :rtype: str
        """
        return self._cause_variable_image_url

    @cause_variable_image_url.setter
    def cause_variable_image_url(self, cause_variable_image_url):
        """
        Sets the cause_variable_image_url of this Correlation.
        

        :param cause_variable_image_url: The cause_variable_image_url of this Correlation.
        :type: str
        """

        self._cause_variable_image_url = cause_variable_image_url

    @property
    def cause_variable_ion_icon(self):
        """
        Gets the cause_variable_ion_icon of this Correlation.
        For use in Ionic apps

        :return: The cause_variable_ion_icon of this Correlation.
        :rtype: str
        """
        return self._cause_variable_ion_icon

    @cause_variable_ion_icon.setter
    def cause_variable_ion_icon(self, cause_variable_ion_icon):
        """
        Sets the cause_variable_ion_icon of this Correlation.
        For use in Ionic apps

        :param cause_variable_ion_icon: The cause_variable_ion_icon of this Correlation.
        :type: str
        """

        self._cause_variable_ion_icon = cause_variable_ion_icon

    @property
    def cause_unit(self):
        """
        Gets the cause_unit of this Correlation.
        Unit of the predictor variable

        :return: The cause_unit of this Correlation.
        :rtype: str
        """
        return self._cause_unit

    @cause_unit.setter
    def cause_unit(self, cause_unit):
        """
        Sets the cause_unit of this Correlation.
        Unit of the predictor variable

        :param cause_unit: The cause_unit of this Correlation.
        :type: str
        """

        self._cause_unit = cause_unit

    @property
    def cause_variable_default_unit_id(self):
        """
        Gets the cause_variable_default_unit_id of this Correlation.
        Unit Id of the predictor variable

        :return: The cause_variable_default_unit_id of this Correlation.
        :rtype: int
        """
        return self._cause_variable_default_unit_id

    @cause_variable_default_unit_id.setter
    def cause_variable_default_unit_id(self, cause_variable_default_unit_id):
        """
        Sets the cause_variable_default_unit_id of this Correlation.
        Unit Id of the predictor variable

        :param cause_variable_default_unit_id: The cause_variable_default_unit_id of this Correlation.
        :type: int
        """

        self._cause_variable_default_unit_id = cause_variable_default_unit_id

    @property
    def cause_variable_id(self):
        """
        Gets the cause_variable_id of this Correlation.
        

        :return: The cause_variable_id of this Correlation.
        :rtype: int
        """
        return self._cause_variable_id

    @cause_variable_id.setter
    def cause_variable_id(self, cause_variable_id):
        """
        Sets the cause_variable_id of this Correlation.
        

        :param cause_variable_id: The cause_variable_id of this Correlation.
        :type: int
        """

        self._cause_variable_id = cause_variable_id

    @property
    def cause_variable_name(self):
        """
        Gets the cause_variable_name of this Correlation.
        Variable name of the cause variable for which the user desires correlations.

        :return: The cause_variable_name of this Correlation.
        :rtype: str
        """
        return self._cause_variable_name

    @cause_variable_name.setter
    def cause_variable_name(self, cause_variable_name):
        """
        Sets the cause_variable_name of this Correlation.
        Variable name of the cause variable for which the user desires correlations.

        :param cause_variable_name: The cause_variable_name of this Correlation.
        :type: str
        """

        self._cause_variable_name = cause_variable_name

    @property
    def correlation_coefficient(self):
        """
        Gets the correlation_coefficient of this Correlation.
        Pearson correlation coefficient between cause and effect measurements

        :return: The correlation_coefficient of this Correlation.
        :rtype: float
        """
        return self._correlation_coefficient

    @correlation_coefficient.setter
    def correlation_coefficient(self, correlation_coefficient):
        """
        Sets the correlation_coefficient of this Correlation.
        Pearson correlation coefficient between cause and effect measurements

        :param correlation_coefficient: The correlation_coefficient of this Correlation.
        :type: float
        """
        if correlation_coefficient is None:
            raise ValueError("Invalid value for `correlation_coefficient`, must not be `None`")

        self._correlation_coefficient = correlation_coefficient

    @property
    def created_at(self):
        """
        Gets the created_at of this Correlation.
        When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format

        :return: The created_at of this Correlation.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Correlation.
        When the record was first created. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format

        :param created_at: The created_at of this Correlation.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def data_analysis(self):
        """
        Gets the data_analysis of this Correlation.
        How the data was analyzed

        :return: The data_analysis of this Correlation.
        :rtype: str
        """
        return self._data_analysis

    @data_analysis.setter
    def data_analysis(self, data_analysis):
        """
        Sets the data_analysis of this Correlation.
        How the data was analyzed

        :param data_analysis: The data_analysis of this Correlation.
        :type: str
        """

        self._data_analysis = data_analysis

    @property
    def data_sources(self):
        """
        Gets the data_sources of this Correlation.
        How the data was obtained

        :return: The data_sources of this Correlation.
        :rtype: str
        """
        return self._data_sources

    @data_sources.setter
    def data_sources(self, data_sources):
        """
        Sets the data_sources of this Correlation.
        How the data was obtained

        :param data_sources: The data_sources of this Correlation.
        :type: str
        """

        self._data_sources = data_sources

    @property
    def duration_of_action(self):
        """
        Gets the duration_of_action of this Correlation.
        The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.

        :return: The duration_of_action of this Correlation.
        :rtype: float
        """
        return self._duration_of_action

    @duration_of_action.setter
    def duration_of_action(self, duration_of_action):
        """
        Sets the duration_of_action of this Correlation.
        The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable’s value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.

        :param duration_of_action: The duration_of_action of this Correlation.
        :type: float
        """
        if duration_of_action is None:
            raise ValueError("Invalid value for `duration_of_action`, must not be `None`")

        self._duration_of_action = duration_of_action

    @property
    def effect(self):
        """
        Gets the effect of this Correlation.
        Variable name of the effect variable for which the user desires correlations.

        :return: The effect of this Correlation.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """
        Sets the effect of this Correlation.
        Variable name of the effect variable for which the user desires correlations.

        :param effect: The effect of this Correlation.
        :type: str
        """
        if effect is None:
            raise ValueError("Invalid value for `effect`, must not be `None`")

        self._effect = effect

    @property
    def effect_variable_category_name(self):
        """
        Gets the effect_variable_category_name of this Correlation.
        Variable category of the effect variable.

        :return: The effect_variable_category_name of this Correlation.
        :rtype: str
        """
        return self._effect_variable_category_name

    @effect_variable_category_name.setter
    def effect_variable_category_name(self, effect_variable_category_name):
        """
        Sets the effect_variable_category_name of this Correlation.
        Variable category of the effect variable.

        :param effect_variable_category_name: The effect_variable_category_name of this Correlation.
        :type: str
        """

        self._effect_variable_category_name = effect_variable_category_name

    @property
    def effect_variable_image_url(self):
        """
        Gets the effect_variable_image_url of this Correlation.
        

        :return: The effect_variable_image_url of this Correlation.
        :rtype: str
        """
        return self._effect_variable_image_url

    @effect_variable_image_url.setter
    def effect_variable_image_url(self, effect_variable_image_url):
        """
        Sets the effect_variable_image_url of this Correlation.
        

        :param effect_variable_image_url: The effect_variable_image_url of this Correlation.
        :type: str
        """

        self._effect_variable_image_url = effect_variable_image_url

    @property
    def effect_variable_ion_icon(self):
        """
        Gets the effect_variable_ion_icon of this Correlation.
        For use in Ionic apps

        :return: The effect_variable_ion_icon of this Correlation.
        :rtype: str
        """
        return self._effect_variable_ion_icon

    @effect_variable_ion_icon.setter
    def effect_variable_ion_icon(self, effect_variable_ion_icon):
        """
        Sets the effect_variable_ion_icon of this Correlation.
        For use in Ionic apps

        :param effect_variable_ion_icon: The effect_variable_ion_icon of this Correlation.
        :type: str
        """

        self._effect_variable_ion_icon = effect_variable_ion_icon

    @property
    def effect_size(self):
        """
        Gets the effect_size of this Correlation.
        Magnitude of the effects of a cause indicating whether it's practically meaningful.

        :return: The effect_size of this Correlation.
        :rtype: str
        """
        return self._effect_size

    @effect_size.setter
    def effect_size(self, effect_size):
        """
        Sets the effect_size of this Correlation.
        Magnitude of the effects of a cause indicating whether it's practically meaningful.

        :param effect_size: The effect_size of this Correlation.
        :type: str
        """

        self._effect_size = effect_size

    @property
    def effect_variable_id(self):
        """
        Gets the effect_variable_id of this Correlation.
        Magnitude of the effects of a cause indicating whether it's practically meaningful.

        :return: The effect_variable_id of this Correlation.
        :rtype: str
        """
        return self._effect_variable_id

    @effect_variable_id.setter
    def effect_variable_id(self, effect_variable_id):
        """
        Sets the effect_variable_id of this Correlation.
        Magnitude of the effects of a cause indicating whether it's practically meaningful.

        :param effect_variable_id: The effect_variable_id of this Correlation.
        :type: str
        """

        self._effect_variable_id = effect_variable_id

    @property
    def effect_variable_name(self):
        """
        Gets the effect_variable_name of this Correlation.
        Variable name of the effect variable for which the user desires correlations.

        :return: The effect_variable_name of this Correlation.
        :rtype: str
        """
        return self._effect_variable_name

    @effect_variable_name.setter
    def effect_variable_name(self, effect_variable_name):
        """
        Sets the effect_variable_name of this Correlation.
        Variable name of the effect variable for which the user desires correlations.

        :param effect_variable_name: The effect_variable_name of this Correlation.
        :type: str
        """

        self._effect_variable_name = effect_variable_name

    @property
    def gauge_image(self):
        """
        Gets the gauge_image of this Correlation.
        Illustrates the strength of the relationship

        :return: The gauge_image of this Correlation.
        :rtype: str
        """
        return self._gauge_image

    @gauge_image.setter
    def gauge_image(self, gauge_image):
        """
        Sets the gauge_image of this Correlation.
        Illustrates the strength of the relationship

        :param gauge_image: The gauge_image of this Correlation.
        :type: str
        """

        self._gauge_image = gauge_image

    @property
    def image_url(self):
        """
        Gets the image_url of this Correlation.
        Large image for Facebook

        :return: The image_url of this Correlation.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this Correlation.
        Large image for Facebook

        :param image_url: The image_url of this Correlation.
        :type: str
        """

        self._image_url = image_url

    @property
    def number_of_pairs(self):
        """
        Gets the number_of_pairs of this Correlation.
        Number of points that went into the correlation calculation

        :return: The number_of_pairs of this Correlation.
        :rtype: float
        """
        return self._number_of_pairs

    @number_of_pairs.setter
    def number_of_pairs(self, number_of_pairs):
        """
        Sets the number_of_pairs of this Correlation.
        Number of points that went into the correlation calculation

        :param number_of_pairs: The number_of_pairs of this Correlation.
        :type: float
        """
        if number_of_pairs is None:
            raise ValueError("Invalid value for `number_of_pairs`, must not be `None`")

        self._number_of_pairs = number_of_pairs

    @property
    def onset_delay(self):
        """
        Gets the onset_delay of this Correlation.
        The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.

        :return: The onset_delay of this Correlation.
        :rtype: float
        """
        return self._onset_delay

    @onset_delay.setter
    def onset_delay(self, onset_delay):
        """
        Sets the onset_delay of this Correlation.
        The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the “onset delay”. For example, the “onset delay” between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.

        :param onset_delay: The onset_delay of this Correlation.
        :type: float
        """
        if onset_delay is None:
            raise ValueError("Invalid value for `onset_delay`, must not be `None`")

        self._onset_delay = onset_delay

    @property
    def optimal_pearson_product(self):
        """
        Gets the optimal_pearson_product of this Correlation.
        Optimal Pearson Product

        :return: The optimal_pearson_product of this Correlation.
        :rtype: float
        """
        return self._optimal_pearson_product

    @optimal_pearson_product.setter
    def optimal_pearson_product(self, optimal_pearson_product):
        """
        Sets the optimal_pearson_product of this Correlation.
        Optimal Pearson Product

        :param optimal_pearson_product: The optimal_pearson_product of this Correlation.
        :type: float
        """

        self._optimal_pearson_product = optimal_pearson_product

    @property
    def outcome_data_sources(self):
        """
        Gets the outcome_data_sources of this Correlation.
        original name of the cause.

        :return: The outcome_data_sources of this Correlation.
        :rtype: str
        """
        return self._outcome_data_sources

    @outcome_data_sources.setter
    def outcome_data_sources(self, outcome_data_sources):
        """
        Sets the outcome_data_sources of this Correlation.
        original name of the cause.

        :param outcome_data_sources: The outcome_data_sources of this Correlation.
        :type: str
        """

        self._outcome_data_sources = outcome_data_sources

    @property
    def predictor_explanation(self):
        """
        Gets the predictor_explanation of this Correlation.
        HIGHER Remeron predicts HIGHER Overall Mood

        :return: The predictor_explanation of this Correlation.
        :rtype: str
        """
        return self._predictor_explanation

    @predictor_explanation.setter
    def predictor_explanation(self, predictor_explanation):
        """
        Sets the predictor_explanation of this Correlation.
        HIGHER Remeron predicts HIGHER Overall Mood

        :param predictor_explanation: The predictor_explanation of this Correlation.
        :type: str
        """

        self._predictor_explanation = predictor_explanation

    @property
    def principal_investigator(self):
        """
        Gets the principal_investigator of this Correlation.
        Mike Sinn

        :return: The principal_investigator of this Correlation.
        :rtype: str
        """
        return self._principal_investigator

    @principal_investigator.setter
    def principal_investigator(self, principal_investigator):
        """
        Sets the principal_investigator of this Correlation.
        Mike Sinn

        :param principal_investigator: The principal_investigator of this Correlation.
        :type: str
        """

        self._principal_investigator = principal_investigator

    @property
    def qm_score(self):
        """
        Gets the qm_score of this Correlation.
        Value representing the significance of the relationship as a function of crowdsourced insights, predictive strength, data quantity, and data quality

        :return: The qm_score of this Correlation.
        :rtype: float
        """
        return self._qm_score

    @qm_score.setter
    def qm_score(self, qm_score):
        """
        Sets the qm_score of this Correlation.
        Value representing the significance of the relationship as a function of crowdsourced insights, predictive strength, data quantity, and data quality

        :param qm_score: The qm_score of this Correlation.
        :type: float
        """

        self._qm_score = qm_score

    @property
    def reverse_correlation(self):
        """
        Gets the reverse_correlation of this Correlation.
        Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.

        :return: The reverse_correlation of this Correlation.
        :rtype: float
        """
        return self._reverse_correlation

    @reverse_correlation.setter
    def reverse_correlation(self, reverse_correlation):
        """
        Sets the reverse_correlation of this Correlation.
        Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.

        :param reverse_correlation: The reverse_correlation of this Correlation.
        :type: float
        """

        self._reverse_correlation = reverse_correlation

    @property
    def significance_explanation(self):
        """
        Gets the significance_explanation of this Correlation.
        Using a two-tailed t-test with alpha = 0.05, it was determined that the change...

        :return: The significance_explanation of this Correlation.
        :rtype: str
        """
        return self._significance_explanation

    @significance_explanation.setter
    def significance_explanation(self, significance_explanation):
        """
        Sets the significance_explanation of this Correlation.
        Using a two-tailed t-test with alpha = 0.05, it was determined that the change...

        :param significance_explanation: The significance_explanation of this Correlation.
        :type: str
        """

        self._significance_explanation = significance_explanation

    @property
    def statistical_significance(self):
        """
        Gets the statistical_significance of this Correlation.
        A function of the effect size and sample size

        :return: The statistical_significance of this Correlation.
        :rtype: str
        """
        return self._statistical_significance

    @statistical_significance.setter
    def statistical_significance(self, statistical_significance):
        """
        Sets the statistical_significance of this Correlation.
        A function of the effect size and sample size

        :param statistical_significance: The statistical_significance of this Correlation.
        :type: str
        """

        self._statistical_significance = statistical_significance

    @property
    def strength_level(self):
        """
        Gets the strength_level of this Correlation.
        weak, moderate, strong

        :return: The strength_level of this Correlation.
        :rtype: str
        """
        return self._strength_level

    @strength_level.setter
    def strength_level(self, strength_level):
        """
        Sets the strength_level of this Correlation.
        weak, moderate, strong

        :param strength_level: The strength_level of this Correlation.
        :type: str
        """

        self._strength_level = strength_level

    @property
    def study_abstract(self):
        """
        Gets the study_abstract of this Correlation.
        These data suggest with a high degree of confidence...

        :return: The study_abstract of this Correlation.
        :rtype: str
        """
        return self._study_abstract

    @study_abstract.setter
    def study_abstract(self, study_abstract):
        """
        Sets the study_abstract of this Correlation.
        These data suggest with a high degree of confidence...

        :param study_abstract: The study_abstract of this Correlation.
        :type: str
        """

        self._study_abstract = study_abstract

    @property
    def study_background(self):
        """
        Gets the study_background of this Correlation.
        In order to reduce suffering through the advancement of human knowledge...

        :return: The study_background of this Correlation.
        :rtype: str
        """
        return self._study_background

    @study_background.setter
    def study_background(self, study_background):
        """
        Sets the study_background of this Correlation.
        In order to reduce suffering through the advancement of human knowledge...

        :param study_background: The study_background of this Correlation.
        :type: str
        """

        self._study_background = study_background

    @property
    def study_design(self):
        """
        Gets the study_design of this Correlation.
        This study is based on data donated by one QuantiModo user...

        :return: The study_design of this Correlation.
        :rtype: str
        """
        return self._study_design

    @study_design.setter
    def study_design(self, study_design):
        """
        Sets the study_design of this Correlation.
        This study is based on data donated by one QuantiModo user...

        :param study_design: The study_design of this Correlation.
        :type: str
        """

        self._study_design = study_design

    @property
    def study_limitations(self):
        """
        Gets the study_limitations of this Correlation.
        As with any human experiment, it was impossible to control for all potentially confounding variables...

        :return: The study_limitations of this Correlation.
        :rtype: str
        """
        return self._study_limitations

    @study_limitations.setter
    def study_limitations(self, study_limitations):
        """
        Sets the study_limitations of this Correlation.
        As with any human experiment, it was impossible to control for all potentially confounding variables...

        :param study_limitations: The study_limitations of this Correlation.
        :type: str
        """

        self._study_limitations = study_limitations

    @property
    def study_link_dynamic(self):
        """
        Gets the study_link_dynamic of this Correlation.
        Url for the interactive study within the web app

        :return: The study_link_dynamic of this Correlation.
        :rtype: str
        """
        return self._study_link_dynamic

    @study_link_dynamic.setter
    def study_link_dynamic(self, study_link_dynamic):
        """
        Sets the study_link_dynamic of this Correlation.
        Url for the interactive study within the web app

        :param study_link_dynamic: The study_link_dynamic of this Correlation.
        :type: str
        """

        self._study_link_dynamic = study_link_dynamic

    @property
    def study_link_facebook(self):
        """
        Gets the study_link_facebook of this Correlation.
        Url for sharing the study on Facebook

        :return: The study_link_facebook of this Correlation.
        :rtype: str
        """
        return self._study_link_facebook

    @study_link_facebook.setter
    def study_link_facebook(self, study_link_facebook):
        """
        Sets the study_link_facebook of this Correlation.
        Url for sharing the study on Facebook

        :param study_link_facebook: The study_link_facebook of this Correlation.
        :type: str
        """

        self._study_link_facebook = study_link_facebook

    @property
    def study_link_google(self):
        """
        Gets the study_link_google of this Correlation.
        Url for sharing the study on Google+

        :return: The study_link_google of this Correlation.
        :rtype: str
        """
        return self._study_link_google

    @study_link_google.setter
    def study_link_google(self, study_link_google):
        """
        Sets the study_link_google of this Correlation.
        Url for sharing the study on Google+

        :param study_link_google: The study_link_google of this Correlation.
        :type: str
        """

        self._study_link_google = study_link_google

    @property
    def study_link_twitter(self):
        """
        Gets the study_link_twitter of this Correlation.
        Url for sharing the study on Twitter

        :return: The study_link_twitter of this Correlation.
        :rtype: str
        """
        return self._study_link_twitter

    @study_link_twitter.setter
    def study_link_twitter(self, study_link_twitter):
        """
        Sets the study_link_twitter of this Correlation.
        Url for sharing the study on Twitter

        :param study_link_twitter: The study_link_twitter of this Correlation.
        :type: str
        """

        self._study_link_twitter = study_link_twitter

    @property
    def study_link_static(self):
        """
        Gets the study_link_static of this Correlation.
        Url for sharing the statically rendered study on social media

        :return: The study_link_static of this Correlation.
        :rtype: str
        """
        return self._study_link_static

    @study_link_static.setter
    def study_link_static(self, study_link_static):
        """
        Sets the study_link_static of this Correlation.
        Url for sharing the statically rendered study on social media

        :param study_link_static: The study_link_static of this Correlation.
        :type: str
        """

        self._study_link_static = study_link_static

    @property
    def study_objective(self):
        """
        Gets the study_objective of this Correlation.
        The objective of this study is to determine...

        :return: The study_objective of this Correlation.
        :rtype: str
        """
        return self._study_objective

    @study_objective.setter
    def study_objective(self, study_objective):
        """
        Sets the study_objective of this Correlation.
        The objective of this study is to determine...

        :param study_objective: The study_objective of this Correlation.
        :type: str
        """

        self._study_objective = study_objective

    @property
    def study_results(self):
        """
        Gets the study_results of this Correlation.
        This analysis suggests that...

        :return: The study_results of this Correlation.
        :rtype: str
        """
        return self._study_results

    @study_results.setter
    def study_results(self, study_results):
        """
        Sets the study_results of this Correlation.
        This analysis suggests that...

        :param study_results: The study_results of this Correlation.
        :type: str
        """

        self._study_results = study_results

    @property
    def study_title(self):
        """
        Gets the study_title of this Correlation.
        N1 Study HIGHER Remeron predicts HIGHER Overall Mood

        :return: The study_title of this Correlation.
        :rtype: str
        """
        return self._study_title

    @study_title.setter
    def study_title(self, study_title):
        """
        Sets the study_title of this Correlation.
        N1 Study HIGHER Remeron predicts HIGHER Overall Mood

        :param study_title: The study_title of this Correlation.
        :type: str
        """

        self._study_title = study_title

    @property
    def timestamp(self):
        """
        Gets the timestamp of this Correlation.
        Time at which correlation was calculated

        :return: The timestamp of this Correlation.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this Correlation.
        Time at which correlation was calculated

        :param timestamp: The timestamp of this Correlation.
        :type: float
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Correlation.
        When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.

        :return: The updated_at of this Correlation.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Correlation.
        When the record in the database was last updated. Use UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"  datetime format. Time zone should be UTC and not local.

        :param updated_at: The updated_at of this Correlation.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_vote(self):
        """
        Gets the user_vote of this Correlation.
        User Vote

        :return: The user_vote of this Correlation.
        :rtype: float
        """
        return self._user_vote

    @user_vote.setter
    def user_vote(self, user_vote):
        """
        Sets the user_vote of this Correlation.
        User Vote

        :param user_vote: The user_vote of this Correlation.
        :type: float
        """

        self._user_vote = user_vote

    @property
    def value_predicting_high_outcome(self):
        """
        Gets the value_predicting_high_outcome of this Correlation.
        cause value that predicts an above average effect value (in default unit for cause variable)

        :return: The value_predicting_high_outcome of this Correlation.
        :rtype: float
        """
        return self._value_predicting_high_outcome

    @value_predicting_high_outcome.setter
    def value_predicting_high_outcome(self, value_predicting_high_outcome):
        """
        Sets the value_predicting_high_outcome of this Correlation.
        cause value that predicts an above average effect value (in default unit for cause variable)

        :param value_predicting_high_outcome: The value_predicting_high_outcome of this Correlation.
        :type: float
        """

        self._value_predicting_high_outcome = value_predicting_high_outcome

    @property
    def value_predicting_high_outcome_explanation(self):
        """
        Gets the value_predicting_high_outcome_explanation of this Correlation.
        Overall Mood, on average, 34% HIGHER after around 3.98mg Remeron

        :return: The value_predicting_high_outcome_explanation of this Correlation.
        :rtype: str
        """
        return self._value_predicting_high_outcome_explanation

    @value_predicting_high_outcome_explanation.setter
    def value_predicting_high_outcome_explanation(self, value_predicting_high_outcome_explanation):
        """
        Sets the value_predicting_high_outcome_explanation of this Correlation.
        Overall Mood, on average, 34% HIGHER after around 3.98mg Remeron

        :param value_predicting_high_outcome_explanation: The value_predicting_high_outcome_explanation of this Correlation.
        :type: str
        """

        self._value_predicting_high_outcome_explanation = value_predicting_high_outcome_explanation

    @property
    def value_predicting_low_outcome(self):
        """
        Gets the value_predicting_low_outcome of this Correlation.
        cause value that predicts a below average effect value (in default unit for cause variable)

        :return: The value_predicting_low_outcome of this Correlation.
        :rtype: float
        """
        return self._value_predicting_low_outcome

    @value_predicting_low_outcome.setter
    def value_predicting_low_outcome(self, value_predicting_low_outcome):
        """
        Sets the value_predicting_low_outcome of this Correlation.
        cause value that predicts a below average effect value (in default unit for cause variable)

        :param value_predicting_low_outcome: The value_predicting_low_outcome of this Correlation.
        :type: float
        """

        self._value_predicting_low_outcome = value_predicting_low_outcome

    @property
    def value_predicting_low_outcome_explanation(self):
        """
        Gets the value_predicting_low_outcome_explanation of this Correlation.
        Overall Mood, on average, 4% LOWER after around 0mg Remeron

        :return: The value_predicting_low_outcome_explanation of this Correlation.
        :rtype: str
        """
        return self._value_predicting_low_outcome_explanation

    @value_predicting_low_outcome_explanation.setter
    def value_predicting_low_outcome_explanation(self, value_predicting_low_outcome_explanation):
        """
        Sets the value_predicting_low_outcome_explanation of this Correlation.
        Overall Mood, on average, 4% LOWER after around 0mg Remeron

        :param value_predicting_low_outcome_explanation: The value_predicting_low_outcome_explanation of this Correlation.
        :type: str
        """

        self._value_predicting_low_outcome_explanation = value_predicting_low_outcome_explanation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
