# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Measurement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, variable_name=None, source_name=None, start_time_string=None, start_time_epoch=None, human_time=None, value=None, original_value=None, originalunit_abbreviated_name=None, unit_abbreviated_name=None, note=None):
        """
        Measurement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'variable_name': 'str',
            'source_name': 'str',
            'start_time_string': 'str',
            'start_time_epoch': 'int',
            'human_time': 'HumanTime',
            'value': 'float',
            'original_value': 'int',
            'originalunit_abbreviated_name': 'str',
            'unit_abbreviated_name': 'str',
            'note': 'str'
        }

        self.attribute_map = {
            'variable_name': 'variableName',
            'source_name': 'sourceName',
            'start_time_string': 'startTimeString',
            'start_time_epoch': 'startTimeEpoch',
            'human_time': 'humanTime',
            'value': 'value',
            'original_value': 'originalValue',
            'originalunit_abbreviated_name': 'originalunitAbbreviatedName',
            'unit_abbreviated_name': 'unitAbbreviatedName',
            'note': 'note'
        }

        self._variable_name = variable_name
        self._source_name = source_name
        self._start_time_string = start_time_string
        self._start_time_epoch = start_time_epoch
        self._human_time = human_time
        self._value = value
        self._original_value = original_value
        self._originalunit_abbreviated_name = originalunit_abbreviated_name
        self._unit_abbreviated_name = unit_abbreviated_name
        self._note = note


    @property
    def variable_name(self):
        """
        Gets the variable_name of this Measurement.
        Name of the variable for which we are creating the measurement records

        :return: The variable_name of this Measurement.
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """
        Sets the variable_name of this Measurement.
        Name of the variable for which we are creating the measurement records

        :param variable_name: The variable_name of this Measurement.
        :type: str
        """
        if variable_name is None:
            raise ValueError("Invalid value for `variable_name`, must not be `None`")

        self._variable_name = variable_name

    @property
    def source_name(self):
        """
        Gets the source_name of this Measurement.
        Application or device used to record the measurement values

        :return: The source_name of this Measurement.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """
        Sets the source_name of this Measurement.
        Application or device used to record the measurement values

        :param source_name: The source_name of this Measurement.
        :type: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")

        self._source_name = source_name

    @property
    def start_time_string(self):
        """
        Gets the start_time_string of this Measurement.
        Start Time for the measurement event in UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"

        :return: The start_time_string of this Measurement.
        :rtype: str
        """
        return self._start_time_string

    @start_time_string.setter
    def start_time_string(self, start_time_string):
        """
        Sets the start_time_string of this Measurement.
        Start Time for the measurement event in UTC ISO 8601 \"YYYY-MM-DDThh:mm:ss\"

        :param start_time_string: The start_time_string of this Measurement.
        :type: str
        """
        if start_time_string is None:
            raise ValueError("Invalid value for `start_time_string`, must not be `None`")

        self._start_time_string = start_time_string

    @property
    def start_time_epoch(self):
        """
        Gets the start_time_epoch of this Measurement.
        Seconds between the start of the event measured and 1970 (Unix timestamp)

        :return: The start_time_epoch of this Measurement.
        :rtype: int
        """
        return self._start_time_epoch

    @start_time_epoch.setter
    def start_time_epoch(self, start_time_epoch):
        """
        Sets the start_time_epoch of this Measurement.
        Seconds between the start of the event measured and 1970 (Unix timestamp)

        :param start_time_epoch: The start_time_epoch of this Measurement.
        :type: int
        """

        self._start_time_epoch = start_time_epoch

    @property
    def human_time(self):
        """
        Gets the human_time of this Measurement.


        :return: The human_time of this Measurement.
        :rtype: HumanTime
        """
        return self._human_time

    @human_time.setter
    def human_time(self, human_time):
        """
        Sets the human_time of this Measurement.


        :param human_time: The human_time of this Measurement.
        :type: HumanTime
        """

        self._human_time = human_time

    @property
    def value(self):
        """
        Gets the value of this Measurement.
        Converted measurement value in requested unit

        :return: The value of this Measurement.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this Measurement.
        Converted measurement value in requested unit

        :param value: The value of this Measurement.
        :type: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value

    @property
    def original_value(self):
        """
        Gets the original_value of this Measurement.
        Original value as originally submitted

        :return: The original_value of this Measurement.
        :rtype: int
        """
        return self._original_value

    @original_value.setter
    def original_value(self, original_value):
        """
        Sets the original_value of this Measurement.
        Original value as originally submitted

        :param original_value: The original_value of this Measurement.
        :type: int
        """

        self._original_value = original_value

    @property
    def originalunit_abbreviated_name(self):
        """
        Gets the originalunit_abbreviated_name of this Measurement.
        Original Unit of measurement as originally submitted

        :return: The originalunit_abbreviated_name of this Measurement.
        :rtype: str
        """
        return self._originalunit_abbreviated_name

    @originalunit_abbreviated_name.setter
    def originalunit_abbreviated_name(self, originalunit_abbreviated_name):
        """
        Sets the originalunit_abbreviated_name of this Measurement.
        Original Unit of measurement as originally submitted

        :param originalunit_abbreviated_name: The originalunit_abbreviated_name of this Measurement.
        :type: str
        """

        self._originalunit_abbreviated_name = originalunit_abbreviated_name

    @property
    def unit_abbreviated_name(self):
        """
        Gets the unit_abbreviated_name of this Measurement.
        Abbreviated name for the unit of measurement

        :return: The unit_abbreviated_name of this Measurement.
        :rtype: str
        """
        return self._unit_abbreviated_name

    @unit_abbreviated_name.setter
    def unit_abbreviated_name(self, unit_abbreviated_name):
        """
        Sets the unit_abbreviated_name of this Measurement.
        Abbreviated name for the unit of measurement

        :param unit_abbreviated_name: The unit_abbreviated_name of this Measurement.
        :type: str
        """
        if unit_abbreviated_name is None:
            raise ValueError("Invalid value for `unit_abbreviated_name`, must not be `None`")

        self._unit_abbreviated_name = unit_abbreviated_name

    @property
    def note(self):
        """
        Gets the note of this Measurement.
        Note of measurement

        :return: The note of this Measurement.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Measurement.
        Note of measurement

        :param note: The note of this Measurement.
        :type: str
        """

        self._note = note

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
