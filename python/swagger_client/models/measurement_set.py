# coding: utf-8

"""
    QuantiModo

    QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MeasurementSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, measurements=None, variable_name=None, source_name=None, variable_category_name=None, combination_operation=None, unit_abbreviated_name=None):
        """
        MeasurementSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'measurements': 'list[ValueObject]',
            'variable_name': 'str',
            'source_name': 'str',
            'variable_category_name': 'str',
            'combination_operation': 'str',
            'unit_abbreviated_name': 'str'
        }

        self.attribute_map = {
            'measurements': 'measurements',
            'variable_name': 'variableName',
            'source_name': 'sourceName',
            'variable_category_name': 'variableCategoryName',
            'combination_operation': 'combinationOperation',
            'unit_abbreviated_name': 'unitAbbreviatedName'
        }

        self._measurements = measurements
        self._variable_name = variable_name
        self._source_name = source_name
        self._variable_category_name = variable_category_name
        self._combination_operation = combination_operation
        self._unit_abbreviated_name = unit_abbreviated_name


    @property
    def measurements(self):
        """
        Gets the measurements of this MeasurementSet.
        Array of timestamps, values, and optional notes

        :return: The measurements of this MeasurementSet.
        :rtype: list[ValueObject]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """
        Sets the measurements of this MeasurementSet.
        Array of timestamps, values, and optional notes

        :param measurements: The measurements of this MeasurementSet.
        :type: list[ValueObject]
        """
        if measurements is None:
            raise ValueError("Invalid value for `measurements`, must not be `None`")

        self._measurements = measurements

    @property
    def variable_name(self):
        """
        Gets the variable_name of this MeasurementSet.
        ORIGINAL name of the variable for which we are creating the measurement records

        :return: The variable_name of this MeasurementSet.
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """
        Sets the variable_name of this MeasurementSet.
        ORIGINAL name of the variable for which we are creating the measurement records

        :param variable_name: The variable_name of this MeasurementSet.
        :type: str
        """
        if variable_name is None:
            raise ValueError("Invalid value for `variable_name`, must not be `None`")

        self._variable_name = variable_name

    @property
    def source_name(self):
        """
        Gets the source_name of this MeasurementSet.
        Name of the application or device used to record the measurement values

        :return: The source_name of this MeasurementSet.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """
        Sets the source_name of this MeasurementSet.
        Name of the application or device used to record the measurement values

        :param source_name: The source_name of this MeasurementSet.
        :type: str
        """
        if source_name is None:
            raise ValueError("Invalid value for `source_name`, must not be `None`")

        self._source_name = source_name

    @property
    def variable_category_name(self):
        """
        Gets the variable_category_name of this MeasurementSet.
        Variable category name

        :return: The variable_category_name of this MeasurementSet.
        :rtype: str
        """
        return self._variable_category_name

    @variable_category_name.setter
    def variable_category_name(self, variable_category_name):
        """
        Sets the variable_category_name of this MeasurementSet.
        Variable category name

        :param variable_category_name: The variable_category_name of this MeasurementSet.
        :type: str
        """

        self._variable_category_name = variable_category_name

    @property
    def combination_operation(self):
        """
        Gets the combination_operation of this MeasurementSet.
        Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.

        :return: The combination_operation of this MeasurementSet.
        :rtype: str
        """
        return self._combination_operation

    @combination_operation.setter
    def combination_operation(self, combination_operation):
        """
        Sets the combination_operation of this MeasurementSet.
        Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.

        :param combination_operation: The combination_operation of this MeasurementSet.
        :type: str
        """
        allowed_values = ["MEAN", "SUM"]
        if combination_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `combination_operation` ({0}), must be one of {1}"
                .format(combination_operation, allowed_values)
            )

        self._combination_operation = combination_operation

    @property
    def unit_abbreviated_name(self):
        """
        Gets the unit_abbreviated_name of this MeasurementSet.
        Unit of measurement

        :return: The unit_abbreviated_name of this MeasurementSet.
        :rtype: str
        """
        return self._unit_abbreviated_name

    @unit_abbreviated_name.setter
    def unit_abbreviated_name(self, unit_abbreviated_name):
        """
        Sets the unit_abbreviated_name of this MeasurementSet.
        Unit of measurement

        :param unit_abbreviated_name: The unit_abbreviated_name of this MeasurementSet.
        :type: str
        """
        if unit_abbreviated_name is None:
            raise ValueError("Invalid value for `unit_abbreviated_name`, must not be `None`")

        self._unit_abbreviated_name = unit_abbreviated_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
