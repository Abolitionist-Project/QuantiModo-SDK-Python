#!/usr/bin/env python
# coding: utf-8

"""
MeasurementsApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class MeasurementsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def measurementSourcesGet(self, **kwargs):
        """Get measurement sources

        Args:
            
        
        Returns: 
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method measurementSourcesGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/measurementSources'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def measurementSourcesPost(self, **kwargs):
        """Set measurement source

        Args:
            
            measurements, list[MeasurementSource]: An array of measurements you want to insert (required)
            
            
        
        Returns: 
        """

        allParams = ['measurements']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method measurementSourcesPost" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/measurementSources'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        
        if ('measurements' in params):
            bodyParam = params['measurements']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def measurementsGet(self, **kwargs):
        """Get measurements for this user

        Args:
            
            variable_name, str: Name of the variable you want measurements for (required)
            
            
            unit, str: The unit your want the measurements in (required)
            
            
            start_time, str: The lower limit of measurements returned (Epoch) (required)
            
            
            end_time, str: The upper limit of measurements returned (Epoch) (required)
            
            
            grouping_width, int: The time (in seconds) over which measurements are grouped together (required)
            
            
            grouping_timezone, str: The time (in seconds) over which measurements are grouped together (required)
            
            
        
        Returns: 
        """

        allParams = ['variable_name', 'unit', 'start_time', 'end_time', 'grouping_width', 'grouping_timezone']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method measurementsGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/measurements'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('variable_name' in params):
            queryParams['variableName'] = self.apiClient.toPathValue(params['variable_name'])
        
        if ('unit' in params):
            queryParams['unit'] = self.apiClient.toPathValue(params['unit'])
        
        if ('start_time' in params):
            queryParams['startTime'] = self.apiClient.toPathValue(params['start_time'])
        
        if ('end_time' in params):
            queryParams['endTime'] = self.apiClient.toPathValue(params['end_time'])
        
        if ('grouping_width' in params):
            queryParams['groupingWidth'] = self.apiClient.toPathValue(params['grouping_width'])
        
        if ('grouping_timezone' in params):
            queryParams['groupingTimezone'] = self.apiClient.toPathValue(params['grouping_timezone'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def measurementsV2Post(self, **kwargs):
        """Set measurement

        Args:
            
            measurements, list[Measurement]: An array of measurements you want to insert (required)
            
            
        
        Returns: 
        """

        allParams = ['measurements']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method measurementsV2Post" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/measurements/v2'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        
        if ('measurements' in params):
            bodyParam = params['measurements']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def measurementsRangeGet(self, **kwargs):
        """Get measurements range for this user

        Args:
            
            sources, str: Enter source name to limit to specific source (varchar) (required)
            
            
            user, int: If not specified, uses currently logged in user (bigint) (required)
            
            
        
        Returns: 
        """

        allParams = ['sources', 'user']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method measurementsRangeGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/measurementsRange'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('sources' in params):
            queryParams['sources'] = self.apiClient.toPathValue(params['sources'])
        
        if ('user' in params):
            queryParams['user'] = self.apiClient.toPathValue(params['user'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    


