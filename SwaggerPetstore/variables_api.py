#!/usr/bin/env python
# coding: utf-8

"""
VariablesApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class VariablesApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def publicVariablesGet(self, **kwargs):
        """Get public variables

        Args:
            
        
        Returns: 
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method publicVariablesGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/public/variables'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def publicVariablesSearchSearchGet(self, **kwargs):
        """Get top 5 PUBLIC variables with the most correlations

        Args:
            
            search, str: Search query (required)
            
            
            effect_or_cause, str: Allows us to specify which column in the `correlations` table will be searched. Choices are effect or cause. (required)
            
            
        
        Returns: 
        """

        allParams = ['search', 'effect_or_cause']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method publicVariablesSearchSearchGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/public/variables/search/{search}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('effect_or_cause' in params):
            queryParams['effectOrCause'] = self.apiClient.toPathValue(params['effect_or_cause'])
        

        

        
        if ('search' in params):
            replacement = str(self.apiClient.toPathValue(params['search']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'search' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def variableCategoriesGet(self, **kwargs):
        """Get variable categories

        Args:
            
        
        Returns: 
        """

        allParams = []

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method variableCategoriesGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/variableCategories'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def variableUserSettingsPost(self, **kwargs):
        """Change variable user setting

        Args:
            
            sharing_data, list[VariableUserSettings]: Variable user settings data (required)
            
            
        
        Returns: 
        """

        allParams = ['sharing_data']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method variableUserSettingsPost" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/variableUserSettings'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        
        if ('sharing_data' in params):
            bodyParam = params['sharing_data']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def variablesGet(self, **kwargs):
        """Get variables by the category name

        Args:
            
            user_id, int: User id (required)
            
            
            category_name, str: Category name (required)
            
            
        
        Returns: 
        """

        allParams = ['user_id', 'category_name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method variablesGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/variables'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('user_id' in params):
            queryParams['userId'] = self.apiClient.toPathValue(params['user_id'])
        
        if ('category_name' in params):
            queryParams['categoryName'] = self.apiClient.toPathValue(params['category_name'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def variablesPost(self, **kwargs):
        """Set variable

        Args:
            
            variable_name, list[Variable]: Original name for the variable. (required)
            
            
        
        Returns: 
        """

        allParams = ['variable_name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method variablesPost" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/variables'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'POST'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        

        

        

        

        
        if ('variable_name' in params):
            bodyParam = params['variable_name']
        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def variablesSearchSearchGet(self, **kwargs):
        """Get variables by search query

        Args:
            
            search, str: Search query (required)
            
            
            category_name, str: Filter variables by category name. (required)
            
            
            source, str: Filter variables by source name. (required)
            
            
            limit, int: Search limit (required)
            
            
            offset, int: Search offset (required)
            
            
        
        Returns: 
        """

        allParams = ['search', 'category_name', 'source', 'limit', 'offset']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method variablesSearchSearchGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/variables/search/{search}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('category_name' in params):
            queryParams['categoryName'] = self.apiClient.toPathValue(params['category_name'])
        
        if ('source' in params):
            queryParams['source'] = self.apiClient.toPathValue(params['source'])
        
        if ('limit' in params):
            queryParams['limit'] = self.apiClient.toPathValue(params['limit'])
        
        if ('offset' in params):
            queryParams['offset'] = self.apiClient.toPathValue(params['offset'])
        

        

        
        if ('search' in params):
            replacement = str(self.apiClient.toPathValue(params['search']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'search' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    
    def variablesVariableNameGet(self, **kwargs):
        """Get info about a variable

        Args:
            
            variable_name, str: Variable name (required)
            
            
            category_name, str: categoryName` parameter allows us to filter the variables so that only ones from the specified category are returned. (required)
            
            
        
        Returns: 
        """

        allParams = ['variable_name', 'category_name']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method variablesVariableNameGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/variables/{variableName}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('category_name' in params):
            queryParams['categoryName'] = self.apiClient.toPathValue(params['category_name'])
        

        

        
        if ('variable_name' in params):
            replacement = str(self.apiClient.toPathValue(params['variable_name']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'variableName' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        
        
    


