#!/usr/bin/env python
# coding: utf-8

"""
PairsApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class PairsApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('https://localhost/api')
            self.api_client = configuration.api_client
    
    
    def pairs_get(self, cause, effect, **kwargs):
        """
        Get pairs
        Pairs cause measurements with effect measurements grouped over the duration of action after the onset delay.

        :param str cause: Original variable name for the explanatory or independent variable (required)
        :param str cause_source: Name of data source that the cause measurements should come from 
        :param str cause_unit: Abbreviated name for the unit cause measurements to be returned in 
        :param str delay: Delay before onset of action (in seconds) from the cause variable settings. 
        :param str duration: Duration of action (in seconds) from the cause variable settings. 
        :param str effect: Original variable name for the outcome or dependent variable (required)
        :param str effect_source: Name of data source that the effectmeasurements should come from 
        :param str effect_unit: Abbreviated name for the unit effect measurements to be returned in 
        :param str end_time: The most recent date (in epoch time) for which we should return measurements 
        :param str start_time: The earliest date (in epoch time) for which we should return measurements 
        
        :return: list[Pairs]
        """
        
        # verify the required parameter 'cause' is set
        if cause is None:
            raise ValueError("Missing the required parameter `cause` when calling `pairs_get`")
        
        # verify the required parameter 'effect' is set
        if effect is None:
            raise ValueError("Missing the required parameter `effect` when calling `pairs_get`")
        
        all_params = ['cause', 'cause_source', 'cause_unit', 'delay', 'duration', 'effect', 'effect_source', 'effect_unit', 'end_time', 'start_time']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method pairs_get" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/pairs'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'cause' in params:
            query_params['cause'] = params['cause']
        
        if 'cause_source' in params:
            query_params['causeSource'] = params['cause_source']
        
        if 'cause_unit' in params:
            query_params['causeUnit'] = params['cause_unit']
        
        if 'delay' in params:
            query_params['delay'] = params['delay']
        
        if 'duration' in params:
            query_params['duration'] = params['duration']
        
        if 'effect' in params:
            query_params['effect'] = params['effect']
        
        if 'effect_source' in params:
            query_params['effectSource'] = params['effect_source']
        
        if 'effect_unit' in params:
            query_params['effectUnit'] = params['effect_unit']
        
        if 'end_time' in params:
            query_params['endTime'] = params['end_time']
        
        if 'start_time' in params:
            query_params['startTime'] = params['start_time']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response='list[Pairs]', auth_settings=auth_settings)
        
        return response
        









