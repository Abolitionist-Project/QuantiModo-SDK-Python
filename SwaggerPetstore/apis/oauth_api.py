#!/usr/bin/env python
# coding: utf-8

"""
OauthApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from .. import configuration
from ..api_client import ApiClient

class OauthApi(object):

    def __init__(self, api_client=None):
        if api_client:
            self.api_client = api_client
        else:
            if not configuration.api_client:
                configuration.api_client = ApiClient('https://localhost/api')
            self.api_client = configuration.api_client
    
    
    def oauth2_accesstoken_get(self, response_type, redirect_uri, realm, client_id, scope, state, **kwargs):
        """
        Access Token
        Client provides authorization token obtained from /api/oauth2/authorize to this endpoint and receives an access token. Access token can then

        :param str response_type: Response type (required)
        :param str redirect_uri: Redirect uri (required)
        :param str realm: Realm (required)
        :param str client_id: Client id (required)
        :param str scope: Scope (required)
        :param str state: State (required)
        
        :return: None
        """
        
        # verify the required parameter 'response_type' is set
        if response_type is None:
            raise ValueError("Missing the required parameter `response_type` when calling `oauth2_accesstoken_get`")
        
        # verify the required parameter 'redirect_uri' is set
        if redirect_uri is None:
            raise ValueError("Missing the required parameter `redirect_uri` when calling `oauth2_accesstoken_get`")
        
        # verify the required parameter 'realm' is set
        if realm is None:
            raise ValueError("Missing the required parameter `realm` when calling `oauth2_accesstoken_get`")
        
        # verify the required parameter 'client_id' is set
        if client_id is None:
            raise ValueError("Missing the required parameter `client_id` when calling `oauth2_accesstoken_get`")
        
        # verify the required parameter 'scope' is set
        if scope is None:
            raise ValueError("Missing the required parameter `scope` when calling `oauth2_accesstoken_get`")
        
        # verify the required parameter 'state' is set
        if state is None:
            raise ValueError("Missing the required parameter `state` when calling `oauth2_accesstoken_get`")
        
        all_params = ['response_type', 'redirect_uri', 'realm', 'client_id', 'scope', 'state']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method oauth2_accesstoken_get" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/oauth2/accesstoken'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'response_type' in params:
            query_params['response_type'] = params['response_type']
        
        if 'redirect_uri' in params:
            query_params['redirect_uri'] = params['redirect_uri']
        
        if 'realm' in params:
            query_params['realm'] = params['realm']
        
        if 'client_id' in params:
            query_params['client_id'] = params['client_id']
        
        if 'scope' in params:
            query_params['scope'] = params['scope']
        
        if 'state' in params:
            query_params['state'] = params['state']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        
    def oauth2_authorize_get(self, client_id, realm, redirect_uri, response_type, scope, state, **kwargs):
        """
        Authorize
        Ask the user if they want to allow a client applications to submit or obtain data from their QM  account.

        :param str client_id: This is the unique ID that QuantiModo uses to identify your application. Obtain a client id by emailing info@quantimo.do. (required)
        :param str realm: Name of the realm representing the users of your distributed applications and services. A \"realm\" attribute MAY be included to indicate the scope of protection. (required)
        :param str redirect_uri: The redirect URI is the URL within your client application that will receive the OAuth2 credentials. (required)
        :param str response_type: If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. (required)
        :param str scope: Scopes include basic, readmeasurements, and writemeasurements. The \"basic\" scope allows you to read user info (displayname, email, etc). The \"readmeasurements\" scope allows one to read a user's data. The \"writemeasurements\" scope allows you to write user data. Separate multiple scopes by a space. (required)
        :param str state: An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI (required)
        
        :return: None
        """
        
        # verify the required parameter 'client_id' is set
        if client_id is None:
            raise ValueError("Missing the required parameter `client_id` when calling `oauth2_authorize_get`")
        
        # verify the required parameter 'realm' is set
        if realm is None:
            raise ValueError("Missing the required parameter `realm` when calling `oauth2_authorize_get`")
        
        # verify the required parameter 'redirect_uri' is set
        if redirect_uri is None:
            raise ValueError("Missing the required parameter `redirect_uri` when calling `oauth2_authorize_get`")
        
        # verify the required parameter 'response_type' is set
        if response_type is None:
            raise ValueError("Missing the required parameter `response_type` when calling `oauth2_authorize_get`")
        
        # verify the required parameter 'scope' is set
        if scope is None:
            raise ValueError("Missing the required parameter `scope` when calling `oauth2_authorize_get`")
        
        # verify the required parameter 'state' is set
        if state is None:
            raise ValueError("Missing the required parameter `state` when calling `oauth2_authorize_get`")
        
        all_params = ['client_id', 'realm', 'redirect_uri', 'response_type', 'scope', 'state']

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method oauth2_authorize_get" % key)
            params[key] = val
        del params['kwargs']

        resource_path = '/oauth2/authorize'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        
        query_params = {}
        
        if 'client_id' in params:
            query_params['client_id'] = params['client_id']
        
        if 'realm' in params:
            query_params['realm'] = params['realm']
        
        if 'redirect_uri' in params:
            query_params['redirect_uri'] = params['redirect_uri']
        
        if 'response_type' in params:
            query_params['response_type'] = params['response_type']
        
        if 'scope' in params:
            query_params['scope'] = params['scope']
        
        if 'state' in params:
            query_params['state'] = params['state']
        
        header_params = {}
        
        form_params = {}
        files = {}
        
        body_params = None
        
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type([])

        # Authentication setting
        auth_settings = ['oauth2']

        response = self.api_client.call_api(resource_path, method, path_params, query_params, header_params,
                                            body=body_params, post_params=form_params, files=files,
                                            response=None, auth_settings=auth_settings)
        









