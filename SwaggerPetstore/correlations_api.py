#!/usr/bin/env python
# coding: utf-8

"""
CorrelationsApi.py
Copyright 2015 Reverb Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
"""
import sys
import os
import urllib

from models import *


class CorrelationsApi(object):

    def __init__(self, apiClient):
      self.apiClient = apiClient

    
    
    def correlationsGet(self, **kwargs):
        """Get correlations

        Args:
            
            effect, str: ORIGINAL variable name of the effect variable for which the user desires correlations (required)
            
            
            cause, str: ORIGINAL variable name of the cause variable for which the user desires correlations (required)
            
            
        
        Returns: list[Correlation]
        """

        allParams = ['effect', 'cause']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method correlationsGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/correlations'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('effect' in params):
            queryParams['effect'] = self.apiClient.toPathValue(params['effect'])
        
        if ('cause' in params):
            queryParams['cause'] = self.apiClient.toPathValue(params['cause'])
        

        

        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[Correlation]')
        return responseObject
        
        
        
    
    def publicCorrelationsSearchSearchGet(self, **kwargs):
        """Get average correlations for variables containing search term

        Args:
            
            search, str: Search query (required)
            
            
            effect_or_cause, str: Specifies whehter to return the effects or causes of the searched variable. (required)
            
            
        
        Returns: list[Correlation]
        """

        allParams = ['search', 'effect_or_cause']

        params = locals()
        for (key, val) in params['kwargs'].iteritems():
            if key not in allParams:
                raise TypeError("Got an unexpected keyword argument '%s' to method publicCorrelationsSearchSearchGet" % key)
            params[key] = val
        del params['kwargs']

        resourcePath = '/public/correlations/search/{search}'
        resourcePath = resourcePath.replace('{format}', 'json')
        method = 'GET'

        queryParams = {}
        headerParams = {}
        formParams = {}
        files = {}
        bodyParam = None

        headerParams['Accept'] = 'application/json'
        headerParams['Content-Type'] = ''

        
        if ('effect_or_cause' in params):
            queryParams['effectOrCause'] = self.apiClient.toPathValue(params['effect_or_cause'])
        

        

        
        if ('search' in params):
            replacement = str(self.apiClient.toPathValue(params['search']))
            replacement = urllib.quote(replacement)
            resourcePath = resourcePath.replace('{' + 'search' + '}',
                                                replacement)
        

        

        

        postData = (formParams if formParams else bodyParam)

        response = self.apiClient.callAPI(resourcePath, method, queryParams,
                                          postData, headerParams, files=files)

        
        if not response:
            return None

        responseObject = self.apiClient.deserialize(response, 'list[Correlation]')
        return responseObject
        
        
        
    


